/**
 * Export Bundle - Artifact Composition
 * Generates standardized artifacts from validated runs
 */

export interface ArtifactContext {
  prompt: string;
  title: string;
  moduleId: string;
  domain: string;
  kpi: string;
  spec: string;
  guardrails: string;
  sevenD: Record<string, any>;
  output: string;
  meta: Record<string, any>;
}

/**
 * Compose prompt.txt - Industrial format with fixed sections
 */
export function composeTxt({ prompt }: { prompt: string }): string {
  // Normalize line endings to LF for reproducible hashing
  return prompt.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
}

/**
 * Compose prompt.md - Human-readable version
 */
export function composeMd(context: {
  title: string;
  kpi: string;
  spec: string;
  guardrails: string;
  moduleId: string;
  domain: string;
  prompt: string;
}): string {
  const { title, kpi, spec, guardrails, moduleId, domain, prompt } = context;

  const markdown = `# ${title}

**Module:** ${moduleId}  
**Domain:** ${domain}

## Key Performance Indicators
${kpi}

## Specification
${spec}

## Guardrails
${guardrails}

## Prompt Content

\`\`\`
${prompt}
\`\`\`

---
*Generated by PROMPTFORGEâ„¢ v3*
`;

  // Normalize line endings
  return markdown.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
}

/**
 * Compose prompt.json - Structured data with 7D + metadata
 */
export function composeJson(context: {
  sevenD: Record<string, any>;
  output: string;
  meta: Record<string, any>;
  moduleId: string;
  domain: string;
}): object {
  const { sevenD, output, meta, moduleId, domain } = context;

  return {
    module_id: moduleId,
    domain: domain,
    seven_d: sevenD,
    output: output,
    meta: meta,
    generated_at: new Date().toISOString(),
    version: '1.0.0',
  };
}

/**
 * Compose telemetry.json - Technical metrics without raw content
 */
export function composeTelemetry(context: {
  score: {
    clarity: number;
    execution: number;
    ambiguity: number;
    business_fit: number;
    overall_score: number;
  };
  tokens: {
    input: number;
    output: number;
    total: number;
  };
  tta: number; // Time to answer in ms
  cost_usd: number;
  model: string;
  policy_hits?: string[];
}): object {
  const { score, tokens, tta, cost_usd, model, policy_hits = [] } = context;

  return {
    score: score,
    performance: {
      tokens_input: tokens.input,
      tokens_output: tokens.output,
      tokens_total: tokens.total,
      time_to_answer_ms: tta,
      cost_usd: cost_usd,
      model: model,
    },
    compliance: {
      policy_hits: policy_hits,
      pii_detected: false, // Always false as we don't include PII
    },
    timestamp: new Date().toISOString(),
    version: '1.0.0',
  };
}

/**
 * Normalize content for consistent hashing
 * Ensures LF line endings and removes trailing whitespace
 */
export function normalizeContent(content: string): string {
  return content
    .replace(/\r\n/g, '\n')
    .replace(/\r/g, '\n')
    .split('\n')
    .map(line => line.trimEnd())
    .join('\n')
    .trimEnd();
}
