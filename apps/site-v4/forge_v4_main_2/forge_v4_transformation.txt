# Plan de Conformitate Globală și Integrare a celor 7 Asistenți

**Data:** 29 August 2025

**Scop:** Asigurarea că versiunea de producție (PROD_NEW) a platformei `chatgpt-prompting.com` este conformă cu standardele internaționale de securitate, privacy, performanță și accesibilitate. Acest document detaliază livrabilele și procesele pentru fiecare dintre cei 7 Asistenți de Verificare.

---

## 1. Asistentul de Securitate

**Obiectiv:** Identificarea și mitigarea proactivă a vulnerabilităților de securitate.

### 1.1. Livrabile

- **`security_headers.conf`:** Fișier de configurare pentru Nginx/Apache cu headere de securitate stricte (Content-Security-Policy, Strict-Transport-Security, X-Content-Type-Options, etc.).
- **`csp.md`:** Documentație detaliată a politicii CSP (Content Security Policy), specificând sursele permise pentru scripturi, stiluri, imagini și alte resurse.
- **`secrets_audit.md`:** Raport de audit al secretelor (API keys, parole, token-uri), cu recomandări pentru stocare securizată (ex: HashiCorp Vault, AWS Secrets Manager).
- **`deps_vuln_report.json`:** Raport generat de `npm audit` sau `snyk` care listează vulnerabilitățile din dependențele proiectului, cu nivel de severitate și plan de remediere.
- **`backups_plan.md`:** Strategie de backup pentru baza de date și fișierele critice, incluzând frecvența, locația de stocare (off-site) și procedura de restaurare.

### 1.2. Proces de Integrare

1.  **CI/CD Pipeline:** Se va adăuga un pas în `pipeline.yml` care rulează `npm audit --audit-level=high` la fiecare build. Build-ul va eșua dacă se găsesc vulnerabilități critice.
2.  **Scanare Statică (SAST):** Se va integra un tool de SAST (ex: SonarQube, CodeQL) pentru a analiza codul sursă în căutare de practici de programare nesigure.
3.  **Managementul Secretelor:** Toate secretele vor fi eliminate din cod și stocate în variabile de mediu securizate, gestionate prin serviciul de hosting (ex: Vercel, Netlify) sau un vault extern.

---

## 2. Asistentul de Privacy/GDPR

**Obiectiv:** Asigurarea conformității cu Regulamentul General privind Protecția Datelor (GDPR) și alte legislații de privacy.

### 2.1. Livrabile

- **`RoPA.json`:** Registrul Operațiunilor de Prelucrare a Datelor (Record of Processing Activities), în format JSON, detaliind ce date se colectează, în ce scop, unde se stochează și cine are acces.
- **`DPA_checklist.md`:** Checklist pentru Acordul de Prelucrare a Datelor (Data Processing Agreement) cu terți (ex: Stripe, Google Analytics), asigurând că aceștia sunt la rândul lor conformi GDPR.
- **`cookies_config.json`:** Configurație pentru banner-ul de cookies, permițând utilizatorilor să ofere consimțământ granular pentru diferite categorii de cookie-uri (necesare, statistici, marketing).
- **`SAR_export.md`:** Procedură documentată pentru exportul datelor unui utilizator în cazul unei cereri de acces la date (Subject Access Request).
- **`retention_policy.md`:** Politica de retenție a datelor, specificând cât timp se păstrează diferite tipuri de date și cum sunt șterse în mod securizat.

### 2.2. Proces de Integrare

1.  **Consimțământ Cookies:** Se va implementa un banner de cookies care blochează scripturile non-esențiale până la obținerea consimțământului.
2.  **Anonimizare Date:** Se vor anonimiza datele de analiză (ex: Google Analytics) pentru a nu colecta informații personale identificabile fără consimțământ.
3.  **Politica de Confidențialitate:** Se va actualiza politica de confidențialitate pentru a reflecta exact practicile de prelucrare a datelor.

---

## 3. Asistentul de Performanță

**Obiectiv:** Atingerea și menținerea unor metrici de performanță excelente (Core Web Vitals).

### 3.1. Livrabile

- **Raport Lighthouse:** Generat automat la fiecare build, cu scoruri de cel puțin 90 pentru Performanță, Accesibilitate, Best Practices și SEO.
- **Metrice Core Web Vitals:**
    - **LCP (Largest Contentful Paint):** ≤ 2.5 secunde
    - **CLS (Cumulative Layout Shift):** ≤ 0.1
    - **INP (Interaction to Next Paint):** ≤ 200 milisecunde

### 3.2. Proces de Integrare

1.  **Optimizare Imagini:** Toate imaginile vor fi servite în formate moderne (WebP, AVIF) și vor fi optimizate ca mărime, folosind componenta `next/image`.
2.  **Code Splitting:** Se va utiliza code splitting la nivel de rută și componentă pentru a încărca doar codul necesar pentru pagina curentă.
3.  **Caching:** Se vor implementa strategii de caching la nivel de CDN și browser pentru a reduce timpul de încărcare.

---

## 4. Asistentul de Accesibilitate (A11y)

**Obiectiv:** Asigurarea că platforma este utilizabilă de către persoanele cu dizabilități, conform standardului WCAG 2.2 AA.

### 4.1. Livrabile

- **Raport WCAG 2.2 AA:** Generat de un tool automat (ex: `axe-core`), indicând conformitatea cu standardul.
- **Testare Manuală:** Documentarea testării manuale cu cititoare de ecran (NVDA, VoiceOver) și navigare de la tastatură.

### 4.2. Proces de Integrare

1.  **HTML Semantic:** Se va utiliza HTML semantic pentru a structura corect conținutul.
2.  **Atribute ARIA:** Se vor adăuga atribute ARIA (Accessible Rich Internet Applications) acolo unde este necesar pentru a îmbunătăți accesibilitatea componentelor dinamice.
3.  **Contrast Culori:** Se va verifica contrastul culorilor pentru a fi conform cu standardele WCAG.

---

*Acest document va fi completat cu detalii pentru asistenții de i18n, Content Integrity și Observability în faza următoare.*







# Plan de Transformare Produs: DEMO_LEGACY vs PROD_NEW

**Data:** 29 August 2025

**Scop:** Definirea strategiei și a pașilor tehnici pentru separarea proiectului în două versiuni distincte: o versiune demonstrativă bazată pe codul vechi (DEMO_LEGACY) și o versiune de producție, modulară și securizată, bazată pe noul cod (PROD_NEW).

---

## 1. Viziune Strategică

Separarea proiectului în DEMO și PROD are dublu scop:
1.  **Capitalizarea Muncii Anterioare:** Versiunea veche, deși complexă și cu redundanțe, conține elemente valoroase care pot fi prezentate ca un demo gratuit, generând lead-uri și interes.
2.  **Lansare Rapidă și Sigură:** Versiunea nouă, curățată și structurată, permite o lansare rapidă a unui MVP (Minimum Viable Product) robust, scalabil și conform cu standardele actuale.

### 1.1. DEMO_LEGACY: Versiunea Demonstrativă

- **Sursă:** Codul vechi (925 fișiere), arhivat și etichetat `demo-legacy`.
- **Funcționalitate:** Scenarii demonstrative predefinite, fără funcționalități de plată sau creare de cont.
- **Branding:** Watermark vizibil pe toate paginile pentru a indica statutul de demo.
- **Obiectiv:** Atragerea utilizatorilor și prezentarea capabilităților de bază ale platformei.

### 1.2. PROD_NEW: Versiunea de Producție

- **Sursă:** `BASE_ACTIVE` (462 fișiere esențiale), structurat modular.
- **Arhitectură:** Implementarea de *feature flags* pentru activarea/dezactivarea graduală a funcționalităților.
- **Calitate:** Integrarea celor **7 Asistenți de Verificare** pentru a asigura conformitatea și robustețea.
- **Obiectiv:** Lansarea unui produs comercial, securizat, performant și gata de scalare.

---

## 2. Plan Tehnic de Implementare

### 2.1. Crearea DEMO_LEGACY

1.  **Freeze & Tag:**
    - Se va crea un branch nou în repository-ul Git, numit `demo-legacy`, bazat pe commit-ul corespunzător versiunii vechi.
    - Se va adăuga un tag `v0.1-demo` pentru a marca această versiune.

2.  **Dezactivarea Funcționalităților Critice:**
    - **Plăți/Conturi:** Se vor comenta sau elimina complet secțiunile de cod responsabile pentru procesarea plăților (Stripe, PayPal) și crearea/gestionarea conturilor de utilizator.
    - **Formulare:** Se vor dezactiva formularele de contact sau înregistrare, înlocuindu-le cu mesaje de tip "Funcționalitate disponibilă în versiunea PRO".

3.  **Adăugarea Watermark-ului:**
    - Se va crea o componentă React (`<Watermark />`) care va afișa un text semi-transparent (ex: "VERSIUNE DEMO") pe toate paginile.
    - Această componentă va fi adăugată în layout-ul principal al aplicației (`app/layout.tsx`).

4.  **Configurarea Scenariilor Demonstrative:**
    - Se vor identifica 3-5 scenarii de utilizare cheie care pot fi demonstrate fără a necesita un backend complet funcțional.
    - Datele necesare pentru aceste scenarii vor fi hardcodate în fișiere JSON locale.

### 2.2. Construirea PROD_NEW

1.  **Structură Modulară cu Feature Flags:**
    - Se va utiliza o bibliotecă de feature flagging (ex: `unleash-client-react`, `flagsmith`) pentru a încapsula funcționalitățile noi.
    - Se va crea un fișier de configurare central (`config/features.json`) unde se pot activa/dezactiva feature-urile fără a necesita un nou deploy.

2.  **Integrarea celor 7 Asistenți de Verificare:**
    - Se va crea un director `lib/assistants/` care va conține logica pentru fiecare asistent.
    - Acești asistenți vor fi integrați în pipeline-ul de CI/CD pentru a rula automat la fiecare commit.

    | Asistent | Descriere | Implementare Tehnică |
    |---|---|---|
    | **Security** | Verifică vulnerabilități, headers, CSP | `npm audit`, `helmet`, `csp-header` |
    | **Privacy/GDPR** | Asigură conformitatea cu GDPR | Generare RoPA, DPA, politici de retenție |
    | **Performance** | Măsoară metrici Lighthouse | `lighthouse-ci`, `next/bundle-analyzer` |
    | **Accessibility** | Testează conformitatea WCAG | `axe-core`, `eslint-plugin-jsx-a11y` |
    | **i18n** | Verifică suportul pentru internaționalizare | `next-i18next`, `react-intl` |
    | **Content Integrity** | Verifică link-uri, imagini, text | `broken-link-checker`, `grammarly-api` |
    | **Observability** | Asigură logging și monitorizare | `Sentry`, `LogRocket`, `OpenTelemetry` |

---

## 3. Checklist de Tranziție

- [ ] **DEMO:** Creare branch și tag `demo-legacy`.
- [ ] **DEMO:** Dezactivare plăți și conturi.
- [ ] **DEMO:** Adăugare watermark.
- [ ] **PROD:** Inițializare proiect nou bazat pe `BASE_ACTIVE`.
- [ ] **PROD:** Implementare sistem de feature flags.
- [ ] **PROD:** Integrare Asistent de Securitate în CI/CD.
- [ ] **PROD:** Integrare Asistent de Performanță în CI/CD.
- [ ] **PROD:** Generare documente de conformitate GDPR.
- [ ] **PROD:** Configurare monitorizare și logging.
- [ ] **FINAL:** Deploy `demo-legacy` pe un subdomeniu (ex: `demo.chatgpt-prompting.com`).
- [ ] **FINAL:** Deploy `PROD_NEW` pe domeniul principal.







# Propunere Tehnică: Control Strict al Agentului AI (Cursor)

**Data:** 29 August 2025

**Scop:** Prevenirea coruperii codului sursă sau a distrugerii accidentale a site-ului de către agentul AI (denumit în continuare "Cursor"). Acest document definește un set de reguli stricte și o arhitectură de control care asigură că agentul operează într-un mediu sigur și previzibil.

---

## 1. Arhitectura de Control: SSOT (Single Source of Truth)

Controlul agentului se bazează pe două fișiere cheie care constituie **Sursa Unică de Adevăr (SSOT)** pentru reguli și permisiuni. Aceste fișiere sunt **IMUTABILE** și nu pot fi modificate de către agent.

### 1.1. `/cursor/init` - Fișierul de Inițializare Globală

- **Rol:** Sursa unică de adevăr pentru metadate, directoare permise și reguli globale.
- **Structură (exemplu):**

\`\`\`json
{
  "version": "1.0.0",
  "agent_name": "Cursor",
  "allowed_directories": [
    "/reports",
    "/exports",
    "/temp_analysis"
  ],
  "global_rules": {
    "max_file_size_mb": 10,
    "allowed_file_types": [".json", ".md", ".csv", ".txt"],
    "disallowed_commands": ["rm -rf", "mv", "chmod"]
  },
  "interaction_permissions": {
    "default": "read_only",
    "reports/": "compile_apply",
    "exports/": "reference_generate"
  }
}
\`\`\`

### 1.2. `/agent.ts` - Definiția Tipurilor și Permisiunilor

- **Rol:** Definește strict tipurile de interacțiuni permise și structura datelor.
- **Structură (exemplu):**

\`\`\`typescript
// /agent.ts - IMUTABIL

export type InteractionType = 
  | 'read_only'       // Doar citire, fără scriere
  | 'compile_apply'   // Compilare și aplicare (ex: generare raport)
  | 'reference_apply' // Aplicare pe bază de referință
  | 'reference_generate'; // Generare pe bază de referință

export interface AgentPermissions {
  canReadFile: boolean;
  canWriteFile: boolean;
  canExecuteCommand: boolean;
  allowedCommands?: string[];
}

export const PERMISSIONS_MAP: Record<InteractionType, AgentPermissions> = {
  read_only: { canReadFile: true, canWriteFile: false, canExecuteCommand: false },
  compile_apply: { canReadFile: true, canWriteFile: true, canExecuteCommand: true, allowedCommands: ['npm run generate:report'] },
  reference_apply: { canReadFile: true, canWriteFile: true, canExecuteCommand: false },
  reference_generate: { canReadFile: true, canWriteFile: true, canExecuteCommand: false },
};
\`\`\`

---

## 2. Reguli Obligatorii de Control

Aceste reguli sunt implementate în logica de control a agentului și nu pot fi ocolite.

1.  **IMUTABILITATEA SSOT:**
    - **Regula:** Agentul **NU ARE VOIE** să încarce, suprascrie sau rescrie fișierele `/cursor/init` și `/agent.ts`.
    - **Implementare:** Se va seta o regulă la nivel de sistem de fișiere (ex: `chattr +i`) pentru a face aceste fișiere imutabile.

2.  **BLOCARE IMEDIATĂ:**
    - **Regula:** Orice acțiune în afara regulilor definite în `/cursor/init` este blocată imediat, cu un verdict explicit.
    - **Implementare:** Un wrapper în jurul funcțiilor de sistem (citire, scriere, execuție) va valida fiecare acțiune împotriva regulilor din `/cursor/init`.

3.  **PERMISIUNI STRICTE:**
    - **Regula:** `/agent.ts` definește strict permisiunile. Agentul nu poate extinde, relaxa sau inventa interacțiuni noi.
    - **Implementare:** Logica agentului va încărca `PERMISSIONS_MAP` din `/agent.ts` și va aplica permisiunile corespunzătoare interacțiunii curente.

4.  **CONFLICT RESOLUTION:**
    - **Regula:** Dacă există un conflict între regulile din alte fișiere și cele din `/cursor/init`, **`/cursor/init` câștigă întotdeauna**.
    - **Implementare:** Logica de validare va prioritiza întotdeauna regulile din `/cursor/init`.

5.  **OUTPUT CONTROLAT:**
    - **Regula:** Output-ul este permis doar în spațiile definite în `allowed_directories` (ex: `/reports`, `/exports`). Nicio modificare directă a codului sursă fără un proces de validare umană (Pull Request).
    - **Implementare:** Wrapper-ul de sistem va verifica calea de scriere și va permite doar cele din lista `allowed_directories`.

---

## 3. Livrabil: `rules_control.md`

Acest document (`rules_control.md`) reprezintă setul complet de reguli care va fi folosit pentru a guverna comportamentul agentului Cursor. El va fi inclus în documentația proiectului și va servi ca referință pentru dezvoltarea și mentenanța viitoare a sistemului de control.

**Rezultat:** Un agent AI puternic, dar controlat, care poate asista la dezvoltare fără a reprezenta un risc pentru integritatea proiectului.







# STRUCTURE_TREE - Arhitectura BASE_ACTIVE

**Generated:** 2025-08-29T01:50:15.533044
**Total fișiere:** 462

## Legenda
- 🔴 CRITICAL: Esențial pentru funcționare
- 🟡 IMPORTANT: Important pentru UX
- 🟢 USEFUL: Util pentru dezvoltare

## Structura Directorelor

\`\`\`
BASE_ACTIVE/
├── ./
│   ├── .DS_Store 🔴 (no_extension, 6148 bytes)
│   ├── .env.example 🔴 (other, 857 bytes)
│   ├── .env.local 🔴 (other, 2671 bytes)
│   ├── .gitignore 🔴 (no_extension, 1166 bytes)
│   ├── .vercelignore 🔴 (no_extension, 476 bytes)
│   ├── AGENT_USAGE_EXAMPLES.md 🔴 (content, 5341 bytes)
│   ├── ANALYTICS_IMPLEMENTATION.md 🔴 (content, 10675 bytes)
│   ├── API_SMOKE_TESTS_IMPLEMENTATION.md 🔴 (content, 6140 bytes)
│   ├── BACKUP_RECOVERY_IMPLEMENTATION.md 🔴 (content, 8493 bytes)
│   ├── BACKUP_RECOVERY_IMPLEMENTATION_SUMMARY.md 🔴 (content, 8641 bytes)
│   ├── CI_CD_ACTION_PLAN.md 🔴 (content, 5893 bytes)
│   ├── CI_CD_FINAL_SUMMARY.md 🔴 (content, 8064 bytes)
│   ├── CI_CD_IMPLEMENTATION_SUMMARY.md 🔴 (content, 9536 bytes)
│   ├── CODE_QUALITY_STABILITY_IMPLEMENTATION_SUMMARY.md 🔴 (content, 12893 bytes)
│   ├── CONFIGURATION_MANAGEMENT.md 🔴 (content, 8809 bytes)
│   ├── CONTRIBUTING.md 🔴 (content, 6730 bytes)
│   ├── DASHBOARD_HISTORY_IMPLEMENTATION_SUMMARY.md 🔴 (content, 16585 bytes)
│   ├── DEMO_DATA_SUMMARY.md 🔴 (content, 3730 bytes)
│   ├── DEPLOYMENT_CHECKLIST.md 🔴 (content, 5384 bytes)
│   ├── DEPLOYMENT_STRATEGY_P0.md 🔴 (content, 2582 bytes)
│   ├── DOCUMENTATION_SECURITY_REVIEW_SUMMARY.md 🔴 (content, 8199 bytes)
│   ├── ENTITLEMENTS_IMPLEMENTATION_SUMMARY.md 🔴 (content, 8535 bytes)
│   ├── ERROR_STATES_UX_IMPROVEMENTS_SUMMARY.md 🔴 (content, 9210 bytes)
│   ├── GITHUB_CI_CD_SETUP.md 🔴 (content, 5720 bytes)
│   ├── GLASS_EFFECTS_OPTIMIZATION_GUIDE.md 🔴 (content, 6408 bytes)
│   ├── GPT_LIVE_IMPLEMENTATION_SUMMARY.md 🔴 (content, 10522 bytes)
│   ├── LAUNCH_READY_SUMMARY.md 🔴 (content, 6997 bytes)
│   ├── LEGAL_COMPLIANCE_AUDIT.md 🔴 (content, 6311 bytes)
│   ├── LEGAL_IMPLEMENTATION_SUMMARY.md 🔴 (content, 4819 bytes)
│   ├── OPTIMIZATION_FINAL_REPORT.md 🔴 (content, 8106 bytes)
│   ├── P0_IMPLEMENTATION_SUMMARY.md 🔴 (content, 7523 bytes)
│   ├── P1_IMPLEMENTATION_SUMMARY.md 🔴 (content, 10940 bytes)
│   ├── PHASE_2_LAUNCH_CHECKLIST.md 🔴 (content, 9476 bytes)
│   ├── PRODUCTION_LAUNCH_CHECKLIST.md 🔴 (content, 6430 bytes)
│   ├── README.md 🔴 (content, 4526 bytes)
│   ├── README_BILLING.md 🔴 (content, 10438 bytes)
│   ├── README_SETUP.md 🔴 (content, 9538 bytes)
│   ├── README_STRIPE_INTEGRATION.md 🔴 (content, 12584 bytes)
│   ├── SECURITY.md 🔴 (content, 8020 bytes)
│   ├── SECURITY_BEST_PRACTICES.md 🔴 (content, 6254 bytes)
│   ├── SECURITY_INFRASTRUCTURE_FIXES_SUMMARY.md 🔴 (content, 7313 bytes)
│   ├── SECURITY_LOCKDOWN_IMPLEMENTATION_SUMMARY.md 🔴 (content, 8657 bytes)
│   ├── STRIPE_BILLING_IMPLEMENTATION_SUMMARY.md 🔴 (content, 15541 bytes)
│   ├── VERCEL_INTEGRATION_GUIDE.md 🔴 (content, 5922 bytes)
│   ├── VERSION 🔴 (no_extension, 6 bytes)
│   ├── VOICE_BRANDING_GUIDELINES.md 🔴 (content, 4551 bytes)
│   ├── agent.ts 🔴 (code, 7388 bytes)
│   ├── components.json 🔴 (config, 426 bytes)
│   ├── env.example 🔴 (other, 4769 bytes)
│   ├── env.template 🔴 (other, 5421 bytes)
│   ├── eslint.config.js 🔴 (code, 5607 bytes)
│   ├── glass-effects-optimization-report.json 🔴 (config, 3822 bytes)
│   ├── jest.config.js 🔴 (code, 1061 bytes)
│   ├── jest.setup.js 🔴 (code, 2602 bytes)
│   ├── middleware.ts 🔴 (code, 956 bytes)
│   ├── next-env.d.ts 🔴 (code, 211 bytes)
│   ├── next.config.mjs 🔴 (other, 2883 bytes)
│   ├── package.json 🔴 (config, 7724 bytes)
│   ├── performance-report-glass-effects.json 🔴 (config, 1259 bytes)
│   ├── pii-analysis-report.json 🔴 (config, 349172 bytes)
│   ├── pii-scan-report.json 🔴 (config, 501 bytes)
│   ├── playwright.config.ts 🔴 (code, 2135 bytes)
│   ├── pnpm-lock.yaml 🔴 (config, 374840 bytes)
│   ├── postcss.config.mjs 🔴 (other, 144 bytes)
│   ├── rate-limit.ts 🔴 (code, 6469 bytes)
│   ├── rate-limits 🔴 (no_extension, 0 bytes)
│   ├── ruleset.yml 🔴 (config, 9570 bytes)
│   ├── schema.sql 🔴 (other, 38650 bytes)
│   ├── stripe-config.env 🔴 (config, 5688 bytes)
│   ├── test-p0-pages.js 🔴 (code, 1 bytes)
│   ├── tsconfig.json 🔴 (config, 592 bytes)
│   └── tsconfig.tsbuildinfo 🔴 (other, 2081822 bytes)
├── .github/
│   └── workflows/
│       └── workflows/
│           ├── ci-cd.yml 🔴 (config, 10081 bytes)
│           ├── ci.yml 🔴 (config, 26262 bytes)
│           └── layout-testing.yml 🔴 (config, 7070 bytes)
├── __tests__/
│   └── __tests__/
│       ├── check-config.test.js 🔴 (code, 20438 bytes)
│       ├── layout-structure.test.tsx 🔴 (code, 8476 bytes)
│       └── pricing-system.test.ts 🔴 (code, 176 bytes)
├── app/
│   ├── app/
│   │   ├── .DS_Store 🔴 (no_extension, 10244 bytes)
│   │   ├── globals.css 🔴 (code, 12192 bytes)
│   │   ├── layout.tsx 🔴 (code, 4999 bytes)
│   │   ├── not-found.tsx 🔴 (code, 8551 bytes)
│   │   ├── page.tsx 🔴 (code, 15396 bytes)
│   │   ├── robots.ts 🔴 (code, 384 bytes)
│   │   └── sitemap.ts 🔴 (code, 2566 bytes)
│   ├── about/
│   │   └── about/
│   │       └── page.tsx 🔴 (code, 3768 bytes)
│   ├── admin/
│   │   └── admin/
│   │       └── page.tsx 🔴 (code, 179 bytes)
│   ├── api/
│   │   ├── api/
│   │   │   └── .DS_Store 🔴 (no_extension, 6148 bytes)
│   │   ├── analytics/
│   │   │   ├── ab-test/
│   │   │   │   └── ab-test/
│   │   │   │       └── route.ts 🔴 (code, 966 bytes)
│   │   │   ├── launch-metrics/
│   │   │   │   └── launch-metrics/
│   │   │   │       └── route.ts 🔴 (code, 309 bytes)
│   │   │   ├── pageview/
│   │   │   │   └── pageview/
│   │   │   │       └── route.ts 🔴 (code, 3027 bytes)
│   │   │   └── track/
│   │   │       └── track/
│   │   │           └── route.ts 🔴 (code, 2914 bytes)
│   │   ├── auth/
│   │   │   ├── login/
│   │   │   │   └── login/
│   │   │   │       └── route.ts 🔴 (code, 2865 bytes)
│   │   │   ├── logout/
│   │   │   │   └── logout/
│   │   │   │       └── route.ts 🔴 (code, 1583 bytes)
│   │   │   ├── me/
│   │   │   │   └── me/
│   │   │   │       └── route.ts 🔴 (code, 2544 bytes)
│   │   │   ├── refresh/
│   │   │   │   └── refresh/
│   │   │   │       └── route.ts 🔴 (code, 1418 bytes)
│   │   │   └── signup/
│   │   │       └── signup/
│   │   │           └── route.ts 🔴 (code, 5053 bytes)
│   │   ├── billing/
│   │   │   ├── checkout/
│   │   │   │   └── checkout/
│   │   │   │       └── route.ts 🔴 (code, 2515 bytes)
│   │   │   └── portal/
│   │   │       └── portal/
│   │   │           └── route.ts 🔴 (code, 2738 bytes)
│   │   ├── community/
│   │   │   └── join/
│   │   │       └── join/
│   │   │           └── route.ts 🔴 (code, 417 bytes)
│   │   ├── create-checkout-session/
│   │   │   └── create-checkout-session/
│   │   │       └── route.ts 🔴 (code, 2972 bytes)
│   │   ├── dashboard/
│   │   │   ├── alerts/
│   │   │   │   └── alerts/
│   │   │   │       └── route.ts 🔴 (code, 1168 bytes)
│   │   │   ├── insights/
│   │   │   │   └── insights/
│   │   │   │       └── route.ts 🔴 (code, 1458 bytes)
│   │   │   ├── metrics/
│   │   │   │   └── metrics/
│   │   │   │       └── route.ts 🔴 (code, 1331 bytes)
│   │   │   └── trends/
│   │   │       └── trends/
│   │   │           └── route.ts 🔴 (code, 1166 bytes)
│   │   ├── enterprise-contact/
│   │   │   └── enterprise-contact/
│   │   │       └── route.ts 🔴 (code, 1908 bytes)
│   │   ├── entitlements/
│   │   │   └── entitlements/
│   │   │       └── route.ts 🔴 (code, 2176 bytes)
│   │   ├── export/
│   │   │   ├── bundle/
│   │   │   │   └── bundle/
│   │   │   │       └── route.ts 🔴 (code, 309 bytes)
│   │   │   ├── pipeline/
│   │   │   │   └── pipeline/
│   │   │   │       └── route.ts 🔴 (code, 7367 bytes)
│   │   │   └── export/
│   │   │       └── route.ts 🔴 (code, 5395 bytes)
│   │   ├── feedback/
│   │   │   └── feedback/
│   │   │       └── route.ts 🔴 (code, 550 bytes)
│   │   ├── gpt-editor/
│   │   │   └── gpt-editor/
│   │   │       └── route.ts 🔴 (code, 9600 bytes)
│   │   ├── gpt-test/
│   │   │   └── gpt-test/
│   │   │       └── route.ts 🔴 (code, 14988 bytes)
│   │   ├── leads/
│   │   │   └── leads/
│   │   │       └── route.ts 🔴 (code, 544 bytes)
│   │   ├── modules/
│   │   │   └── modules/
│   │   │       └── route.ts 🔴 (code, 8485 bytes)
│   │   ├── monitoring/
│   │   │   └── metrics/
│   │   │       └── metrics/
│   │   │           └── route.ts 🔴 (code, 313 bytes)
│   │   ├── run-example/
│   │   │   └── run-example/
│   │   │       └── route.ts 🔴 (code, 916 bytes)
│   │   ├── run/
│   │   │   └── [moduleId]/
│   │   │       └── [moduleId]/
│   │   │           └── route.ts 🔴 (code, 5491 bytes)
│   │   ├── runs/
│   │   │   ├── [runId]/
│   │   │   │   └── export/
│   │   │   │       └── export/
│   │   │   │           └── route.ts 🔴 (code, 9157 bytes)
│   │   │   └── history/
│   │   │       └── history/
│   │   │           └── route.ts 🔴 (code, 6376 bytes)
│   │   ├── security/
│   │   │   └── metrics/
│   │   │       └── metrics/
│   │   │           └── route.ts 🔴 (code, 1099 bytes)
│   │   ├── toggle-coming-soon/
│   │   │   └── toggle-coming-soon/
│   │   │       └── route.ts 🔴 (code, 1634 bytes)
│   │   ├── waitlist/
│   │   │   └── waitlist/
│   │   │       └── route.ts 🔴 (code, 2256 bytes)
│   │   └── webhooks/
│   │       └── stripe/
│   │           └── stripe/
│   │               └── route.ts 🔴 (code, 13201 bytes)
│   ├── blog/
│   │   ├── [slug]/
│   │   │   └── [slug]/
│   │   │       └── page.tsx 🔴 (code, 17779 bytes)
│   │   └── blog/
│   │       ├── loading.tsx 🔴 (code, 52 bytes)
│   │       └── page.tsx 🔴 (code, 16703 bytes)
│   ├── coming-soon/
│   │   └── coming-soon/
│   │       ├── layout.tsx 🔴 (code, 221 bytes)
│   │       └── page.tsx 🔴 (code, 7378 bytes)
│   ├── contact/
│   │   └── contact/
│   │       └── page.tsx 🔴 (code, 9681 bytes)
│   ├── dashboard/
│   │   └── dashboard/
│   │       ├── loading.tsx 🔴 (code, 52 bytes)
│   │       └── page.tsx 🔴 (code, 14982 bytes)
│   ├── docs/
│   │   └── docs/
│   │       ├── loading.tsx 🔴 (code, 52 bytes)
│   │       └── page.tsx 🔴 (code, 4481 bytes)
│   ├── generator/
│   │   └── generator/
│   │       ├── loading.tsx 🔴 (code, 52 bytes)
│   │       └── page.tsx 🔴 (code, 36337 bytes)
│   ├── guides/
│   │   └── guides/
│   │       └── page.tsx 🔴 (code, 14145 bytes)
│   ├── launch/
│   │   └── launch/
│   │       └── page.tsx 🔴 (code, 16821 bytes)
│   ├── legal/
│   │   ├── dpa/
│   │   │   └── dpa/
│   │   │       └── page.tsx 🔴 (code, 16987 bytes)
│   │   ├── legal/
│   │   │   └── page.tsx 🔴 (code, 7529 bytes)
│   │   ├── privacy/
│   │   │   └── privacy/
│   │   │       └── page.tsx 🔴 (code, 12169 bytes)
│   │   └── terms/
│   │       └── terms/
│   │           └── page.tsx 🔴 (code, 13309 bytes)
│   ├── login/
│   │   └── login/
│   │       └── page.tsx 🔴 (code, 7195 bytes)
│   ├── modules/
│   │   └── modules/
│   │       ├── loading.tsx 🔴 (code, 52 bytes)
│   │       └── page.tsx 🔴 (code, 14725 bytes)
│   ├── pricing/
│   │   └── pricing/
│   │       └── page.tsx 🔴 (code, 20821 bytes)
│   ├── signup/
│   │   └── signup/
│   │       └── page.tsx 🔴 (code, 12442 bytes)
│   ├── terms/
│   │   └── terms/
│   │       └── page.tsx 🔴 (code, 3161 bytes)
│   └── thankyou/
│       └── thankyou/
│           └── page.tsx 🔴 (code, 2051 bytes)
├── components/
│   ├── components/
│   │   ├── .DS_Store 🔴 (no_extension, 6148 bytes)
│   │   ├── ExportWithScoreGate.tsx 🔴 (code, 3644 bytes)
│   │   ├── analytics-provider.tsx 🔴 (code, 3585 bytes)
│   │   ├── auth-guard.tsx 🔴 (code, 2201 bytes)
│   │   ├── coming-soon-wrapper.tsx 🔴 (code, 836 bytes)
│   │   ├── cookie-banner.tsx 🔴 (code, 10089 bytes)
│   │   ├── enterprise-contact-form.tsx 🔴 (code, 6621 bytes)
│   │   ├── entitlement-gate.tsx 🔴 (code, 5978 bytes)
│   │   ├── error-boundary.tsx 🔴 (code, 6238 bytes)
│   │   ├── export-dialog.tsx 🔴 (code, 12972 bytes)
│   │   ├── export-modal.tsx 🔴 (code, 9855 bytes)
│   │   ├── export-protection.tsx 🔴 (code, 10935 bytes)
│   │   ├── footer.tsx 🔴 (code, 3379 bytes)
│   │   ├── gpt-live-editor.tsx 🔴 (code, 23039 bytes)
│   │   ├── header.tsx 🔴 (code, 6436 bytes)
│   │   ├── loading-spinner.tsx 🔴 (code, 4938 bytes)
│   │   ├── mobile-sticky-cta.tsx 🔴 (code, 9312 bytes)
│   │   ├── paywall-modal.tsx 🔴 (code, 5448 bytes)
│   │   ├── performance-dashboard.tsx 🔴 (code, 17791 bytes)
│   │   ├── spec-diff.tsx 🔴 (code, 10092 bytes)
│   │   ├── telemetry-sdk.tsx 🔴 (code, 2990 bytes)
│   │   └── theme-provider.tsx 🔴 (code, 292 bytes)
│   ├── dashboard/
│   │   └── dashboard/
│   │       ├── KPICard.tsx 🔴 (code, 3557 bytes)
│   │       ├── PerformanceInsights.tsx 🔴 (code, 7802 bytes)
│   │       ├── RunHistory.tsx 🔴 (code, 22830 bytes)
│   │       ├── SLAAlerts.tsx 🔴 (code, 6988 bytes)
│   │       ├── TrendChart.tsx 🔴 (code, 7549 bytes)
│   │       └── index.ts 🔴 (code, 182 bytes)
│   ├── generator/
│   │   └── generator/
│   │       └── PromptForm.tsx 🔴 (code, 4629 bytes)
│   ├── home/
│   │   └── home/
│   │       └── LiveGenerationDemo.tsx 🔴 (code, 23625 bytes)
│   ├── marketing/
│   │   └── marketing/
│   │       ├── community-hub.tsx 🔴 (code, 20749 bytes)
│   │       ├── launch-analytics.tsx 🔴 (code, 23063 bytes)
│   │       ├── lead-capture.tsx 🔴 (code, 14081 bytes)
│   │       └── product-hunt-launch.tsx 🔴 (code, 7705 bytes)
│   ├── modules/
│   │   └── modules/
│   │       ├── ModuleOverlay.tsx 🔴 (code, 8623 bytes)
│   │       └── module-overlay.tsx 🔴 (code, 17212 bytes)
│   ├── monitoring/
│   │   └── monitoring/
│   │       └── LiveMetricsDashboard.tsx 🔴 (code, 10216 bytes)
│   ├── security/
│   │   └── security/
│   │       └── SecurityDashboard.tsx 🔴 (code, 11508 bytes)
│   └── ui/
│       └── ui/
│           ├── accordion.tsx 🔴 (code, 2053 bytes)
│           ├── alert-dialog.tsx 🔴 (code, 3864 bytes)
│           ├── alert.tsx 🔴 (code, 1614 bytes)
│           ├── aspect-ratio.tsx 🔴 (code, 280 bytes)
│           ├── avatar.tsx 🔴 (code, 1097 bytes)
│           ├── badge.tsx 🔴 (code, 1088 bytes)
│           ├── breadcrumb.tsx 🔴 (code, 2357 bytes)
│           ├── button.tsx 🔴 (code, 2558 bytes)
│           ├── calendar.tsx 🔴 (code, 7660 bytes)
│           ├── card.tsx 🔴 (code, 1989 bytes)
│           ├── carousel.tsx 🔴 (code, 5556 bytes)
│           ├── chart.tsx 🔴 (code, 9781 bytes)
│           ├── checkbox.tsx 🔴 (code, 1226 bytes)
│           ├── collapsible.tsx 🔴 (code, 800 bytes)
│           ├── command.tsx 🔴 (code, 4818 bytes)
│           ├── context-menu.tsx 🔴 (code, 8222 bytes)
│           ├── dialog.tsx 🔴 (code, 3982 bytes)
│           ├── drawer.tsx 🔴 (code, 4255 bytes)
│           ├── dropdown-menu.tsx 🔴 (code, 8284 bytes)
│           ├── empty-state.tsx 🔴 (code, 6032 bytes)
│           ├── form.tsx 🔴 (code, 3759 bytes)
│           ├── hover-card.tsx 🔴 (code, 1532 bytes)
│           ├── input-otp.tsx 🔴 (code, 2254 bytes)
│           ├── input.tsx 🔴 (code, 967 bytes)
│           ├── label.tsx 🔴 (code, 702 bytes)
│           ├── menubar.tsx 🔴 (code, 8394 bytes)
│           ├── navigation-menu.tsx 🔴 (code, 6664 bytes)
│           ├── pagination.tsx 🔴 (code, 2712 bytes)
│           ├── popover.tsx 🔴 (code, 1635 bytes)
│           ├── progress.tsx 🔴 (code, 775 bytes)
│           ├── radio-group.tsx 🔴 (code, 1466 bytes)
│           ├── resizable.tsx 🔴 (code, 2028 bytes)
│           ├── scroll-area.tsx 🔴 (code, 1645 bytes)
│           ├── select.tsx 🔴 (code, 6253 bytes)
│           ├── separator.tsx 🔴 (code, 699 bytes)
│           ├── sheet.tsx 🔴 (code, 4090 bytes)
│           ├── sidebar.tsx 🔴 (code, 21633 bytes)
│           ├── skeleton.tsx 🔴 (code, 1699 bytes)
│           ├── skip-link.tsx 🔴 (code, 1282 bytes)
│           ├── slider.tsx 🔴 (code, 2001 bytes)
│           ├── sonner.tsx 🔴 (code, 564 bytes)
│           ├── switch.tsx 🔴 (code, 1177 bytes)
│           ├── table.tsx 🔴 (code, 2448 bytes)
│           ├── tabs.tsx 🔴 (code, 1969 bytes)
│           ├── textarea.tsx 🔴 (code, 759 bytes)
│           ├── toast.tsx 🔴 (code, 6337 bytes)
│           ├── toaster.tsx 🔴 (code, 690 bytes)
│           ├── toggle-group.tsx 🔴 (code, 1925 bytes)
│           ├── toggle.tsx 🔴 (code, 1570 bytes)
│           ├── tooltip.tsx 🔴 (code, 1891 bytes)
│           ├── use-mobile.tsx 🔴 (code, 565 bytes)
│           └── use-toast.ts 🔴 (code, 3948 bytes)
├── cursor/
│   ├── f_v3_after_launch/
│   │   └── f_v3_bundle/
│   │       └── gtm_promptforge_v3_bundle/
│   │           ├── artifacts/
│   │           │   └── artifacts/
│   │           │       ├── commercial_package.json 🔴 (config, 17251 bytes)
│   │           │       ├── compliance.json 🔴 (config, 16726 bytes)
│   │           │       ├── conversion_channel.json 🔴 (config, 29088 bytes)
│   │           │       ├── icp.json 🔴 (config, 8496 bytes)
│   │           │       ├── jtbd.json 🔴 (config, 12338 bytes)
│   │           │       ├── measurement_observability.json 🔴 (config, 37686 bytes)
│   │           │       ├── proof_assets.json 🔴 (config, 26143 bytes)
│   │           │       ├── timely_delivery.json 🔴 (config, 57911 bytes)
│   │           │       └── trigger.json 🔴 (config, 14913 bytes)
│   │           ├── documentation/
│   │           │   └── documentation/
│   │           │       ├── config.json 🔴 (config, 1391 bytes)
│   │           │       ├── context_analysis.md 🔴 (content, 4198 bytes)
│   │           │       ├── source_01_cognism.md 🔴 (content, 2361 bytes)
│   │           │       ├── source_02_precedence.md 🔴 (content, 2559 bytes)
│   │           │       ├── source_03_maxio.md 🔴 (content, 4480 bytes)
│   │           │       ├── source_04_omnius.md 🔴 (content, 4933 bytes)
│   │           │       ├── source_05_churnfree.md 🔴 (content, 4046 bytes)
│   │           │       ├── source_06_omnius_trends.md 🔴 (content, 5402 bytes)
│   │           │       └── sources_summary.md 🔴 (content, 4547 bytes)
│   │           └── telemetry/
│   │               └── telemetry/
│   │                   └── execution_log.json 🔴 (config, 86 bytes)
│   ├── f_v3_files/
│   │   ├── f_v3_files/
│   │   │   ├── .DS_Store 🔴 (no_extension, 6148 bytes)
│   │   │   ├── M07_risk_trust_spec.md 🔴 (content, 2401 bytes)
│   │   │   ├── README_AUDIT.md 🔴 (content, 1813 bytes)
│   │   │   ├── app_globals_css.txt 🔴 (content, 2042 bytes)
│   │   │   ├── app_layout_tsx.txt 🔴 (content, 1309 bytes)
│   │   │   ├── app_page_tsx.txt 🔴 (content, 520 bytes)
│   │   │   ├── catalog_M01-M50.md 🔴 (content, 3603 bytes)
│   │   │   ├── components_admin_button_tsx.txt 🔴 (content, 405 bytes)
│   │   │   ├── components_admin_toggle_tsx.txt 🔴 (content, 266 bytes)
│   │   │   ├── components_coming_soon_interactive_tsx.txt 🔴 (content, 5490 bytes)
│   │   │   ├── components_home_interactive_tsx.txt 🔴 (content, 1966 bytes)
│   │   │   ├── components_main_content_interactive_tsx.txt 🔴 (content, 3531 bytes)
│   │   │   ├── components_ui_badge_tsx.txt 🔴 (content, 390 bytes)
│   │   │   ├── components_ui_card_tsx.txt 🔴 (content, 1310 bytes)
│   │   │   ├── components_ui_input_tsx.txt 🔴 (content, 406 bytes)
│   │   │   ├── creator_commerce_pack.json 🔴 (config, 1478 bytes)
│   │   │   ├── dor_dod.rules.yml 🔴 (config, 1156 bytes)
│   │   │   ├── evaluator_config.yaml 🔴 (config, 813 bytes)
│   │   │   ├── export.manifest.json 🔴 (config, 856 bytes)
│   │   │   ├── export.manifest.schema.json 🔴 (config, 1751 bytes)
│   │   │   ├── forge_pack_builder.py 🔴 (code, 11675 bytes)
│   │   │   ├── hooks_use_toast_ts.txt 🔴 (content, 423 bytes)
│   │   │   ├── license.json 🔴 (config, 415 bytes)
│   │   │   ├── module.spec.json 🔴 (config, 4568 bytes)
│   │   │   ├── module.spec.schema.json 🔴 (config, 7791 bytes)
│   │   │   ├── module_contract.json 🔴 (config, 1906 bytes)
│   │   │   ├── module_contract.md 🔴 (content, 1906 bytes)
│   │   │   ├── module_pack_creator_commerce.zip 🔴 (other, 9873 bytes)
│   │   │   ├── pf-license-verify.js 🔴 (code, 3422 bytes)
│   │   │   ├── prompt.chained.json 🔴 (config, 1832 bytes)
│   │   │   ├── prompt.json 🔴 (config, 1653 bytes)
│   │   │   ├── prompt.run.schema.json 🔴 (config, 5772 bytes)
│   │   │   ├── prompt_scores_example.json 🔴 (config, 1310 bytes)
│   │   │   ├── prompt_scores_schema.json 🔴 (config, 4746 bytes)
│   │   │   ├── promptforge_module_bundle.txt 🔴 (content, 9990 bytes)
│   │   │   ├── pubkey_demo.pem 🔴 (other, 113 bytes)
│   │   │   ├── ruleset.yml 🔴 (config, 5217 bytes)
│   │   │   └── test_engine_rubric.mdc 🔴 (other, 1248 bytes)
│   │   ├── coming soon/
│   │   │   └── coming soon/
│   │   │       ├── manifest.json 🔴 (config, 502 bytes)
│   │   │       └── prompt.json 🔴 (config, 719 bytes)
│   │   ├── industry_packs_bundle/
│   │   │   └── industry_packs_bundle/
│   │   │       ├── README.md 🔴 (content, 590 bytes)
│   │   │       ├── ecommerce.json 🔴 (config, 1560 bytes)
│   │   │       ├── education.json 🔴 (config, 1589 bytes)
│   │   │       ├── fintech.json 🔴 (config, 1656 bytes)
│   │   │       └── schema.industry-pack.json 🔴 (config, 3039 bytes)
│   │   ├── licensing/
│   │   │   └── licensing/
│   │   │       ├── feature_flags.json 🔴 (config, 1247 bytes)
│   │   │       ├── plans.json 🔴 (config, 2717 bytes)
│   │   │       └── stripe_products_seed.json 🔴 (config, 1043 bytes)
│   │   └── supabase_migrations/
│   │       └── supabase_migrations/
│   │           └── README.md 🔴 (content, 448 bytes)
│   ├── f_v3_logo_branding/
│   │   ├── f_v3_logo_branding/
│   │   │   ├── .DS_Store 🔴 (no_extension, 8196 bytes)
│   │   │   ├── App.css 🔴 (code, 6076 bytes)
│   │   │   └── App.jsx 🔴 (code, 17858 bytes)
│   │   └── f_v3_brand_html_gif/
│   │       └── f_v3_brand_html_gif/
│   │           ├── .DS_Store 🔴 (no_extension, 6148 bytes)
│   │           ├── click_ignition.html 🔴 (code, 5675 bytes)
│   │           ├── dust_bloom.html 🔴 (code, 6903 bytes)
│   │           ├── forge-glyph-interactive.html 🔴 (code, 12165 bytes)
│   │           ├── glyph_reveal.html 🔴 (code, 3640 bytes)
│   │           ├── golden_pulse.html 🔴 (code, 4251 bytes)
│   │           ├── hover_breathing.html 🔴 (code, 7276 bytes)
│   │           ├── index.html 🔴 (code, 386 bytes)
│   │           ├── ink_spread.html 🔴 (code, 6555 bytes)
│   │           ├── logo_animation.gif 🔴 (media, 20748566 bytes)
│   │           ├── magnetic_sigil.html 🔴 (code, 6534 bytes)
│   │           ├── nav_static_03_loading.webp 🔴 (media, 196732 bytes)
│   │           ├── neon_trail.html 🔴 (code, 6271 bytes)
│   │           ├── outline_fill.html 🔴 (code, 6320 bytes)
│   │           ├── scroll_reveal.html 🔴 (code, 8897 bytes)
│   │           ├── time_pulse.html 🔴 (code, 10225 bytes)
│   │           └── triumph_lines.html 🔴 (code, 8606 bytes)
│   ├── cursor/
│   │   ├── f_v3_promptforge_audit_report.html 🔴 (code, 20237 bytes)
│   │   ├── init.json 🔴 (config, 7580 bytes)
│   │   └── ruleset.yml 🔴 (config, 6053 bytes)
│   └── f_v3_rules/
│       └── f_v3_rules/
│           └── ruleset.yml 🔴 (config, 6551 bytes)
├── exports/
│   └── demo-bundle/
│       └── demo-bundle/
│           ├── fraud-detection.json 🔴 (config, 310 bytes)
│           └── manifest.json 🔴 (config, 766 bytes)
├── hooks/
│   └── hooks/
│       ├── use-ab-testing.ts 🔴 (code, 6725 bytes)
│       ├── use-analytics.ts 🔴 (code, 12255 bytes)
│       ├── use-auth.ts 🔴 (code, 5754 bytes)
│       ├── use-entitlements.ts 🔴 (code, 4114 bytes)
│       ├── use-localization.ts 🔴 (code, 10219 bytes)
│       ├── use-mobile.ts 🔴 (code, 565 bytes)
│       ├── use-stripe-checkout.ts 🔴 (code, 1372 bytes)
│       ├── use-toast.ts 🔴 (code, 3786 bytes)
│       └── useAgent.ts 🔴 (code, 2871 bytes)
├── lib/
│   ├── auth/
│   │   └── auth/
│   │       ├── index.ts 🔴 (code, 795 bytes)
│   │       ├── jwt-security.ts 🔴 (code, 8176 bytes)
│   │       └── server-auth.ts 🔴 (code, 2672 bytes)
│   ├── billing/
│   │   └── billing/
│   │       ├── entitlements.ts 🔴 (code, 11383 bytes)
│   │       └── stripe.ts 🔴 (code, 6226 bytes)
│   ├── lib/
│   │   ├── blog-content.ts 🔴 (code, 10543 bytes)
│   │   ├── config.ts 🔴 (code, 2240 bytes)
│   │   ├── default-params.ts 🔴 (code, 2021 bytes)
│   │   ├── email-service.ts 🔴 (code, 15286 bytes)
│   │   ├── entitlements.ts 🔴 (code, 14159 bytes)
│   │   ├── export-bundle.ts 🔴 (code, 21416 bytes)
│   │   ├── export-pipeline.ts 🔴 (code, 16169 bytes)
│   │   ├── export.ts 🔴 (code, 9360 bytes)
│   │   ├── license-utils.ts 🔴 (code, 4310 bytes)
│   │   ├── modules.ts 🔴 (code, 141910 bytes)
│   │   ├── monitoring.ts 🔴 (code, 12733 bytes)
│   │   ├── openai.ts 🔴 (code, 10810 bytes)
│   │   ├── pii-detector.ts 🔴 (code, 9970 bytes)
│   │   ├── rate-limit.ts 🔴 (code, 3972 bytes)
│   │   ├── ruleset-versioning.ts 🔴 (code, 15086 bytes)
│   │   ├── security.ts 🔴 (code, 5191 bytes)
│   │   ├── sentry.ts 🔴 (code, 3488 bytes)
│   │   ├── telemetry.ts 🔴 (code, 7829 bytes)
│   │   ├── utils.ts 🔴 (code, 166 bytes)
│   │   └── validator.ts 🔴 (code, 10596 bytes)
│   ├── entitlements/
│   │   └── entitlements/
│   │       └── types.ts 🔴 (code, 5122 bytes)
│   ├── monitoring/
│   │   └── monitoring/
│   │       └── metrics.ts 🔴 (code, 6766 bytes)
│   ├── security/
│   │   └── security/
│   │       ├── input-sanitizer-server.ts 🔴 (code, 8201 bytes)
│   │       ├── input-sanitizer.ts 🔴 (code, 9532 bytes)
│   │       ├── rate-limiter-edge.ts 🔴 (code, 7374 bytes)
│   │       ├── rate-limiter.ts 🔴 (code, 6951 bytes)
│   │       ├── security-monitor.ts 🔴 (code, 9865 bytes)
│   │       └── waf-middleware.ts 🔴 (code, 5650 bytes)
│   └── supabase/
│       └── supabase/
│           └── client.ts 🔴 (code, 5818 bytes)
├── public/
│   └── f_v3_brand_html_gif/
│       └── f_v3_brand_html_gif/
│           ├── .DS_Store 🔴 (no_extension, 6148 bytes)
│           ├── click_ignition.html 🔴 (code, 5675 bytes)
│           ├── dust_bloom.html 🔴 (code, 6903 bytes)
│           ├── forge-glyph-interactive.html 🔴 (code, 12165 bytes)
│           ├── glyph_reveal.html 🔴 (code, 3640 bytes)
│           ├── golden_pulse.html 🔴 (code, 4251 bytes)
│           ├── hover_breathing.html 🔴 (code, 7276 bytes)
│           ├── index.html 🔴 (code, 386 bytes)
│           ├── ink_spread.html 🔴 (code, 6555 bytes)
│           ├── logo_animation.gif 🔴 (media, 20748566 bytes)
│           ├── magnetic_sigil.html 🔴 (code, 6534 bytes)
│           ├── nav_static_03_loading.webp 🔴 (media, 196732 bytes)
│           ├── neon_trail.html 🔴 (code, 6271 bytes)
│           ├── outline_fill.html 🔴 (code, 6320 bytes)
│           ├── scroll_reveal.html 🔴 (code, 8897 bytes)
│           ├── time_pulse.html 🔴 (code, 10225 bytes)
│           └── triumph_lines.html 🔴 (code, 8606 bytes)
├── scripts/
│   └── scripts/
│       ├── README-smoke-tests.md 🔴 (content, 6191 bytes)
│       ├── api-smoke-tests.js 🔴 (code, 10721 bytes)
│       ├── apply-unified-schema.js 🔴 (code, 7261 bytes)
│       ├── build-voice-check.js 🔴 (code, 3267 bytes)
│       ├── check-config.js 🔴 (code, 8489 bytes)
│       ├── check-db-state.js 🔴 (code, 4781 bytes)
│       ├── check-voice-branding.js 🔴 (code, 4859 bytes)
│       ├── cleanup-pii.js 🔴 (code, 7528 bytes)
│       ├── comprehensive-phone-sanitization.js 🔴 (code, 6920 bytes)
│       ├── create-stripe-products.js 🔴 (code, 4759 bytes)
│       ├── create-waitlist-tables.sql 🔴 (other, 1164 bytes)
│       ├── deploy-production.js 🔴 (code, 9502 bytes)
│       ├── deploy-security-lockdown.sh 🔴 (lock, 5649 bytes)
│       ├── enhanced-pii-detection.js 🔴 (code, 10295 bytes)
│       ├── enhanced-pii-report.js 🔴 (code, 16603 bytes)
│       ├── intelligent-pii-scan.js 🔴 (code, 10879 bytes)
│       ├── intelligent-security-scanner.js 🔴 (code, 11826 bytes)
│       ├── mark-migrations-complete.js 🔴 (code, 3884 bytes)
│       ├── migrate.js 🔴 (code, 8178 bytes)
│       ├── migrate.ts 🔴 (code, 4705 bytes)
│       ├── optimize-glass-effects.js 🔴 (code, 5849 bytes)
│       ├── performance-test-glass-effects.js 🔴 (code, 9262 bytes)
│       ├── production-migrate.js 🔴 (code, 8903 bytes)
│       ├── quick-conversion-test.js 🔴 (code, 4516 bytes)
│       ├── quick-deploy.sh 🔴 (other, 3987 bytes)
│       ├── quick-security-check.sh 🔴 (other, 6362 bytes)
│       ├── quick-setup.js 🔴 (code, 3233 bytes)
│       ├── run-smoke-tests.sh 🔴 (other, 1578 bytes)
│       ├── sanitize-critical-findings.js 🔴 (code, 6945 bytes)
│       ├── security-scan.js 🔴 (code, 17216 bytes)
│       ├── security-scan.sh 🔴 (other, 3084 bytes)
│       ├── security-whitelist.json 🔴 (config, 1325 bytes)
│       ├── seed-demo.js 🔴 (code, 12841 bytes)
│       ├── setup-backup-cron.sh 🔴 (other, 2607 bytes)
│       ├── setup-billing.js 🔴 (code, 8771 bytes)
│       ├── setup-complete.js 🔴 (code, 9216 bytes)
│       ├── setup-git-hooks.sh 🔴 (other, 8321 bytes)
│       ├── setup-pre-commit-hooks.sh 🔴 (other, 10746 bytes)
│       ├── setup-sendgrid.js 🔴 (code, 15115 bytes)
│       ├── setup-stripe.js 🔴 (code, 8244 bytes)
│       ├── smoke-test-api.sh 🔴 (other, 5199 bytes)
│       ├── smoke-test-config.env 🔴 (config, 401 bytes)
│       ├── supabase-backup.js 🔴 (code, 20978 bytes)
│       ├── test-all.js 🔴 (code, 11459 bytes)
│       ├── test-analytics.js 🔴 (code, 6519 bytes)
│       ├── test-ci-cd.js 🔴 (code, 14682 bytes)
│       ├── test-ci-comprehensive.js 🔴 (code, 8355 bytes)
│       ├── test-dashboard-history.js 🔴 (code, 15313 bytes)
│       ├── test-entitlements.js 🔴 (code, 11061 bytes)
│       ├── test-error-states.js 🔴 (code, 3670 bytes)
│       ├── test-export-pipeline.js 🔴 (code, 9296 bytes)
│       ├── test-gpt-live.js 🔴 (code, 13078 bytes)
│       ├── test-optimizations.js 🔴 (code, 12952 bytes)
│       ├── test-pii-detection-ci.js 🔴 (code, 9761 bytes)
│       ├── test-pii-detection.js 🔴 (code, 6728 bytes)
│       ├── test-pricing-conversion.js 🔴 (code, 13031 bytes)
│       ├── test-rls-isolation.js 🔴 (code, 8487 bytes)
│       ├── test-security-lockdown.js 🔴 (code, 9120 bytes)
│       ├── test-security-simple.js 🔴 (code, 5577 bytes)
│       ├── test-security.js 🔴 (code, 8579 bytes)
│       ├── test-stripe-webhook.js 🔴 (code, 12892 bytes)
│       └── verify-fixes.js 🔴 (code, 7870 bytes)
├── styles/
│   └── styles/
│       └── globals.css 🔴 (code, 4259 bytes)
├── supabase/
│   └── supabase/
│       ├── README.md 🔴 (content, 1445 bytes)
│       └── config.toml 🔴 (config, 4986 bytes)
├── tests/
│   └── e2e/
│       └── e2e/
│           └── layout-consistency.spec.ts 🔴 (code, 4512 bytes)
├── types/
│   └── types/
│       └── global.d.ts 🔴 (code, 205 bytes)
└── utils/
    └── utils/
        ├── parseInputSchema.ts 🔴 (code, 3711 bytes)
        └── promptCompiler.ts 🔴 (code, 4337 bytes)

\`\`\`

## Recomandări de Organizare

1. **Păstrează structura existentă** pentru fișierele CRITICAL
2. **Organizează în module** fișierele IMPORTANT  
3. **Grupează pe funcționalitate** fișierele USEFUL
4. **Elimină dependențele** către fișierele DROP

**Rezultat:** Structură curată și modulară pentru MVP lansabil.






# Plan CI/CD și Sistem de Gating pentru Lansare

**Data:** 29 August 2025

**Scop:** Definirea pipeline-ului de Integrare Continuă și Livrare Continuă (CI/CD) și a sistemului de "porți" (gating) pentru a asigura că fiecare release este stabil, securizat și de înaltă calitate.

---

## 1. Pipeline CI/CD (`pipeline.yml`)

Pipeline-ul va fi implementat folosind GitHub Actions și va rula la fiecare push pe branch-urile `main` și `develop`.

### 1.1. Etapele Pipeline-ului

1.  **Lint & Format Check:**
    - **Comenzi:** `npm run lint`, `npm run format:check`
    - **Scop:** Asigurarea unui stil de cod consistent și respectarea regulilor de formatare.

2.  **Build:**
    - **Comandă:** `npm run build`
    - **Scop:** Compilarea aplicației Next.js pentru producție. Eșecul în această etapă indică erori de compilare.

3.  **Unit & Integration Tests:**
    - **Comandă:** `npm run test`
    - **Scop:** Rularea testelor unitare și de integrare (folosind Jest și React Testing Library) pentru a valida logica de business și funcționalitatea componentelor.

4.  **Security Scan (Asistentul de Securitate):**
    - **Comandă:** `npm audit --audit-level=high`
    - **Scop:** Scanarea dependențelor pentru vulnerabilități cunoscute.

5.  **Performance Check (Asistentul de Performanță):**
    - **Comandă:** `npx lighthouse-ci`
    - **Scop:** Rularea testelor Lighthouse pe un mediu de staging pentru a verifica metricile de performanță.

6.  **Accessibility Check (Asistentul de Accesibilitate):**
    - **Comandă:** `npx axe-cli`
    - **Scop:** Scanarea paginilor principale pentru probleme de accesibilitate.

7.  **Deploy to Staging:**
    - **Condiție:** Toate etapele anterioare au trecut cu succes.
    - **Acțiune:** Deploy automat pe mediul de staging (ex: `staging.chatgpt-prompting.com`).

8.  **Deploy to Production (Manual Trigger):**
    - **Condiție:** Aprobare manuală după validarea pe staging.
    - **Acțiune:** Deploy pe mediul de producție.

### 1.2. Exemplu `pipeline.yml`

\`\`\`yaml
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies
        run: npm install

      - name: Lint and Format Check
        run: |
          npm run lint
          npm run format:check

      - name: Build
        run: npm run build

      - name: Run Tests
        run: npm run test

      - name: Security Scan
        run: npm audit --audit-level=high

      # Adaugă pași pentru performanță și accesibilitate aici
\`\`\`

---

## 2. Sistemul de Gating

Sistemul de gating definește criteriile care trebuie îndeplinite pentru ca o bucată de cod să avanseze de la o etapă la alta (ex: de la dezvoltare la staging, de la staging la producție).

### 2.1. Definition of Ready (DoR) - pentru a începe dezvoltarea unui task

- [ ] Task-ul este clar definit în Jira/Trello, cu user story și criterii de acceptanță.
- [ ] Design-ul (dacă este cazul) este finalizat și aprobat.
- [ ] Toate dependențele externe (API-uri, etc.) sunt disponibile.

### 2.2. Definition of Done (DoD) - pentru a considera un task finalizat

- [ ] Codul este scris și revizuit (pull request aprobat de cel puțin un alt dezvoltator).
- [ ] Toate testele (unitare, integrare) trec cu succes.
- **[GATING]** Toți cei **7 Asistenți** raportează PASS:
    - [ ] **Security:** 0 vulnerabilități critice.
    - [ ] **Privacy/GDPR:** Nu se introduc noi riscuri de privacy.
    - [ ] **Performance:** Scorul Lighthouse ≥ 90.
    - [ ] **Accessibility:** 0 erori critice WCAG.
    - [ ] **i18n:** Toate textele noi sunt adăugate în fișierele de traducere.
    - [ ] **Content Integrity:** Nu există link-uri rupte.
    - [ ] **Observability:** S-au adăugat log-uri relevante pentru noua funcționalitate.
- [ ] **[GATING]** Nu există bug-uri de prioritate P1 sau P2 asociate cu task-ul.
- [ ] **[GATING]** Nu se loghează informații personale identificabile (PII).
- [ ] Documentația a fost actualizată.

### 2.3. Alte Documente de Proces

- **`rollback.md`:** Procedura de rollback în cazul în care un deploy în producție introduce un bug critic. Include pașii pentru a reveni la versiunea anterioară și pentru a notifica utilizatorii (dacă este cazul).
- **`release_notes.md`:** Template pentru notele de lansare, care va fi completat la fiecare deploy în producție. Include secțiuni pentru "Funcționalități Noi", "Îmbunătățiri" și "Bug Fixes".

---

## 3. Implementare

1.  **Configurare GitHub Actions:** Se va crea fișierul `.github/workflows/pipeline.yml` în repository.
2.  **Integrare Asistenți:** Se vor adăuga scripturi în `package.json` pentru a rula fiecare asistent.
3.  **Documentare Procese:** Se vor crea documentele `gating.md`, `rollback.md` și `release_notes.md` în repository, într-un director `docs/process/`.






# Audit Final și Plan de Acțiune: Proiect chatgpt-prompting.com

**Data auditului:** 29 August 2025

**Scop:** Clarificarea structurii proiectului, identificarea fișierelor esențiale pentru lansare (MVP) și crearea unui plan de acțiune concret.

---

## 1. Sinteza Auditului

Am analizat un total de **925 de fișiere** (825.16 MB). Rezultatele indică o structură complexă, cu un mix de cod, conținut, media și fișiere de configurare. O parte semnificativă (38%) a fost identificată ca fiind redundantă.

### 1.1. Distribuția Fișierelor pe Relevanță

| Relevanță | Număr Fișiere | Procentaj | Acțiune Recomandată |
|---|---|---|---|
| **ACTIVE (MVP)** | **248** | **26.8%** | **Lansare Imediată** |
| Arhivă | 277 | 29.9% | Păstrare pentru referință | 
| Redundant | 352 | 38.1% | Eliminare / Arhivare | 
| Expirat | 48 | 5.2% | Eliminare / Arhivare | 

**Insight:** Focusul principal trebuie să fie pe cele 248 de fișiere ACTIVE, care constituie nucleul funcțional al site-ului.

### 1.2. Distribuția Fișierelor pe Categorie

| Categorie | Număr Fișiere | Procentaj |
|---|---|---|
| Conținut | 407 | 44.0% |
| Media | 259 | 28.0% |
| Cod | 136 | 14.7% |
| Config | 70 | 7.6% |
| Necategorizat | 53 | 5.7% |

**Insight:** Proiectul este dominat de conținut și media, ceea ce sugerează că managementul acestor resurse este critic.

---

## 2. Plan de Acțiune și Livrabile

Am creat o structură de directoare organizată și un set de documente pentru a facilita lansarea și mentenanța viitoare a proiectului.

### 2.1. Structura Organizată a Proiectului

Am creat un director `ORGANIZED_STRUCTURE` care conține o ierarhie clară, separând fișierele pe baza relevanței și funcționalității. Această structură este gata pentru a fi folosită ca bază pentru repository-ul final.

**Acțiune:** Utilizați arhiva `ORGANIZED_STRUCTURE.zip` ca punct de plecare pentru noul proiect.

### 2.2. Ghid de Deployment

Am generat un document `DEPLOYMENT_GUIDE.md` care conține pașii exacți pentru a lansa site-ul, incluzând:
- Checklist pre-deployment
- Lista fișierelor critice
- Comenzi esențiale
- Recomandări post-lansare

**Acțiune:** Urmați acest ghid pentru a asigura o lansare lină și fără erori.

### 2.3. Lista Fișierelor ACTIVE (MVP)

Documentul `fisiere_active_mvp.txt` conține lista completă a celor 248 de fișiere esențiale pentru lansare, grupate pe categorie.

**Acțiune:** Revizuiți această listă pentru a vă asigura că toate componentele necesare sunt incluse în build-ul final.

### 2.4. Date Complete de Audit

- **Tabel Ierarhic (`audit_tabel.csv`):** Conține detalii pentru fiecare fișier (nume, tip, relevanță, observații).
- **Metadate JSON (`audit_metadata.json`):** Oferă o imagine completă, programatică, a întregului audit.

**Acțiune:** Utilizați aceste fișiere pentru analize aprofundate sau pentru a automatiza sarcini viitoare de mentenanță.

---

## 3. Recomandări Strategice

1.  **Adoptați Structura Organizată:** Implementați imediat noua structură de directoare pentru a preveni acumularea de fișiere redundante.
2.  **Automatizați Curățenia:** Creați un script (bazat pe logica din `organize_structure.py`) care să ruleze periodic pentru a arhiva fișierele vechi și a elimina duplicatele.
3.  **Focus pe MVP:** Concentrați eforturile de dezvoltare și testare exclusiv pe fișierele din directorul `01_ACTIVE_MVP` pentru a accelera lansarea.

Acest audit oferă claritatea necesară pentru a lansa site-ul `chatgpt-prompting.com` cu încredere, bazându-vă pe o fundație curată și bine structurată.
