-- PROMPTFORGE v3 — Plans & Entitlements (seed)
begin;
create table if not exists entitlements (key text primary key, description text not null);
create table if not exists plans (code text primary key, name text not null, retention_days int not null, exports_allowed text[] not null, module_allowlist text not null, notes text);
create table if not exists plan_entitlements (plan_code text not null references plans(code) on delete cascade, entitlement_key text not null references entitlements(key) on delete cascade, enabled boolean not null, primary key (plan_code, entitlement_key));
insert into entitlements(key,description) values ('canUseAllModules','Acces la întregul set de module M01–M50') on conflict (key) do update set description=excluded.description;
insert into entitlements(key,description) values ('canExportMD','Permite exportul .md (Markdown)') on conflict (key) do update set description=excluded.description;
insert into entitlements(key,description) values ('canExportPDF','Permite exportul .pdf (raport brand-uit)') on conflict (key) do update set description=excluded.description;
insert into entitlements(key,description) values ('canExportJSON','Permite exportul .json (artefacte structurate)') on conflict (key) do update set description=excluded.description;
insert into entitlements(key,description) values ('canUseGptTestReal','Rulare Test Engine pe GPT live (telemetry & cost)') on conflict (key) do update set description=excluded.description;
insert into entitlements(key,description) values ('hasCloudHistory','Persistență istoric în Supabase (nelimitat)') on conflict (key) do update set description=excluded.description;
insert into entitlements(key,description) values ('hasEvaluatorAI','Scoruri + feedback narativ din Evaluator AI') on conflict (key) do update set description=excluded.description;
insert into entitlements(key,description) values ('hasAPI','Acces endpoint public /api/run/{moduleId}') on conflict (key) do update set description=excluded.description;
insert into entitlements(key,description) values ('hasWhiteLabel','Branding custom + licență self-host / whitelabel') on conflict (key) do update set description=excluded.description;
insert into entitlements(key,description) values ('canExportBundleZip','Export .zip complet (txt/md/json/pdf + manifest + checksum)') on conflict (key) do update set description=excluded.description;
insert into entitlements(key,description) values ('hasSeatsGT1','Licență multi-seat (>1 user/org)') on conflict (key) do update set description=excluded.description;
insert into plans(code,name,retention_days,exports_allowed,module_allowlist,notes) values ('free','Free',7,'{txt}','M01,M10,M18','Acces demo; fără cloud history; doar copy/preview.') on conflict (code) do update set name=excluded.name, retention_days=excluded.retention_days, exports_allowed=excluded.exports_allowed, module_allowlist=excluded.module_allowlist, notes=excluded.notes;
insert into plans(code,name,retention_days,exports_allowed,module_allowlist,notes) values ('creator','Creator',30,'{txt,md}','ALL','Export .md; fără JSON/PDF; fără GPT live; local history.') on conflict (code) do update set name=excluded.name, retention_days=excluded.retention_days, exports_allowed=excluded.exports_allowed, module_allowlist=excluded.module_allowlist, notes=excluded.notes;
insert into plans(code,name,retention_days,exports_allowed,module_allowlist,notes) values ('pro','Pro',90,'{txt,md,json,pdf}','ALL','Include Test Engine pe GPT live + Evaluator AI + Cloud History.') on conflict (code) do update set name=excluded.name, retention_days=excluded.retention_days, exports_allowed=excluded.exports_allowed, module_allowlist=excluded.module_allowlist, notes=excluded.notes;
insert into plans(code,name,retention_days,exports_allowed,module_allowlist,notes) values ('enterprise','Enterprise',-1,'{txt,md,json,pdf,bundle}','ALL','API + WhiteLabel + Bundle ZIP + multi-seat; retenție nelimitată.') on conflict (code) do update set name=excluded.name, retention_days=excluded.retention_days, exports_allowed=excluded.exports_allowed, module_allowlist=excluded.module_allowlist, notes=excluded.notes;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('free','canUseAllModules',false) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('free','canExportMD',false) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('free','canExportPDF',false) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('free','canExportJSON',false) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('free','canUseGptTestReal',false) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('free','hasCloudHistory',false) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('free','hasEvaluatorAI',false) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('free','hasAPI',false) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('free','hasWhiteLabel',false) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('free','canExportBundleZip',false) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('free','hasSeatsGT1',false) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('creator','canUseAllModules',true) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('creator','canExportMD',true) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('creator','canExportPDF',false) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('creator','canExportJSON',false) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('creator','canUseGptTestReal',false) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('creator','hasCloudHistory',false) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('creator','hasEvaluatorAI',false) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('creator','hasAPI',false) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('creator','hasWhiteLabel',false) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('creator','canExportBundleZip',false) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('creator','hasSeatsGT1',false) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('pro','canUseAllModules',true) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('pro','canExportMD',true) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('pro','canExportPDF',true) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('pro','canExportJSON',true) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('pro','canUseGptTestReal',true) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('pro','hasCloudHistory',true) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('pro','hasEvaluatorAI',true) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('pro','hasAPI',false) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('pro','hasWhiteLabel',false) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('pro','canExportBundleZip',false) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('pro','hasSeatsGT1',false) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('enterprise','canUseAllModules',true) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('enterprise','canExportMD',true) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('enterprise','canExportPDF',true) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('enterprise','canExportJSON',true) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('enterprise','canUseGptTestReal',true) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('enterprise','hasCloudHistory',true) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('enterprise','hasEvaluatorAI',true) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('enterprise','hasAPI',true) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('enterprise','hasWhiteLabel',true) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('enterprise','canExportBundleZip',true) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
insert into plan_entitlements(plan_code, entitlement_key, enabled) values ('enterprise','hasSeatsGT1',true) on conflict (plan_code, entitlement_key) do update set enabled=excluded.enabled;
commit;