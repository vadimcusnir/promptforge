# Linting Quality Gate Workflow
# This workflow runs on every PR and provides detailed linting feedback

name: üßπ Lint Quality Gate

on:
  pull_request:
    branches: [main, develop, staging]
  push:
    branches: [main, develop, staging]
  workflow_dispatch:
    inputs:
      strict_mode:
        description: 'Enable strict linting mode'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  lint-analysis:
    name: üîç Lint Analysis & Quality Gate
    runs-on: ubuntu-latest
    outputs:
      quality-gate: ${{ steps.quality-gate.outputs.result }}
      error-count: ${{ steps.error-counter.outputs.count }}
      warning-count: ${{ steps.warning-counter.outputs.count }}
      critical-issues: ${{ steps.issue-analyzer.outputs.critical }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better analysis

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: üì• Install dependencies
        run: pnpm install --frozen-lockfile

      - name: üîç Run comprehensive linting
        id: lint-run
        run: |
          echo "üîç Running comprehensive linting analysis..."

          # Run ESLint with detailed output
          LINT_OUTPUT=$(pnpm run lint 2>&1 || true)

          # Save output for analysis
          echo "$LINT_OUTPUT" > lint-output.txt

          # Extract error and warning counts
          ERROR_COUNT=$(echo "$LINT_OUTPUT" | grep -c "Error:" || echo "0")
          WARNING_COUNT=$(echo "$LINT_OUTPUT" | grep -c "Warning:" || echo "0")

          echo "üìä Linting Summary:"
          echo "   Errors: $ERROR_COUNT"
          echo "   Warnings: $WARNING_COUNT"

          # Set outputs
          echo "error-count=$ERROR_COUNT" >> $GITHUB_OUTPUT
          echo "warning-count=$WARNING_COUNT" >> $GITHUB_OUTPUT

      - name: üìä Analyze linting issues
        id: issue-analyzer
        run: |
          echo "üìä Analyzing linting issues..."

          # Read linting output
          LINT_OUTPUT=$(cat lint-output.txt)

          # Categorize issues
          CRITICAL_ISSUES=0
          MEDIUM_ISSUES=0
          LOW_ISSUES=0

          # Count by severity
          if echo "$LINT_OUTPUT" | grep -q "Parsing error"; then
            CRITICAL_ISSUES=$((CRITICAL_ISSUES + 1))
          fi

          if echo "$LINT_OUTPUT" | grep -q "Unexpected any"; then
            MEDIUM_ISSUES=$((MEDIUM_ISSUES + 1))
          fi

          if echo "$LINT_OUTPUT" | grep -q "is defined but never used"; then
            LOW_ISSUES=$((LOW_ISSUES + 1))
          fi

          echo "üìã Issue Breakdown:"
          echo "   Critical: $CRITICAL_ISSUES"
          echo "   Medium: $MEDIUM_ISSUES"
          echo "   Low: $LOW_ISSUES"

          # Set outputs
          echo "critical=$CRITICAL_ISSUES" >> $GITHUB_OUTPUT

      - name: üö® Quality Gate Decision
        id: quality-gate
        run: |
          echo "üö® Quality Gate Decision..."

          ERROR_COUNT="${{ steps.lint-run.outputs.error-count }}"
          CRITICAL_ISSUES="${{ steps.issue-analyzer.outputs.critical }}"
          STRICT_MODE="${{ github.event.inputs.strict_mode }}"

          # Quality gate logic
          if [ "$CRITICAL_ISSUES" -gt 0 ]; then
            echo "‚ùå Quality Gate: FAILED (Critical issues found)"
            echo "result=failed" >> $GITHUB_OUTPUT
            exit 1
          elif [ "$ERROR_COUNT" -eq 0 ]; then
            echo "‚úÖ Quality Gate: PASSED (Perfect code quality)"
            echo "result=passed" >> $GITHUB_OUTPUT
          elif [ "$ERROR_COUNT" -le 25 ]; then
            echo "‚úÖ Quality Gate: PASSED (Good code quality)"
            echo "result=passed" >> $GITHUB_OUTPUT
          elif [ "$ERROR_COUNT" -le 50 ]; then
            echo "‚ö†Ô∏è  Quality Gate: PASSED with warnings"
            echo "result=warning" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Quality Gate: FAILED (Too many errors)"
            echo "result=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: üìã Generate detailed report
        run: |
          echo "üìã Generating detailed linting report..."

          # Create comprehensive report
          cat > lint-report.md << EOF
          # Linting Quality Report

          ## Summary
          - **Total Errors**: ${{ steps.lint-run.outputs.error-count }}
          - **Total Warnings**: ${{ steps.lint-run.outputs.warning-count }}
          - **Quality Gate**: ${{ steps.quality-gate.outputs.result }}

          ## Issue Categories
          - **Critical Issues**: ${{ steps.issue-analyzer.outputs.critical }}
          - **Type Safety Issues**: $(grep -c "Unexpected any" lint-output.txt || echo "0")
          - **Unused Variables**: $(grep -c "is defined but never used" lint-output.txt || echo "0")
          - **Import Issues**: $(grep -c "is defined but never used" lint-output.txt || echo "0")

          ## Recommendations
          $(if [ "${{ steps.quality-gate.outputs.result }}" = "passed" ]; then
            echo "- üéâ Excellent code quality! Keep up the good work."
          elif [ "${{ steps.quality-gate.outputs.result }}" = "warning" ]; then
            echo "- ‚ö†Ô∏è  Consider fixing some linting issues for better code quality."
          else
            echo "- ‚ùå Please fix critical issues before merging."
          fi)

          ## Next Steps
          1. Review the linting output below
          2. Fix critical issues first
          3. Address medium-priority issues
          4. Consider fixing low-priority issues for better code quality

          ## Full Linting Output
          \`\`\`
          $(cat lint-output.txt)
          \`\`\`
          EOF

      - name: üì§ Upload linting artifacts
        uses: actions/upload-artifact@v3
        with:
          name: linting-artifacts
          path: |
            lint-report.md
            lint-output.txt

      - name: üí¨ Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('lint-report.md', 'utf8');

            const qualityGate = '${{ steps.quality-gate.outputs.result }}';
            const errorCount = '${{ steps.lint-run.outputs.error-count }}';
            const criticalIssues = '${{ steps.issue-analyzer.outputs.critical }}';

            let status = '';
            let emoji = '';

            if (qualityGate === 'passed') {
              status = '‚úÖ Quality Gate PASSED';
              emoji = 'üéâ';
            } else if (qualityGate === 'warning') {
              status = '‚ö†Ô∏è Quality Gate PASSED with warnings';
              emoji = '‚ö†Ô∏è';
            } else {
              status = '‚ùå Quality Gate FAILED';
              emoji = 'üö®';
            }

            const comment = `## ${status} ${emoji}

            **Linting Results:**
            - **Errors**: ${errorCount}
            - **Critical Issues**: ${criticalIssues}
            - **Quality Gate**: ${qualityGate}

            ${report}

            ---
            *This comment was automatically generated by the Lint Quality Gate workflow.*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: üö® Fail workflow on critical issues
        if: steps.quality-gate.outputs.result == 'failed'
        run: |
          echo "‚ùå Quality gate failed. Please fix critical issues before proceeding."
          exit 1

  auto-fix-attempt:
    name: üîß Auto-Fix Attempt
    runs-on: ubuntu-latest
    needs: lint-analysis
    if: needs.lint-analysis.outputs.quality-gate == 'warning' && needs.lint-analysis.outputs.error-count != '0'

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: üì• Install dependencies
        run: pnpm install --frozen-lockfile

      - name: üîß Attempt auto-fixes
        run: |
          echo "üîß Attempting to auto-fix linting issues..."

          # Try to fix what we can automatically
          if command -v npx >/dev/null 2>&1; then
            echo "üîß Running ESLint auto-fix..."
            npx eslint . --fix || echo "‚ö†Ô∏è  Some issues couldn't be auto-fixed"
          fi

          # Check if we improved the situation
          echo "üîç Re-running linting to check improvements..."
          pnpm run lint 2>&1 | tee lint-after-fix.txt

          # Count improvements
          BEFORE_COUNT="${{ needs.lint-analysis.outputs.error-count }}"
          AFTER_COUNT=$(grep -c "Error:" lint-after-fix.txt || echo "0")

          if [ "$AFTER_COUNT" -lt "$BEFORE_COUNT" ]; then
            echo "‚úÖ Auto-fix improved the situation!"
            echo "   Before: $BEFORE_COUNT errors"
            echo "   After: $AFTER_COUNT errors"
            echo "   Improvement: $((BEFORE_COUNT - AFTER_COUNT)) errors fixed"
          else
            echo "‚ö†Ô∏è  Auto-fix didn't improve the situation"
          fi

      - name: üì§ Upload auto-fix results
        uses: actions/upload-artifact@v3
        with:
          name: auto-fix-results
          path: |
            lint-after-fix.txt

  code-quality-summary:
    name: üìä Code Quality Summary
    runs-on: ubuntu-latest
    needs: [lint-analysis, auto-fix-attempt]
    if: always()

    steps:
      - name: üìä Generate quality summary
        run: |
          echo "üìä Code Quality Summary Generated"
          echo "=================================="
          echo ""
          echo "Quality Gate: ${{ needs.lint-analysis.outputs.quality-gate }}"
          echo "Total Errors: ${{ needs.lint-analysis.outputs.error-count }}"
          echo "Critical Issues: ${{ needs.lint-analysis.outputs.critical-issues }}"
          echo ""
          echo "Auto-Fix Attempt: ${{ needs.auto-fix-attempt.result }}"
          echo ""
          echo "Recommendations:"
          if [ "${{ needs.lint-analysis.outputs.quality-gate }}" = "passed" ]; then
            echo "‚úÖ Excellent code quality! Ready for merge."
          elif [ "${{ needs.lint-analysis.outputs.quality-gate }}" = "warning" ]; then
            echo "‚ö†Ô∏è  Good code quality. Consider fixing some issues."
          else
            echo "‚ùå Please fix critical issues before merging."
          fi

          echo ""
          echo "Generated at: $(date)"
          echo "Workflow: ${{ github.workflow }}"
          echo "Run ID: ${{ github.run_id }}"

      - name: üì§ Upload quality summary
        uses: actions/upload-artifact@v3
        with:
          name: quality-summary
          path: quality-summary.txt
