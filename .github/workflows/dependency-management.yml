name: Dependency Management

on:
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: true
        default: 'security'
        type: choice
        options:
          - security
          - all
          - audit
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20.18.0'
  PNPM_VERSION: '9.15.0'

jobs:
  # Security audit and vulnerability scanning
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        run: |
          echo "🔒 Running security audit..."
          pnpm audit --audit-level=moderate --json > audit-report.json || true

      - name: Upload audit report
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report
          path: audit-report.json
          retention-days: 30

      - name: Comment PR with security findings
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const auditData = JSON.parse(fs.readFileSync('audit-report.json', 'utf8'));
              const vulnerabilities = auditData.vulnerabilities || {};
              const vulnCount = Object.keys(vulnerabilities).length;
              
              if (vulnCount > 0) {
                const comment = `⚠️ **Security Audit Results**\n\n` +
                  `Found ${vulnCount} vulnerabilities:\n\n` +
                  Object.entries(vulnerabilities).map(([pkg, vuln]) => 
                    `- **${pkg}**: ${vuln.severity} - ${vuln.title}`
                  ).join('\n') + '\n\n' +
                  `Run \`pnpm audit fix\` to attempt automatic fixes.`;
                  
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              } else {
                const comment = `✅ **Security Audit Results**\n\nNo vulnerabilities found!`;
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            } catch (error) {
              console.log('Error processing audit report:', error);
            }

  # Dependency updates
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for outdated packages
        run: |
          echo "📦 Checking for outdated packages..."
          pnpm outdated --format=json > outdated-packages.json || echo "[]" > outdated-packages.json

      - name: Display outdated packages
        run: |
          echo "📋 Outdated packages:"
          cat outdated-packages.json | jq -r '.[] | "\(.current) → \(.latest) (\(.package))"' || echo "No outdated packages found"

      - name: Update dependencies
        if: github.event.inputs.update_type == 'all'
        run: |
          echo "🔄 Updating all dependencies..."
          pnpm update

      - name: Update security patches
        if: github.event.inputs.update_type == 'security'
        run: |
          echo "🔒 Updating security patches..."
          pnpm audit fix

      - name: Install updated dependencies
        if: github.event.inputs.update_type != 'audit'
        run: pnpm install --frozen-lockfile

      - name: Run tests after update
        if: github.event.inputs.update_type != 'audit'
        run: pnpm run test

      - name: Build after update
        if: github.event.inputs.update_type != 'audit'
        run: pnpm run build

      - name: Create PR for updates
        if: github.event.inputs.update_type != 'audit'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore(deps): update dependencies'
          title: '🔄 Update Dependencies'
          body: |
            ## Dependency Updates

            This PR updates dependencies to their latest versions.

            **Update Type:** ${{ github.event.inputs.update_type }}
            **Triggered by:** ${{ github.event_name }}
            **Timestamp:** ${{ github.event.timestamp }}

            ### Changes
            - Updated package dependencies
            - Regenerated lockfile
            - All tests passing
            - Build successful

            ### Checklist
            - [x] Dependencies updated
            - [x] Tests passing
            - [x] Build successful
            - [x] No breaking changes

            **Note:** Please review the changes and test thoroughly before merging.
          branch: dependency-updates
          delete-branch: true
          labels: dependencies,automated

  # Lockfile integrity check
  lockfile-check:
    name: Lockfile Integrity
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Verify lockfile integrity
        run: |
          echo "🔐 Verifying lockfile integrity..."
          pnpm install --frozen-lockfile
          if [ $? -eq 0 ]; then
            echo "✅ Lockfile is valid and consistent"
          else
            echo "❌ Lockfile integrity check failed"
            exit 1
          fi

      - name: Check for lockfile conflicts
        run: |
          echo "🔍 Checking for lockfile conflicts..."
          if git diff --name-only | grep -q "pnpm-lock.yaml"; then
            echo "⚠️  Lockfile has uncommitted changes"
            git diff pnpm-lock.yaml
          else
            echo "✅ Lockfile is clean"
          fi

  # SBOM generation
  generate-sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate SBOM
        run: |
          echo "📋 Generating Software Bill of Materials..."
          pnpm run sbom
          pnpm run sbom:xml

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-reports
          path: |
            sbom.json
            sbom.xml
          retention-days: 90

      - name: Commit SBOM updates
        if: github.event_name == 'schedule'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add sbom.json sbom.xml
          git commit -m "chore: update SBOM files" || echo "No changes to commit"
          git push || echo "No changes to push"
