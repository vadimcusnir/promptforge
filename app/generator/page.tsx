"use client"

import { useState, useEffect } from "react"
import { useSearchParams } from "next/navigation"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { useToast } from "@/hooks/use-toast"
import {
  Settings,
  Zap,
  TestTube,
  History,
  Download,
  Search,
  Filter,
  Lock,
  Copy,
  CheckCircle,
  AlertCircle,
} from "lucide-react"
import { EntitlementGate } from "@/components/entitlement-gate"
import { useEntitlements } from "@/hooks/use-entitlements"
import { default7D, paramOptions, type Params7D } from "@/lib/default-params"

interface GeneratedPrompt {
  id: string
  content: string
  module: string
  params: Params7D
  timestamp: string
  hash: string
  scores?: {
    structure: number
    clarity: number
    kpi_compliance: number
    executability: number
  }
}

export default function GeneratorPage() {
  const { getEntitlement } = useEntitlements()
  const { toast } = useToast()
  const searchParams = useSearchParams()
  const [selectedModule, setSelectedModule] = useState("M01")
  const [params7D, setParams7D] = useState<Params7D>(default7D)
  const [isGenerating, setIsGenerating] = useState(false)
  const [isTesting, setIsTesting] = useState(false)
  const [isExporting, setIsExporting] = useState(false)
  const [generatedPrompt, setGeneratedPrompt] = useState<GeneratedPrompt | null>(null)
  const [history, setHistory] = useState<GeneratedPrompt[]>([])
  interface TestResults {
    type: "live" | "simulation"
    scores: {
      structure: number
      clarity: number
      kpi_compliance: number
      executability: number
    }
    timestamp: string
  }

  const [testResults, setTestResults] = useState<TestResults | null>(null)

  useEffect(() => {
    const savedHistory = localStorage.getItem("promptforge_history")
    if (savedHistory) {
      setHistory(JSON.parse(savedHistory))
    }
  }, [])

  useEffect(() => {
    const urlParams: Partial<Params7D> = {}

    // Extract 7D parameters from URL
    Object.keys(default7D).forEach((key) => {
      const value = searchParams.get(key)
      if (value) {
        urlParams[key as keyof Params7D] = value
      }
    })

    // Extract module from URL
    const moduleParam = searchParams.get("module")
    if (moduleParam) {
      setSelectedModule(moduleParam)
    }

    // Merge URL params with defaults
    setParams7D({ ...default7D, ...urlParams })
  }, [searchParams])

  const updateParam = (key: keyof Params7D, value: string) => {
    setParams7D((prev) => ({ ...prev, [key]: value }))
  }

  const handleGenerate = async () => {
    setIsGenerating(true)
    try {
      // Simulate API call
      await new Promise((resolve) => setTimeout(resolve, 2000))

      const prompt: GeneratedPrompt = {
        id: `run_${Date.now()}`,
        content: `# ${modules.find((m) => m.id === selectedModule)?.name} Prompt

## Context
Domain: ${params7D.domain}
Scale: ${params7D.scale}
Urgency: ${params7D.urgency}

## Objective
Generate a comprehensive ${selectedModule} prompt optimized for ${params7D.application} with ${params7D.complexity} complexity level.

## Instructions
1. Analyze the current ${params7D.domain} landscape
2. Identify key opportunities for ${params7D.scale} optimization
3. Develop actionable strategies considering ${params7D.resources} resource constraints
4. Prioritize based on ${params7D.urgency} timeline requirements

## Expected Output
Deliver results in ${params7D.output} format with clear metrics and KPIs.

---
Generated by PromptForgeâ„¢ | Module: ${selectedModule} | Hash: ${Math.random().toString(36).substring(7)}`,
        module: selectedModule,
        params: { ...params7D },
        timestamp: new Date().toISOString(),
        hash: Math.random().toString(36).substring(7),
      }

      setGeneratedPrompt(prompt)

      // Save to history
      const newHistory = [prompt, ...history.slice(0, 9)] // Keep last 10
      setHistory(newHistory)
      localStorage.setItem("promptforge_history", JSON.stringify(newHistory))

      toast({
        title: "Prompt Generated Successfully",
        description: `Run ID: ${prompt.id}`,
        duration: 3000,
      })
    } catch {
      toast({
        title: "Generation Failed",
        description: "Please try again",
        variant: "destructive",
        duration: 3000,
      })
    } finally {
      setIsGenerating(false)
    }
  }

  const handleTest = async (type: "live" | "simulation") => {
    if (!generatedPrompt) {
      toast({
        title: "No Prompt to Test",
        description: "Generate a prompt first",
        variant: "destructive",
      })
      return
    }

    setIsTesting(true)
    try {
      await new Promise((resolve) => setTimeout(resolve, 3000))

      const scores = {
        structure: Math.floor(Math.random() * 20) + 80,
        clarity: Math.floor(Math.random() * 20) + 80,
        kpi_compliance: Math.floor(Math.random() * 20) + 70,
        executability: Math.floor(Math.random() * 20) + 85,
      }

      setTestResults({
        type,
        scores,
        timestamp: new Date().toISOString(),
      })

      toast({
        title: `${type === "live" ? "Live GPT" : "Simulation"} Test Complete`,
        description: `Average score: ${Math.round(Object.values(scores).reduce((a, b) => a + b, 0) / 4)}`,
      })
    } catch {
      toast({
        title: "Test Failed",
        description: "Please try again",
        variant: "destructive",
      })
    } finally {
      setIsTesting(false)
    }
  }

  const handleExport = async (format: "txt" | "pdf" | "json" | "zip") => {
    if (!generatedPrompt) {
      toast({
        title: "No Prompt to Export",
        description: "Generate a prompt first",
        variant: "destructive",
      })
      return
    }

    setIsExporting(true)
    try {
      await new Promise((resolve) => setTimeout(resolve, 1500))

      // Simulate file download
      const blob = new Blob([generatedPrompt.content], { type: "text/plain" })
      const url = URL.createObjectURL(blob)
      const a = document.createElement("a")
      a.href = url
      a.download = `prompt_${generatedPrompt.hash}.${format}`
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      URL.revokeObjectURL(url)

      toast({
        title: "Export Successful",
        description: `Prompt exported as ${format.toUpperCase()}`,
      })
    } catch (error) {
      toast({
        title: "Export Failed",
        description: "Please try again",
        variant: "destructive",
      })
    } finally {
      setIsExporting(false)
    }
  }

  const handleCopy = async () => {
    if (!generatedPrompt) return

    try {
      await navigator.clipboard.writeText(generatedPrompt.content)
      toast({
        title: "Copied to Clipboard",
        description: "Prompt copied successfully",
      })
    } catch (error) {
      toast({
        title: "Copy Failed",
        description: "Please try again",
        variant: "destructive",
      })
    }
  }

  const modules = [
    { id: "M01", name: "SOP Forge", vector: "Strategic", moduleNumber: 1, plan: "free" },
    { id: "M07", name: "Risk Reversal", vector: "Strategic", moduleNumber: 7, plan: "creator" },
    { id: "M10", name: "Funnel Nota", vector: "Rhetoric", moduleNumber: 10, plan: "free" },
    { id: "M11", name: "Visibility Diag", vector: "Strategic", moduleNumber: 11, plan: "creator" },
    { id: "M12", name: "Pricing Psych", vector: "Rhetoric", moduleNumber: 12, plan: "creator" },
    { id: "M18", name: "Content Audit", vector: "Content", moduleNumber: 18, plan: "free" },
    { id: "M25", name: "Brand Voice", vector: "Branding", moduleNumber: 25, plan: "creator" },
    { id: "M35", name: "Crisis Comm", vector: "Crisis", moduleNumber: 35, plan: "pro" },
    { id: "M45", name: "Analytics Deep", vector: "Analytics", moduleNumber: 45, plan: "pro" },
  ]

  const rawPlan = getEntitlement("plan")
  const userPlan = typeof rawPlan === "string" ? rawPlan : "free"
  const freeModules = ["M01", "M10", "M18"]

  return (
    <div className="min-h-screen pattern-bg text-white">
      <div className="container mx-auto px-4 py-8">
        <div className="mb-8">
          <h1 className="text-4xl font-bold font-serif mb-4">Prompt Generator</h1>
          <p className="text-xl text-gray-400">Configure, generate, and export industrial-grade prompts</p>
        </div>

        <div className="grid lg:grid-cols-4 gap-6">
          {/* Left Panel - Module Selection */}
          <div className="lg:col-span-1">
            <Card className="glass-card">
              <CardHeader>
                <CardTitle className="font-serif flex items-center gap-2">
                  <Filter className="w-5 h-5 text-yellow-400" />
                  Module Library
                </CardTitle>
                <CardDescription>Select from 50 operational modules</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="relative">
                  <Search className="absolute left-3 top-3 w-4 h-4 text-gray-400" />
                  <Input placeholder="Search modules..." className="pl-10 bg-black/50 border-gray-700" />
                </div>

                <div className="space-y-2">
                  <Label className="text-sm font-medium text-gray-300">Filter by Vector</Label>
                  <Select>
                    <SelectTrigger className="bg-black/50 border-gray-700">
                      <SelectValue placeholder="All vectors" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="strategic">Strategic</SelectItem>
                      <SelectItem value="rhetoric">Rhetoric</SelectItem>
                      <SelectItem value="content">Content</SelectItem>
                      <SelectItem value="analytics">Analytics</SelectItem>
                      <SelectItem value="branding">Branding</SelectItem>
                      <SelectItem value="crisis">Crisis</SelectItem>
                      <SelectItem value="cognitive">Cognitive</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2 max-h-96 overflow-y-auto">
                  {modules.map((module) => {
                    const isLocked = userPlan === "free" && !freeModules.includes(module.id)
                    const requiredPlan = module.plan

                    return (
                      <div key={module.id}>
                        {isLocked ? (
                          <EntitlementGate
                            flag="canAccessModule"
                            requiredPlan={requiredPlan}
                            feature={`Module ${module.id}`}
                            showLock={true}
                          >
                            <Card className="cursor-not-allowed opacity-50 border-gray-600">
                              <CardContent className="p-3">
                                <div className="flex items-center justify-between mb-2">
                                  <span className="font-mono text-sm text-gray-500">{module.id}</span>
                                  <div className="flex items-center gap-2">
                                    <Lock className="w-3 h-3 text-gray-500" />
                                    <Badge variant="secondary" className="text-xs">
                                      {requiredPlan === "creator" ? "Creator+" : "Pro+"}
                                    </Badge>
                                  </div>
                                </div>
                                <div className="font-medium text-sm mb-1 text-gray-500">{module.name}</div>
                                <Badge variant="outline" className="text-xs text-gray-500">
                                  {module.vector}
                                </Badge>
                              </CardContent>
                            </Card>
                          </EntitlementGate>
                        ) : (
                          <Card
                            className={`cursor-pointer transition-colors hover:border-yellow-400/50 ${
                              selectedModule === module.id ? "border-yellow-400" : ""
                            }`}
                            onClick={() => setSelectedModule(module.id)}
                          >
                            <CardContent className="p-3">
                              <div className="flex items-center justify-between mb-2">
                                <span className="font-mono text-sm text-yellow-400">{module.id}</span>
                                {selectedModule === module.id && (
                                  <Badge className="text-xs bg-yellow-400 text-black">Active</Badge>
                                )}
                              </div>
                              <div className="font-medium text-sm mb-1">{module.name}</div>
                              <Badge variant="outline" className="text-xs">
                                {module.vector}
                              </Badge>
                            </CardContent>
                          </Card>
                        )}
                      </div>
                    )
                  })}
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Main Content */}
          <div className="lg:col-span-3">
            <Tabs defaultValue="config" className="space-y-6">
              <TabsList className="grid w-full grid-cols-4 bg-black/50">
                <TabsTrigger
                  value="config"
                  className="data-[state=active]:bg-yellow-400 data-[state=active]:text-black"
                >
                  <Settings className="w-4 h-4 mr-2" />
                  7D Config
                </TabsTrigger>
                <TabsTrigger
                  value="generator"
                  className="data-[state=active]:bg-yellow-400 data-[state=active]:text-black"
                >
                  <Zap className="w-4 h-4 mr-2" />
                  Generator
                </TabsTrigger>
                <TabsTrigger value="test" className="data-[state=active]:bg-yellow-400 data-[state=active]:text-black">
                  <TestTube className="w-4 h-4 mr-2" />
                  Test Engine
                </TabsTrigger>
                <TabsTrigger
                  value="history"
                  className="data-[state=active]:bg-yellow-400 data-[state=active]:text-black"
                >
                  <History className="w-4 h-4 mr-2" />
                  History
                </TabsTrigger>
              </TabsList>

              <TabsContent value="config">
                <Card className="glass-card">
                  <CardHeader>
                    <CardTitle className="font-serif">7D Parameter Configuration</CardTitle>
                    <CardDescription>Configure the seven dimensions for optimal prompt generation</CardDescription>
                  </CardHeader>
                  <CardContent className="grid md:grid-cols-2 gap-6">
                    {Object.entries(paramOptions).map(([key, options]) => (
                      <div key={key} className="space-y-2">
                        <Label className="capitalize">{key}</Label>
                        <Select
                          value={params7D[key as keyof Params7D]}
                          onValueChange={(value) => updateParam(key as keyof Params7D, value)}
                        >
                          <SelectTrigger className="bg-black/50 border-gray-700">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            {options.map((option) => (
                              <SelectItem key={option.value} value={option.value}>
                                {option.label}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                    ))}
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="generator">
                <Card className="glass-card">
                  <CardHeader>
                    <CardTitle className="font-serif">Generate Prompt</CardTitle>
                    <CardDescription>Create your industrial-grade prompt with selected configuration</CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-6">
                    <div className="flex items-center justify-between">
                      <div>
                        <h3 className="font-medium">
                          Selected Module: {selectedModule} - {modules.find((m) => m.id === selectedModule)?.name}
                        </h3>
                        <p className="text-sm text-gray-400">
                          {modules.find((m) => m.id === selectedModule)?.vector} vector
                        </p>
                      </div>
                      <Button
                        className="bg-yellow-600 hover:bg-yellow-700"
                        onClick={handleGenerate}
                        disabled={isGenerating}
                      >
                        <Zap className="w-4 h-4 mr-2" />
                        {isGenerating ? "Generating..." : "Generate (Ctrl+G)"}
                      </Button>
                    </div>

                    <div className="bg-black/50 border border-gray-700 rounded-lg p-4 min-h-96">
                      <div className="text-sm whitespace-pre-wrap">
                        {generatedPrompt?.content || "Generated prompt will appear here..."}
                      </div>
                    </div>

                    {generatedPrompt && (
                      <div className="flex items-center justify-between">
                        <div className="text-sm text-gray-400">
                          Session: #{generatedPrompt.hash} â€¢ Generated:{" "}
                          {new Date(generatedPrompt.timestamp).toLocaleString()}
                        </div>
                        <div className="flex gap-2">
                          <Button variant="outline" size="sm" onClick={handleCopy}>
                            <Copy className="w-4 h-4 mr-2" />
                            Copy
                          </Button>
                          <EntitlementGate flag="canExportTxt" requiredPlan="free" feature="TXT Export">
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleExport("txt")}
                              disabled={isExporting}
                            >
                              <Download className="w-4 h-4 mr-2" />
                              {isExporting ? "Exporting..." : "Export .txt"}
                            </Button>
                          </EntitlementGate>
                          <EntitlementGate flag="canExportPdf" requiredPlan="pro" feature="PDF Export">
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleExport("pdf")}
                              disabled={isExporting}
                            >
                              <Download className="w-4 h-4 mr-2" />
                              {isExporting ? "Exporting..." : "Export .pdf"}
                            </Button>
                          </EntitlementGate>
                          <EntitlementGate flag="canExportJson" requiredPlan="pro" feature="JSON Export">
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleExport("json")}
                              disabled={isExporting}
                            >
                              <Download className="w-4 h-4 mr-2" />
                              {isExporting ? "Exporting..." : "Export .json"}
                            </Button>
                          </EntitlementGate>
                          <EntitlementGate flag="canExportBundle" requiredPlan="enterprise" feature="Bundle Export">
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleExport("zip")}
                              disabled={isExporting}
                            >
                              <Download className="w-4 h-4 mr-2" />
                              {isExporting ? "Exporting..." : "Export .zip"}
                            </Button>
                          </EntitlementGate>
                        </div>
                      </div>
                    )}
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="test">
                <Card className="glass-card">
                  <CardHeader>
                    <CardTitle className="font-serif">Test Engine</CardTitle>
                    <CardDescription>Validate prompt quality with simulated or live testing</CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-6">
                    <div className="grid md:grid-cols-2 gap-4">
                      <Button
                        variant="outline"
                        className="h-20 flex-col bg-transparent"
                        onClick={() => handleTest("simulation")}
                        disabled={isTesting || !generatedPrompt}
                      >
                        <TestTube className="w-6 h-6 mb-2" />
                        <span>{isTesting ? "Testing..." : "Simulate Test"}</span>
                        <span className="text-xs text-gray-400">Available on all plans</span>
                      </Button>
                      <EntitlementGate flag="canUseGptTestReal" requiredPlan="pro" feature="Live GPT Testing">
                        <Button
                          variant="outline"
                          className="h-20 flex-col bg-transparent"
                          onClick={() => handleTest("live")}
                          disabled={isTesting || !generatedPrompt}
                        >
                          <Zap className="w-6 h-6 mb-2" />
                          <span>{isTesting ? "Testing..." : "Live GPT Test"}</span>
                          <span className="text-xs text-gray-400">Real AI validation</span>
                        </Button>
                      </EntitlementGate>
                    </div>

                    <div className="bg-black/50 border border-gray-700 rounded-lg p-4">
                      <h4 className="font-medium mb-4">Test Results</h4>
                      {testResults ? (
                        <div className="space-y-4">
                          <div className="flex items-center gap-2 text-sm text-gray-400">
                            <CheckCircle className="w-4 h-4 text-green-400" />
                            {testResults.type === "live" ? "Live GPT Test" : "Simulation Test"} completed
                          </div>
                          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                            <div className="text-center">
                              <div className="text-2xl font-bold text-yellow-400">{testResults.scores.structure}</div>
                              <div className="text-sm text-gray-400">Structure</div>
                            </div>
                            <div className="text-center">
                              <div className="text-2xl font-bold text-yellow-400">{testResults.scores.clarity}</div>
                              <div className="text-sm text-gray-400">Clarity</div>
                            </div>
                            <div className="text-center">
                              <div className="text-2xl font-bold text-yellow-400">
                                {testResults.scores.kpi_compliance}
                              </div>
                              <div className="text-sm text-gray-400">KPI Compliance</div>
                            </div>
                            <div className="text-center">
                              <div className="text-2xl font-bold text-yellow-400">
                                {testResults.scores.executability}
                              </div>
                              <div className="text-sm text-gray-400">Executability</div>
                            </div>
                          </div>
                        </div>
                      ) : (
                        <div className="text-center py-8 text-gray-400">
                          <AlertCircle className="w-8 h-8 mx-auto mb-2 opacity-50" />
                          <p>No test results yet</p>
                          <p className="text-sm">Generate a prompt and run a test to see results</p>
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="history">
                <Card className="glass-card">
                  <CardHeader>
                    <CardTitle className="font-serif">Generation History</CardTitle>
                    <CardDescription>View and manage your previous prompt generations</CardDescription>
                  </CardHeader>
                  <CardContent>
                    {history.length > 0 ? (
                      <div className="space-y-4">
                        {history.map((prompt) => (
                          <Card key={prompt.id} className="bg-black/30 border-gray-700">
                            <CardContent className="p-4">
                              <div className="flex items-center justify-between mb-2">
                                <div className="flex items-center gap-2">
                                  <Badge variant="outline" className="text-xs">
                                    {prompt.module}
                                  </Badge>
                                  <span className="text-sm text-gray-400">#{prompt.hash}</span>
                                </div>
                                <span className="text-xs text-gray-400">
                                  {new Date(prompt.timestamp).toLocaleString()}
                                </span>
                              </div>
                              <p className="text-sm text-gray-300 line-clamp-2 mb-2">
                                {prompt.content.substring(0, 150)}...
                              </p>
                              <div className="flex gap-2">
                                <Button variant="outline" size="sm" onClick={() => setGeneratedPrompt(prompt)}>
                                  Load
                                </Button>
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() => navigator.clipboard.writeText(prompt.content)}
                                >
                                  <Copy className="w-3 h-3" />
                                </Button>
                              </div>
                            </CardContent>
                          </Card>
                        ))}
                      </div>
                    ) : (
                      <div className="text-center py-12 text-gray-400">
                        <History className="w-12 h-12 mx-auto mb-4 opacity-50" />
                        <p>No generation history yet</p>
                        <p className="text-sm">Start generating prompts to see your history here</p>
                      </div>
                    )}
                  </CardContent>
                </Card>
              </TabsContent>
            </Tabs>
          </div>
        </div>
      </div>
    </div>
  )
}
