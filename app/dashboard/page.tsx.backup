'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { KPICard } from '@/components/dashboard/KPICard';
import { TrendChart } from '@/components/dashboard/TrendChart';
import { SLAAlerts } from '@/components/dashboard/SLAAlerts';
import { PerformanceInsights } from '@/components/dashboard/PerformanceInsights';
import { RunHistory } from '@/components/dashboard/RunHistory';
import { useAuth } from '@/hooks/use-auth';
import { useEntitlements } from '@/hooks/use-entitlements';

interface KPIMetrics {
  pass_rate_pct: number;
  sla_efficient_pct: number;
  p95_score: number;
  p95_tta: number;
  total_runs: number;
  successful_runs: number;
  efficient_runs: number;
  avg_score: number;
  avg_tta: number;
}

interface TrendData {
  dates: string[];
  passRates: number[];
  avgScores: number[];
  avgTTAs: number[];
  runCounts: number[];
}

interface SLAAlert {
  type: 'warning' | 'critical';
  message: string;
  metric: string;
  current: number;
  threshold: number;
}

interface PerformanceInsight {
  type: 'performance' | 'quality' | 'efficiency';
  title: string;
  description: string;
  impact: 'low' | 'medium' | 'high';
  recommendation: string;
}

export default function DashboardPage() {
  const { user, accessToken } = useAuth();
  const { entitlements } = useEntitlements();
  const orgId = user?.id; // Use user ID as orgId for now
  const [metrics, setMetrics] = useState<KPIMetrics | null>(null);
  const [trends, setTrends] = useState<TrendData | null>(null);
  const [alerts, setAlerts] = useState<SLAAlert[]>([]);
  const [insights, setInsights] = useState<PerformanceInsight[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (!orgId || !accessToken) return;
    
    const fetchDashboardData = async () => {
      try {
        setLoading(true);
        
        const headers = {
          'Authorization': `Bearer ${accessToken}`
        };
        
        // Fetch KPI metrics
        const metricsResponse = await fetch(`/api/dashboard/metrics?orgId=${orgId}`, { headers });
        if (metricsResponse.ok) {
          const metricsData = await metricsResponse.json();
          setMetrics(metricsData);
        }
        
        // Fetch trend data
        const trendsResponse = await fetch(`/api/dashboard/trends?orgId=${orgId}`, { headers });
        if (trendsResponse.ok) {
          const trendsData = await trendsResponse.json();
          setTrends(trendsData.trends);
        }
        
        // Fetch SLA alerts
        const alertsResponse = await fetch(`/api/dashboard/alerts?orgId=${orgId}`, { headers });
        if (alertsResponse.ok) {
          const alertsData = await alertsResponse.json();
          setAlerts(alertsData.alerts || []);
        }
        
        // Fetch performance insights
        const insightsResponse = await fetch(`/api/dashboard/insights?orgId=${orgId}`, { headers });
        if (insightsResponse.ok) {
          const insightsData = await insightsResponse.json();
          setInsights(insightsData.insights || []);
        }
        
      } catch (err) {
        setError('Failed to fetch dashboard data');
        console.error('Dashboard data fetch error:', err);
      } finally {
        setLoading(false);
      }
    };

    fetchDashboardData();
    
    // Refresh data every 5 minutes
    const interval = setInterval(fetchDashboardData, 5 * 60 * 1000);
    return () => clearInterval(interval);
  }, [orgId, accessToken]);

  // Show loading state while checking authentication
  if (!user || !accessToken) {
    return (
      <div className="container mx-auto p-6">
        <Alert>
          <AlertTitle>Authentication Required</AlertTitle>
          <AlertDescription>Please log in to access the dashboard.</AlertDescription>
        </Alert>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="container mx-auto p-6">
        <div className="flex items-center justify-center h-64">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-primary"></div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container mx-auto p-6">
        <Alert variant="destructive">
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      </div>
    );
  }

  if (!metrics) {
    return (
      <div className="container mx-auto p-6">
        <Alert>
          <AlertTitle>No Data Available</AlertTitle>
          <AlertDescription>No metrics data found for your organization.</AlertDescription>
        </Alert>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Performance Dashboard</h1>
          <p className="text-muted-foreground">
            Monitor KPIs, SLAs, and performance metrics for your organization
          </p>
        </div>
        <div className="flex items-center space-x-2">
          <Badge variant="outline">Last 7 Days</Badge>
          <Badge variant="secondary">Auto-refresh: 5min</Badge>
        </div>
      </div>

      {/* SLA Alerts */}
      {alerts.length > 0 && (
        <SLAAlerts alerts={alerts} />
      )}

      {/* KPI Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <KPICard
          title="Pass Rate"
          value={`${metrics.pass_rate_pct}%`}
          description="Successful runs"
          status={metrics.pass_rate_pct >= 99 ? 'success' : metrics.pass_rate_pct >= 90 ? 'warning' : 'error'}
          trend={trends ? trends.passRates : []}
        />
        <KPICard
          title="Efficient Response"
          value={`${metrics.sla_efficient_pct}%`}
          description="≤60s TTA"
          status={metrics.sla_efficient_pct >= 80 ? 'success' : metrics.sla_efficient_pct >= 60 ? 'warning' : 'error'}
          trend={trends ? trends.avgTTAs.map(t => t <= 60 ? 100 : 0) : []}
        />
        <KPICard
          title="P95 Score"
          value={metrics.p95_score.toString()}
          description="Quality threshold"
          status={metrics.p95_score >= 80 ? 'success' : metrics.p95_score >= 70 ? 'warning' : 'error'}
          trend={trends ? trends.avgScores : []}
        />
        <KPICard
          title="P95 TTA"
          value={`${metrics.p95_tta}s`}
          description="Response time"
          status={metrics.p95_tta <= 120 ? 'success' : metrics.p95_tta <= 180 ? 'warning' : 'error'}
          trend={trends ? trends.avgTTAs : []}
        />
      </div>

      {/* Detailed Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Total Runs</CardTitle>
            <CardDescription>Last 7 days</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold">{metrics.total_runs}</div>
            <div className="text-sm text-muted-foreground">
              {metrics.successful_runs} successful, {metrics.total_runs - metrics.successful_runs} failed
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader>
            <CardTitle>Average Score</CardTitle>
            <CardDescription>Overall quality</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold">{metrics.avg_score}</div>
            <div className="text-sm text-muted-foreground">
              Target: ≥80
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader>
            <CardTitle>Average TTA</CardTitle>
            <CardDescription>Response time</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold">{metrics.avg_tta}s</div>
            <div className="text-sm text-muted-foreground">
              Target: ≤60s
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Charts and Insights */}
      <Tabs defaultValue="trends" className="space-y-6">
        <TabsList>
          <TabsTrigger value="trends">Trends</TabsTrigger>
          <TabsTrigger value="insights">Insights</TabsTrigger>
          <TabsTrigger value="details">Details</TabsTrigger>
          <TabsTrigger value="history">Run History</TabsTrigger>
        </TabsList>
        
        <TabsContent value="trends" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Pass Rate Trend</CardTitle>
                <CardDescription>Daily success rate over time</CardDescription>
              </CardHeader>
              <CardContent>
                {trends && (
                  <TrendChart
                    data={trends.passRates}
                    labels={trends.dates}
                    title="Pass Rate (%)"
                    color="green"
                  />
                )}
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader>
                <CardTitle>Response Time Trend</CardTitle>
                <CardDescription>Daily average TTA</CardDescription>
              </CardHeader>
              <CardContent>
                {trends && (
                  <TrendChart
                    data={trends.avgTTAs}
                    labels={trends.dates}
                    title="Average TTA (seconds)"
                    color="blue"
                  />
                )}
              </CardContent>
            </Card>
          </div>
          
          <Card>
            <CardHeader>
              <CardTitle>Run Volume</CardTitle>
              <CardDescription>Daily execution count</CardDescription>
            </CardHeader>
            <CardContent>
              {trends && (
                <TrendChart
                  data={trends.runCounts}
                  labels={trends.dates}
                  title="Number of Runs"
                  color="purple"
                />
              )}
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="insights" className="space-y-6">
          <PerformanceInsights insights={insights} />
        </TabsContent>
        
        <TabsContent value="details" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Performance Breakdown</CardTitle>
              <CardDescription>Detailed metrics analysis</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex justify-between items-center">
                  <span>Total Runs</span>
                  <Badge variant="outline">{metrics.total_runs}</Badge>
                </div>
                <div className="flex justify-between items-center">
                  <span>Successful Runs</span>
                  <Badge variant="default" className="bg-green-600 text-white">{metrics.successful_runs}</Badge>
                </div>
                <div className="flex justify-between items-center">
                                  <span>Efficient Responses (≤60s)</span>
                <Badge variant="default" className="bg-yellow-600 text-white">{metrics.efficient_runs}</Badge>
                </div>
                <div className="flex justify-between items-center">
                  <span>Pass Rate</span>
                  <Badge variant="default" className={metrics.pass_rate_pct >= 99 ? 'bg-green-600 text-white' : 'bg-yellow-600 text-white'}>
                    {metrics.pass_rate_pct}%
                  </Badge>
                </div>
                <div className="flex justify-between items-center">
                  <span>P95 Score</span>
                  <Badge variant="default" className={metrics.p95_score >= 80 ? 'bg-green-600 text-white' : 'bg-yellow-600 text-white'}>
                    {metrics.p95_score}
                  </Badge>
                </div>
                <div className="flex justify-between items-center">
                  <span>P95 TTA</span>
                  <Badge variant="default" className={metrics.p95_tta <= 120 ? 'bg-green-600 text-white' : 'bg-yellow-600 text-white'}>
                    {metrics.p95_tta}s
                  </Badge>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="history" className="space-y-6">
          {orgId && <RunHistory orgId={orgId} />}
        </TabsContent>
      </Tabs>
    </div>
  );
}
