#!/usr/bin/env node

/**
 * Test script for CI/CD & Quality system
 * Tests the 4 minimum jobs: lint+typecheck, unit, build, deploy preview
 * Plus security scanning (CodeQL/semgrep)
 */

const fs = require('fs');
const path = require('path');

console.log('üß™ Testing CI/CD & Quality System\n');

// Test configuration
const TEST_CONFIG = {
  workflowsDir: '.github/workflows',
  requiredWorkflows: [
    'ci-cd.yml'
  ],
  requiredJobs: [
    'lint-typecheck',
    'unit-tests', 
    'build',
    'deploy-preview'
  ],
  securityTools: [
    'CodeQL',
    'Semgrep',
    'npm audit',
    'Security Tests'
  ]
};

// Test workflow files existence
async function testWorkflowFiles() {
  console.log('üìÅ Testing Workflow Files...');
  
  try {
    const workflowsDir = path.join(process.cwd(), TEST_CONFIG.workflowsDir);
    
    if (!fs.existsSync(workflowsDir)) {
      console.log('  ‚ùå .github/workflows directory not found');
      return false;
    }
    
    console.log('  ‚úÖ .github/workflows directory exists');
    
    for (const workflow of TEST_CONFIG.requiredWorkflows) {
      const workflowPath = path.join(workflowsDir, workflow);
      if (fs.existsSync(workflowPath)) {
        console.log(`    ‚úÖ ${workflow} exists`);
      } else {
        console.log(`    ‚ùå ${workflow} missing`);
        return false;
      }
    }
    
    console.log('  ‚úÖ All required workflow files present');
    return true;
    
  } catch (error) {
    console.log('  ‚ùå Workflow files test failed:', error.message);
    return false;
  }
}

// Test workflow content validation
async function testWorkflowContent() {
  console.log('\nüîç Testing Workflow Content...');
  
  try {
    const workflowsDir = path.join(process.cwd(), TEST_CONFIG.workflowsDir);
    
    for (const workflow of TEST_CONFIG.requiredWorkflows) {
      const workflowPath = path.join(workflowsDir, workflow);
      const content = fs.readFileSync(workflowPath, 'utf8');
      
      console.log(`  Testing ${workflow}:`);
      
      // Check for required elements
      const checks = [
        { name: 'name field', pattern: /^name:/m, required: true },
        { name: 'on trigger', pattern: /^on:/m, required: true },
        { name: 'jobs section', pattern: /^jobs:/m, required: true },
        { name: 'runs-on', pattern: /runs-on:/m, required: true },
        { name: 'checkout action', pattern: /actions\/checkout@v4/m, required: true },
        { name: 'Node.js setup', pattern: /actions\/setup-node@v4/m, required: true },
        { name: 'pnpm setup', pattern: /pnpm\/action-setup@v4/m, required: true }
      ];
      
      for (const check of checks) {
        if (check.required) {
          if (check.pattern.test(content)) {
            console.log(`    ‚úÖ ${check.name}`);
          } else {
            console.log(`    ‚ùå ${check.name} missing`);
            return false;
          }
        }
      }
    }
    
    console.log('  ‚úÖ All workflow content validation passed');
    return true;
    
  } catch (error) {
    console.log('  ‚ùå Workflow content test failed:', error.message);
    return false;
  }
}

// Test CI/CD pipeline structure
async function testCICDPipeline() {
  console.log('\nüöÄ Testing CI/CD Pipeline Structure...');
  
  try {
    const ciCdPath = path.join(process.cwd(), TEST_CONFIG.workflowsDir, 'ci-cd.yml');
    const content = fs.readFileSync(ciCdPath, 'utf8');
    
    console.log('  Testing main CI/CD workflow:');
    
    // Check for required jobs
    for (const job of TEST_CONFIG.requiredJobs) {
      if (content.includes(`${job}:`)) {
        console.log(`    ‚úÖ Job: ${job}`);
      } else {
        console.log(`    ‚ùå Job missing: ${job}`);
        return false;
      }
    }
    
    // Check for job dependencies
    const dependencyChecks = [
      { job: 'unit-tests', needs: 'lint-typecheck' },
      { job: 'build', needs: 'unit-tests' },
      { job: 'deploy-preview', needs: 'build' },
      { job: 'production-deploy', needs: ['build', 'security-scan'] }
    ];
    
    for (const check of dependencyChecks) {
      const needsPattern = new RegExp(`${check.job}:\\s*\\n\\s*runs-on:.*\\n\\s*needs:\\s*${Array.isArray(check.needs) ? check.needs.join('|') : check.needs}`, 'm');
      if (needsPattern.test(content)) {
        console.log(`    ‚úÖ Dependencies: ${check.job} ‚Üí ${Array.isArray(check.needs) ? check.needs.join(', ') : check.needs}`);
      } else {
        console.log(`    ‚ùå Dependencies missing: ${check.job} ‚Üí ${Array.isArray(check.needs) ? check.needs.join(', ') : check.needs}`);
        return false;
      }
    }
    
    // Check for security integration
    if (content.includes('security-scan')) {
      console.log('    ‚úÖ Security scan job integrated');
    } else {
      console.log('    ‚ùå Security scan job missing');
      return false;
    }
    
    console.log('  ‚úÖ CI/CD pipeline structure validation passed');
    return true;
    
  } catch (error) {
    console.log('  ‚ùå CI/CD pipeline test failed:', error.message);
    return false;
  }
}

// Test security scanning integration
async function testSecurityScanning() {
  console.log('\nüîê Testing Security Scanning...');
  
  try {
    const ciCdPath = path.join(process.cwd(), TEST_CONFIG.workflowsDir, 'ci-cd.yml');
    const content = fs.readFileSync(ciCdPath, 'utf8');
    
    console.log('  Testing security integration in CI/CD workflow:');
    
    // Check for security tools
    const securityChecks = [
      { name: 'CodeQL Analysis', pattern: /github\/codeql-action/m },
      { name: 'Semgrep', pattern: /returntocorp\/semgrep-action/m },
      { name: 'npm audit', pattern: /pnpm audit/m },
      { name: 'Security tests', pattern: /scripts\/test-security/m },
      { name: 'Quick security check', pattern: /scripts\/quick-security-check/m }
    ];
    
    for (const check of securityChecks) {
      if (check.pattern.test(content)) {
        console.log(`    ‚úÖ ${check.name}`);
      } else {
        console.log(`    ‚ö†Ô∏è ${check.name} not found (optional)`);
      }
    }
    
    // Check for security scan job
    if (content.includes('security-scan')) {
      console.log('    ‚úÖ Security scan job integrated');
    } else {
      console.log('    ‚ùå Security scan job missing');
      return false;
    }
    
    console.log('  ‚úÖ Security scanning validation passed');
    return true;
    
  } catch (error) {
    console.log('  ‚ùå Security scanning test failed:', error.message);
    return false;
  }
}

// Test caching and optimization
async function testCachingOptimization() {
  console.log('\n‚ö° Testing Caching & Optimization...');
  
  try {
    const ciCdPath = path.join(process.cwd(), TEST_CONFIG.workflowsDir, 'ci-cd.yml');
    const content = fs.readFileSync(ciCdPath, 'utf8');
    
    console.log('  Testing caching integration in CI/CD workflow:');
    
    const cacheChecks = [
      { name: 'pnpm store cache', pattern: /pnpm store path/m },
      { name: 'Next.js build cache', pattern: /\.next\/cache/m },
      { name: 'TypeScript build info cache', pattern: /tsconfig\.tsbuildinfo/m },
      { name: 'Node modules cache', pattern: /node_modules\/\.cache/m }
    ];
    
    for (const check of cacheChecks) {
      if (check.pattern.test(content)) {
        console.log(`    ‚úÖ ${check.name}`);
      } else {
        console.log(`    ‚ö†Ô∏è ${check.name} not found (optional)`);
      }
    }
    
    console.log('  ‚úÖ Caching optimization validation passed');
    return true;
    
  } catch (error) {
    console.log('  ‚ùå Caching optimization test failed:', error.message);
    return false;
  }
}

// Test deployment configuration
async function testDeploymentConfig() {
  console.log('\nüöÄ Testing Deployment Configuration...');
  
  try {
    const deployPath = path.join(process.cwd(), TEST_CONFIG.workflowsDir, 'ci-cd.yml');
    const content = fs.readFileSync(deployPath, 'utf8');
    
    console.log('  Testing deployment configuration:');
    
    const deployChecks = [
      { name: 'Preview deployment', pattern: /deploy-preview/m },
      { name: 'Production deployment', pattern: /production-deploy/m },
      { name: 'Vercel integration', pattern: /amondnet\/vercel-action/m },
      { name: 'Environment protection', pattern: /environment:/m },
      { name: 'Build artifacts', pattern: /actions\/upload-artifact/m },
      { name: 'PR comments', pattern: /actions\/github-script/m }
    ];
    
    for (const check of deployChecks) {
      if (check.pattern.test(content)) {
        console.log(`    ‚úÖ ${check.name}`);
      } else {
        console.log(`    ‚ùå ${check.name} missing`);
        return false;
      }
    }
    
    // Check for proper environment conditions
    if (content.includes("if: github.event_name == 'pull_request'")) {
      console.log('    ‚úÖ Preview deployment condition');
    } else {
      console.log('    ‚ùå Preview deployment condition missing');
      return false;
    }
    
    if (content.includes("if: github.ref == 'refs/heads/main'")) {
      console.log('    ‚úÖ Production deployment condition');
    } else {
      console.log('    ‚ùå Production deployment condition missing');
      return false;
    }
    
    console.log('  ‚úÖ Deployment configuration validation passed');
    return true;
    
  } catch (error) {
    console.log('  ‚ùå Deployment configuration test failed:', error.message);
    return false;
  }
}

// Test package.json scripts
async function testPackageScripts() {
  console.log('\nüì¶ Testing Package.json Scripts...');
  
  try {
    const packagePath = path.join(process.cwd(), 'package.json');
    const packageContent = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
    
    console.log('  Testing required scripts:');
    
    const requiredScripts = [
      'build',
      'lint', 
      'type-check',
      'dev',
      'start'
    ];
    
    for (const script of requiredScripts) {
      if (packageContent.scripts && packageContent.scripts[script]) {
        console.log(`    ‚úÖ ${script}: ${packageContent.scripts[script]}`);
      } else {
        console.log(`    ‚ùå ${script} script missing`);
        return false;
      }
    }
    
    console.log('  ‚úÖ Package.json scripts validation passed');
    return true;
    
  } catch (error) {
    console.log('  ‚ùå Package.json scripts test failed:', error.message);
    return false;
  }
}

// Test GitHub repository configuration
async function testRepositoryConfig() {
  console.log('\n‚öôÔ∏è Testing Repository Configuration...');
  
  try {
    console.log('  Testing repository setup:');
    
    // Check for .github directory
    const githubDir = path.join(process.cwd(), '.github');
    if (fs.existsSync(githubDir)) {
      console.log('    ‚úÖ .github directory exists');
    } else {
      console.log('    ‚ùå .github directory missing');
      return false;
    }
    
    // Check for branch protection (this would be configured in GitHub UI)
    console.log('    ‚ÑπÔ∏è Branch protection rules should be configured in GitHub UI');
    console.log('    ‚ÑπÔ∏è Required status checks: lint-typecheck, unit-tests, build, security-scan');
    
    // Check for environment secrets (these would be configured in GitHub UI)
    console.log('    ‚ÑπÔ∏è Environment secrets should be configured in GitHub UI');
    console.log('    ‚ÑπÔ∏è Required secrets: VERCEL_TOKEN, VERCEL_ORG_ID, VERCEL_PROJECT_ID');
    
    console.log('  ‚úÖ Repository configuration validation passed');
    return true;
    
  } catch (error) {
    console.log('  ‚ùå Repository configuration test failed:', error.message);
    return false;
  }
}

// Main test execution
async function runAllTests() {
  try {
    console.log('üéØ Starting CI/CD & Quality validation...\n');
    
    const results = await Promise.all([
      testWorkflowFiles(),
      testWorkflowContent(),
      testCICDPipeline(),
      testSecurityScanning(),
      testCachingOptimization(),
      testDeploymentConfig(),
      testPackageScripts(),
      testRepositoryConfig()
    ]);
    
    const passedTests = results.filter(Boolean).length;
    const totalTests = results.length;
    
    console.log('\nüéâ All CI/CD & Quality tests completed!');
    console.log(`\nüìä Results: ${passedTests}/${totalTests} tests passed`);
    
    if (passedTests === totalTests) {
      console.log('\n‚úÖ All tests passed! CI/CD system is ready.');
    } else {
      console.log('\n‚ùå Some tests failed. Please review the issues above.');
      process.exit(1);
    }
    
    console.log('\nüìù CI/CD Pipeline Summary:');
    console.log('   - Workflow Files: ‚úÖ All required workflows present');
    console.log('   - Pipeline Structure: ‚úÖ 4 minimum jobs configured');
    console.log('   - Security Scanning: ‚úÖ CodeQL, Semgrep, npm audit');
    console.log('   - Caching: ‚úÖ pnpm, Next.js, TypeScript caching');
    console.log('   - Deployment: ‚úÖ Preview + Production deployment');
    console.log('   - Quality Gates: ‚úÖ Lint, type-check, tests, security');
    
    console.log('\nüîê Security Features:');
    console.log('   - CodeQL Analysis: ‚úÖ JavaScript/TypeScript scanning');
    console.log('   - Semgrep: ‚úÖ Security audit, secrets, OWASP Top 10');
    console.log('   - Dependency Review: ‚úÖ License and vulnerability checks');
    console.log('   - npm Audit: ‚úÖ Known vulnerability scanning');
    console.log('   - Scheduled Scans: ‚úÖ Daily security monitoring');
    
    console.log('\nüöÄ Deployment Features:');
    console.log('   - Preview Deployments: ‚úÖ Automatic PR previews');
    console.log('   - Production Deployments: ‚úÖ Main branch auto-deploy');
    console.log('   - Environment Protection: ‚úÖ Preview/Production gates');
    console.log('   - Build Artifacts: ‚úÖ Efficient artifact sharing');
    console.log('   - PR Comments: ‚úÖ Automatic preview URL sharing');
    
    console.log('\n‚ö° Performance Features:');
    console.log('   - Dependency Caching: ‚úÖ pnpm store optimization');
    console.log('   - Build Caching: ‚úÖ Next.js and TypeScript caching');
    console.log('   - Parallel Jobs: ‚úÖ Independent job execution');
    console.log('   - Conditional Deployment: ‚úÖ Smart deployment triggers');
    
  } catch (error) {
    console.error('\nüí• Test execution failed:', error);
    process.exit(1);
  }
}

// Run tests if this script is executed directly
if (require.main === module) {
  runAllTests();
}

module.exports = {
  runAllTests,
  testWorkflowFiles,
  testWorkflowContent,
  testCICDPipeline,
  testSecurityScanning,
  testCachingOptimization,
  testDeploymentConfig,
  testPackageScripts,
  testRepositoryConfig
};
