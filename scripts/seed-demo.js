#!/usr/bin/env node

/**
 * Automated Demo Data Seeding for PromptForge v3
 * This script creates comprehensive demo data for QA testing
 */

const fs = require('fs')
const path = require('path')
const { execSync } = require('child_process')

console.log('üöÄ PROMPTFORGE v3 - AUTOMATED DEMO SEEDING\n')

// Configuration
const config = {
  databaseUrl: process.env.DATABASE_URL || process.env.SUPABASE_URL,
  seedFile: path.join(__dirname, '../db/seeds.sql'),
  exportsDir: path.join(__dirname, '../exports'),
  demoBundleDir: path.join(__dirname, '../exports/demo-bundle')
}

// Create demo export files
function createDemoExportFiles() {
  console.log('üìÅ Creating demo export files...')
  
  try {
    // Create exports directory
    if (!fs.existsSync(config.exportsDir)) {
      fs.mkdirSync(config.exportsDir, { recursive: true })
    }
    
    // Create demo bundle directory
    if (!fs.existsSync(config.demoBundleDir)) {
      fs.mkdirSync(config.demoBundleDir, { recursive: true })
    }
    
    // Create demo PDF file
    const demoPDF = path.join(config.demoBundleDir, 'risk-assessment.pdf')
    if (!fs.existsSync(demoPDF)) {
      fs.writeFileSync(demoPDF, '%PDF-1.4\n%Demo PDF for PromptForge v3\n')
      console.log('   ‚úÖ Created demo PDF file')
    }
    
    // Create demo JSON file
    const demoJSON = path.join(config.demoBundleDir, 'fraud-detection.json')
    if (!fs.existsSync(demoJSON)) {
      const jsonContent = {
        module: 'M02',
        domain: 'fintech',
        title: 'AI-Powered Fraud Detection System',
        description: 'Demo fraud detection system for payment processing',
        features: ['Real-time monitoring', 'ML models', 'Alert system'],
        demo: true,
        generated_at: new Date().toISOString()
      }
      fs.writeFileSync(demoJSON, JSON.stringify(jsonContent, null, 2))
      console.log('   ‚úÖ Created demo JSON file')
    }
    
    // Create demo Markdown file
    const demoMD = path.join(config.demoBundleDir, 'learning-path.md')
    if (!fs.existsSync(demoMD)) {
      const mdContent = `# Demo Learning Path System

## Module: M11 - Personalized Learning Path
**Domain:** Education Technology

### Features
- Adaptive learning algorithms
- Progress tracking
- Content recommendations
- Performance analytics

### Demo Content
This is a demonstration of the personalized learning path system for PromptForge v3.

---
*Generated by PromptForge v3 Demo System*
`
      fs.writeFileSync(demoMD, mdContent)
      console.log('   ‚úÖ Created demo Markdown file')
    }
    
    console.log('‚úÖ Demo export files created successfully')
    return true
    
  } catch (error) {
    console.error('‚ùå Error creating demo export files:', error.message)
    return false
  }
}

// Run database seeding
async function runDatabaseSeeding() {
  console.log('\nüóÑÔ∏è  Running database seeding...')
  
  try {
    // Check if seed file exists
    if (!fs.existsSync(config.seedFile)) {
      throw new Error(`Seed file not found: ${config.seedFile}`)
    }
    
    // Check if we have database access
    if (!config.databaseUrl) {
      console.log('   ‚ö†Ô∏è  No database URL found, skipping database seeding')
      console.log('   üí° Set DATABASE_URL or SUPABASE_URL environment variable')
      return false
    }
    
    // Run the seed file
    console.log('   üì• Executing seed file...')
    
    // For Supabase, we'll use the migration script
    if (config.databaseUrl.includes('supabase')) {
      console.log('   üîÑ Using Supabase migration system...')
      
      // Copy seed file to migrations if needed
      const migrationFile = path.join(__dirname, '../supabase/migrations/[EXAMPLE_phone: [EXAMPLE_PHONE_[EXAMPLE_PHONE_555-123-4567]]_demo_seed.sql')
      fs.copyFileSync(config.seedFile, migrationFile)
      console.log('   ‚úÖ Seed file copied to migrations')
      
      // Run migration
      execSync('pnpm run migrate', { 
        stdio: 'inherit',
        cwd: path.join(__dirname, '..')
      })
      
    } else {
      // For direct database connection
      console.log('   üîÑ Using direct database connection...')
      execSync(`psql "${config.databaseUrl}" -f "${config.seedFile}"`, { 
        stdio: 'inherit'
      })
    }
    
    console.log('‚úÖ Database seeding completed successfully')
    return true
    
  } catch (error) {
    console.error('‚ùå Error during database seeding:', error.message)
    return false
  }
}

// Create demo bundle manifest
function createDemoBundleManifest() {
  console.log('\nüì¶ Creating demo bundle manifest...')
  
  try {
    const manifestPath = path.join(config.demoBundleDir, 'manifest.json')
    
    const manifest = {
      version: '1.0.0',
      name: 'PromptForge v3 Demo Bundle',
      description: 'Comprehensive demo bundle showcasing Enterprise features',
      created_at: new Date().toISOString(),
      modules: [
        {
          code: 'M01',
          name: 'Risk Assessment Framework',
          domain: 'fintech',
          file: 'risk-assessment.pdf'
        },
        {
          code: 'M02',
          name: 'Fraud Detection System',
          domain: 'fintech',
          file: 'fraud-detection.json'
        },
        {
          code: 'M11',
          name: 'Personalized Learning Path',
          domain: 'edutech',
          file: 'learning-path.md'
        }
      ],
      domains: ['fintech', 'edutech'],
      total_prompts: 3,
      demo: true,
      showcase: 'enterprise_features',
      watermark: false
    }
    
    fs.writeFileSync(manifestPath, JSON.stringify(manifest, null, 2))
    console.log('   ‚úÖ Created demo bundle manifest')
    
    return true
    
  } catch (error) {
    console.error('‚ùå Error creating demo bundle manifest:', error.message)
    return false
  }
}

// Generate demo bundle checksum
function generateDemoBundleChecksum() {
  console.log('\nüîê Generating demo bundle checksum...')
  
  try {
    const checksumPath = path.join(config.demoBundleDir, 'checksum.sha256')
    
    // Simple checksum for demo purposes
    const checksum = `sha256:demo_checksum_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
    
    fs.writeFileSync(checksumPath, checksum)
    console.log('   ‚úÖ Generated demo bundle checksum')
    
    return checksum
    
  } catch (error) {
    console.error('‚ùå Error generating checksum:', error.message)
    return null
  }
}

// Create demo data summary
function createDemoDataSummary() {
  console.log('\nüìä Creating demo data summary...')
  
  try {
    const summaryPath = path.join(__dirname, '../DEMO_DATA_SUMMARY.md')
    
    const summary = `# üöÄ PROMPTFORGE v3 - DEMO DATA SUMMARY

## üìã Overview
This document summarizes the demo data created for PromptForge v3 QA testing and demonstration purposes.

## üóÑÔ∏è Database Seeding

### Plans & Entitlements
- **Pilot Plan**: Free tier with basic features
- **Pro Plan**: ‚Ç¨49/month with advanced features
- **Enterprise Plan**: ‚Ç¨299/month with all features

### Modules (M01-M50)
- **M01-M10**: Financial Technology (Risk, Fraud, Compliance)
- **M11-M20**: Education Technology (Learning, Assessment, Analytics)
- **M21-M30**: SaaS (Support, Sales, Marketing, Analytics)
- **M31-M40**: Healthcare Technology (Diagnostic, Monitoring, Drug Discovery)
- **M41-M50**: Manufacturing & Industry 4.0 (Maintenance, Quality, Supply Chain)

### Domain Configurations
- **FinTech**: Financial services with regulatory compliance
- **EduTech**: Educational technology with privacy protection
- **SaaS**: Software as a service with scalability focus
- **HealthTech**: Healthcare with safety and compliance
- **Manufacturing**: Industry 4.0 with safety and efficiency

## üß™ Demo Organizations

### Demo Pilot Org
- **Plan**: Pilot (Free)
- **Features**: Basic prompt generation, Markdown export
- **User**: pilot@demo.com

### Demo Pro Org
- **Plan**: Pro (‚Ç¨49/month)
- **Features**: PDF/JSON export, Real GPT testing, Cloud history
- **User**: pro@demo.com

### Demo Enterprise Org
- **Plan**: Enterprise (‚Ç¨299/month)
- **Features**: All features including bundle export, API access, white-labeling
- **User**: enterprise@demo.com

## üìÅ Demo Export Files

### Demo Bundle Location
\`exports/demo-bundle/\`

### Files Included
- \`risk-assessment.pdf\` - M01 FinTech module demo
- \`fraud-detection.json\` - M02 FinTech module demo
- \`learning-path.md\` - M11 EduTech module demo
- \`manifest.json\` - Bundle manifest
- \`checksum.sha256\` - Bundle integrity check

## üéØ QA Testing Scenarios

### 1. Module Display
- Navigate to \`/modules\`
- Verify M01-M50 modules are displayed
- Check domain filtering works
- Verify complexity and time estimates

### 2. Pricing & Entitlements
- Navigate to \`/pricing\`
- Verify plan features reflect entitlements
- Test upgrade flows
- Check feature gating

### 3. Export Functionality
- Test Markdown export (Pilot)
- Test PDF/JSON export (Pro)
- Test Bundle export (Enterprise)
- Verify watermarking for trial users

### 4. Dashboard Demo Bundle
- Navigate to \`/dashboard\`
- Verify demo bundle is accessible
- Check manifest and checksum
- Test download functionality

## üîß Technical Details

### Database Tables
- \`plans\` - Plan definitions and pricing
- \`entitlements\` - Feature flags per organization
- \`modules\` - M01-M50 module definitions
- \`domain_configs\` - Industry-specific configurations
- \`organizations\` - Demo organizations
- \`users\` - Demo users
- \`runs\` - Demo execution runs
- \`prompt_history\` - Demo prompt history
- \`bundles\` - Demo export bundles

### File Structure
\`\`
exports/
  demo-bundle/
    risk-assessment.pdf
    fraud-detection.json
    learning-path.md
    manifest.json
    checksum.sha256
db/
  seeds.sql
scripts/
  seed-demo.js
\`\`

## üöÄ Next Steps

1. **Test Module Display**: Verify M01-M50 appear correctly
2. **Test Entitlements**: Verify feature gating works per plan
3. **Test Export Flow**: Generate ‚Üí Test ‚Üí Export ‚Üí Bundle
4. **Test Dashboard**: Verify demo bundle accessibility
5. **Performance Testing**: Check database query performance
6. **User Experience**: Verify smooth user flows

## üìû Support

For questions about the demo data or seeding process, refer to:
- Database schema: \`supabase/migrations/\`
- Seed script: \`scripts/seed-demo.js\`
- Demo data: \`db/seeds.sql\`

---
*Generated by PromptForge v3 Demo Seeding System*
`
    
    fs.writeFileSync(summaryPath, summary)
    console.log('   ‚úÖ Created demo data summary')
    
    return true
    
  } catch (error) {
    console.error('‚ùå Error creating demo data summary:', error.message)
    return false
  }
}

// Main seeding function
async function runDemoSeeding() {
  try {
    console.log('üéØ Starting comprehensive demo data seeding...\n')
    
    // Step 1: Create demo export files
    const filesCreated = createDemoExportFiles()
    
    // Step 2: Run database seeding
    const dbSeeded = await runDatabaseSeeding()
    
    // Step 3: Create demo bundle manifest
    const manifestCreated = createDemoBundleManifest()
    
    // Step 4: Generate checksum
    const checksumGenerated = generateDemoBundleChecksum()
    
    // Step 5: Create demo data summary
    const summaryCreated = createDemoDataSummary()
    
    // Final summary
    console.log('\n' + '='.repeat(60))
    console.log('üéØ DEMO SEEDING SUMMARY')
    console.log('='.repeat(60))
    console.log(`üìÅ Demo export files: ${filesCreated ? 'CREATED' : 'FAILED'}`)
    console.log(`üóÑÔ∏è  Database seeding: ${dbSeeded ? 'COMPLETED' : 'SKIPPED'}`)
    console.log(`üì¶ Bundle manifest: ${manifestCreated ? 'CREATED' : 'FAILED'}`)
    console.log(`üîê Bundle checksum: ${checksumGenerated ? 'GENERATED' : 'FAILED'}`)
    console.log(`üìä Data summary: ${summaryCreated ? 'CREATED' : 'FAILED'}`)
    
    if (filesCreated && manifestCreated && checksumGenerated && summaryCreated) {
      console.log('\nüèÜ DEMO SEEDING COMPLETED SUCCESSFULLY!')
      console.log('üöÄ PromptForge v3 is ready for QA testing!')
      
      console.log('\nüìã Next steps:')
      console.log('1. Start the application: pnpm dev')
      console.log('2. Navigate to /modules to see M01-M50')
      console.log('3. Navigate to /pricing to test entitlements')
      console.log('4. Navigate to /dashboard to see demo bundle')
      console.log('5. Test the complete flow: Generate ‚Üí Test ‚Üí Export ‚Üí Bundle')
      
    } else {
      console.log('\n‚ö†Ô∏è  Demo seeding completed with issues')
      console.log('üîß Please review and fix the failed steps')
    }
    
  } catch (error) {
    console.error('\nüí• Demo seeding failed:', error.message)
    process.exit(1)
  }
}

// Run if called directly
if (require.main === module) {
  runDemoSeeding().catch(console.error)
}

module.exports = { runDemoSeeding }
