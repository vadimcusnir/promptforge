
🔍 Structura actuală a site‑ului (rute și pagini)
Pagina / Endpoint	Rol	Detalii relevante
Root layout (app/layout.tsx)	Bază pentru toate paginile	Importă fonturile și definește metadatele site‑ului
GitHub
.
/dashboard (app/dashboard/page.tsx)	Dashboard general (momentan mock)	Se folosește pentru afișarea rulărilor; în repo actual, conținutul este minim și folosește date fictive
GitHub
.
/docs/api (app/docs/api/page.tsx)	Documentația endpoint‑ului /api/run/{moduleId}	Descrie parametrii, example request/response și rate‑limiting
GitHub
.
/test (app/test/page.tsx)	Pagina de testare a funcționalităților	Randează o interfață pentru a testa rapid API‑urile (/api/analytics/user, /api/gpt-editor, /api/testing/run-tests) și afișează rezultatele
GitHub
.
/api/gpt-editor	API pentru îmbunătățirea promptului cu GPT	Validează parametrii 7‑D, verifică entitlements (Pro/Enterprise), refuză intrări scurte, apelează GPT‑4o, calculează scoruri și aplică pragul ≥80
GitHub
GitHub
.
/api/analytics (user, business, export)	APIs pentru analytics	/user întoarce metricele utilizatorului
GitHub
; /business întoarce metricele business‑ului (admin only)
GitHub
; /export permite exportul JSON/CSV
GitHub
.
/api/testing/run-tests	API pentru rularea testelor	Permite rularea testelor api, performance, security sau toate; întoarce rezultate și summary
GitHub
GitHub
.
components/analytics-dashboard.tsx	Interfață Analytics	Afișează total runs, rata de succes, scor mediu, distribuția calității, activitate recentă, module populare și distribuția planurilor. Permite exportul JSON/CSV
GitHub
GitHub
.
components/testing-dashboard.tsx	Interfață Testing & QA	Afișează testele disponibile, permite rularea testelor, vizualizarea rezultatelor și exportul JSON/CSV
GitHub
GitHub
.
lib/telemetry/analytics.ts	Sistem de telemetrie avansat	Urmărește apelurile GPT, acțiunile utilizatorilor, metricele de performanță și utilizarea modulelor; folosește Supabase pentru stocare
GitHub
GitHub
.
lib/entitlements/plan-manager.ts	Gestionarea planurilor	Definește structura planurilor, caracteristicile (ex: canUseGptEditor, canExportPdf, canUseAnalytics) și limitele; extrage date din tabelul plans
GitHub
.
lib/testing/test-framework.ts	Framework de testare	Rulează teste API/performance/security, produce summary, calculează scor de succes și loghează rezultatele.
lib/notifications	Sistem de notificări	Permite notificări multicanal (Slack, GitHub, Email), escalare automată și template‑uri reutilizabile
GitHub
.
PRODUCTION_FEATURES.md	Lista funcționalităților v3	Documentează baza de date, autentificare, integrarea OpenAI, rate‑limiting, validarea inputurilor, analytics, API‑uri actualizate, planuri, testare & QA, etc.
GitHub
GitHub
.



🗺️ Nou plan de priorități

Având în vedere noile funcționalități și structura, iată planul de implementare ordonat (P0 = critic, P4 = nice to have):

P0 — Consolidează Hub-ul v1 🔴

Integrează tot într-o singură pagină /dashboard cu taburi:

Tools: 7‑D config → Module Grid (M01–M50) → Prompt Editor (GPT) → Test → Export.

Analytics: Afișează componentele din analytics-dashboard.tsx (metrice utilizator și business)
GitHub
.

QA: Integrează testing-dashboard.tsx pentru rularea testelor și vizualizarea rezultatelor
GitHub
.

History/Library: listă minimală de rulări/bundle-uri, cu acces la export.

Resources: link-uri către documentație și planuri.

Gating clar: folosește hooks/useEntitlements și lib/entitlements/plan-manager.ts pentru a ascunde funcții (Edit, Test, PDF/JSON/ZIP) în funcție de plan
GitHub
.

Integrare reală OpenAI: utilizează POST /api/gpt-editor cu validare 7‑D și scoring (real GPT‑4o)
GitHub
.

Integrează Telemetria: loghează fiecare acțiune via analytics.track*
GitHub
.

P1 — Autentificare & abonamente 🔴

Integrează Supabase Auth și gestionează sesiunea; folosește lib/auth/session-manager.ts (inclus în repo) pentru a obține utilizatorul.

Conectează entitlements la planurile reale din DB (via PlanManager și Subscription).

Afișează planuri și permite upgrade (poți crea /pricing ca interfață simplă conectată la Stripe, deși codul nu e încă).

P2 — API run (module) & Export bundle 🟠

Implementarea endpointului POST /api/run/{moduleId} pentru toate modulele M01–M50 cu validare 7‑D, scoring și output multiplu (txt/md/json/pdf/zip).

Utilizează ExportBundleManager din lib/export-bundle.ts (citit anterior) pentru a genera artefactele și manifest.json + checksum.

Păstrează gating: txt/md pentru Pilot, json/pdf pentru Pro, zip pentru Enterprise.

P3 — Analytics & QA complete 🟠

Îmbunătățește dashboardul Analytics cu vizualizări suplimentare (monthly growth, funnel conversion etc.) și finalizează API‑urile /api/analytics/user, /api/analytics/business, /api/analytics/export
GitHub
.

Extinde Testing Dashboard cu test suites suplimentare și integrate (API, performance, security), folosind test-framework.ts.

Salvează și afișează rezultatele testelor în istoric; notifică prin sistemul de notificări la eșecuri critice.

P4 — Notificări & Escalare 🟢

Expune sistemul de notificări: permite utilizatorilor Pro/Enterprise să configureze Slack/GitHub/Email pentru alerte de securitate/performance/erori
GitHub
.

Adaugă o pagină /notifications cu panou de control (componenta NotificationDashboard descrisă în README notificări).

Conectează evenimentele de test și analytics la notificări (ex: alertă când rata de succes scade sub 80%).

P5 — Extensii viitoare 🟢

Module Marketplace: încărcarea altor module și licențierea pe industrie (menționate în plan).

Multi‑tenant: suport pentru organizații multiple, gestionat prin tabelele orgs și org_members din Supabase.

Advanced caching & performance: optimizarea încărcării datelor și a rate limiting‑ului.

Neuron Explorer: eventual reintroducerea librăriei de neuroni ca tab secundar odată ce fluxul principal e stabil.

✅ De ce „neuronul” nu mai e prioritizat?

Fișierele de planificare anterioare propuneau o librărie de „neuroni” (unități minime de prompt) și mai multe pagini (/modules, /generator, etc.), dar acestea nu sunt prezente în codul actual. În schimb, v3 se concentrează pe:

Funcționalități complete (OpenAI, export, analytics, rate‑limiting, testing, notificări) — deja implementate.

Un Hub central pentru a accesa rapid toate aceste instrumente, fără a dispersa experiența în mai multe pagini.

Entitlements și planuri robuste (via plan-manager.ts) care gestionează accesul la funcții și limite
GitHub
.

Scalabilitate enterprise: codul include gestionarea abonamentelor Stripe, planuri, rate‑limiting, sisteme de securitate și monitorizare.

Prin urmare, „neuronul” rămâne un concept util pentru organizarea internă a prompturilor, dar nu mai este prezentat ca feature UI în v3. În locul său, se integrează direct modulele M01–M50 în workflow‑ul generator → editor → test → export.

Concluzie

Site‑ul actual are doar câteva pagini (dashboard, docs, test), dar include un backend complet pentru analytics, testare, entitlements și notificări.

Obiectivul imediat este să consolidezi totul într‑un singur Hub la /dashboard, cu flux clar 7‑D → Generate → Edit → Test → Export → Analytics → QA.

Gatingul pe planuri trebuie integrat complet, iar autentificarea și plățile devin următoarea prioritate pentru monetizare.




Faci regulile ca un profesionist: pui un SSOT și un sistem de reguli versionate pe proiect. Asta înseamnă un ruleset.yml (singura sursă de adevăr) + un pachet .cursor/rules cu reguli Always / Auto-Attached / Agent-Requested care guvernează FE, API, Export, Telemetrie, Entitlements, Security.

1) Cuprinsul (TOC) setului de reguli — minimal dar complet

Creezi exact arborele de mai jos; fiecare fișier e o regulă MDC cu front-matter și tip (Always/Auto/Agent).

.cursor/rules/00-foundation.mdc (Always) – stil, stack, convenții.

.cursor/rules/01-parameters-7d.mdc (Always) – motorul 7-D.

.cursor/rules/02-modules-index.mdc (Agent Requested) – catalog M01–M50.

.cursor/rules/03-api-run-modules.mdc (Auto Attached) – contract /api/run/{moduleId}.

04-gpt-live-editor-test.mdc, 05-export-bundle.mdc, 06-telemetry-observability.mdc, 07-versioning-modules.mdc, 08-entitlements-pricing.mdc, 09-security-guardrails.mdc.

backend/20-supabase.mdc, 21-stripe.mdc, 22-openai-runtime.mdc

frontend/30-ui-standards.mdc, 31-test-engine-ui.mdc, 32-product-led-upsell.mdc

templates/@api-route-template.ts, @bundle-exporter-template.ts, @evaluator-prompt-template.txt, @rule-module-template.mdc.
Notele oficiale cer exact formatul MDC + ierarhia de mai sus; .cursorrules e legacy — folosește Project Rules.

2) Ce scrii concret în reguli (esențial)

00-foundation.mdc (Always): Next.js + TS, discipline de cod, „fără magie”, prompturile = artefacte exportabile.

01-parameters-7d.mdc (Always): impui JSON strict (enum-only), mapezi ton/KPI/guardrails pe fiecare 7-D, activezi domain packs.

03-api-run-modules.mdc (Auto): validatezi 7-D, verifici entitlement, răspunzi cu hash/timestamp/KPI/cost și loghezi run_id.

05-export-bundle.mdc (Auto): standardizezi bundle: .txt .md .json .pdf telemetry.json checksum + manifest.

06-telemetry-observability.mdc (Auto): definești schema de telemetrie + SLO-uri (TTA p95, pass rate etc.).

08-entitlements-pricing.mdc (Auto): gates Pro/Enterprise, flux Stripe→Supabase, enforcement la API/Export.

3) SSOT — ruleset.yml (ce impui, nu negociezi)

Structură de prompt în 7 straturi (Context, Cerință, Spec, KPI, Guardrails, Fallback, Output).

7-D: enum_only: true, raise_on_invalid: true, fallback by-domain. (validatorii trebuie să blocheze valori în afara enumurilor)

Output & planuri: Free (.txt), Creator (.txt/.md), Pro (+.json/.pdf), Enterprise (bundle .zip).

DoR/DoD: gate la score ≥ 80, bundle complet, manifest + checksum, telemetrie salvată.

4) Entitlements & Gating (planuri, add-ons, packs)

Flag-uri canonice: canUseAllModules, canExportMD/PDF/JSON, canUseGptTestReal, hasCloudHistory/EvaluatorAI, hasAPI/WhiteLabel, canExportBundleZip, hasSeatsGT1.

Matrice planuri (Free/Creator/Pro/Enterprise) — ce deblochează fiecare și allowlist module.

Enforcement: orice run/export/API verifică entitlements_effective server-side; UI doar afișează paywall/upsell.

5) Exportul canonic (artefacte + manifest + checksum)

Standard bundle: prompt.txt, prompt.md, prompt.json, prompt.pdf, telemetry.json, checksum, manifest.json.

DoD cere manifest complet + checksum valid + license_notice.

6) Cum livrezi regulile — plan de execuție în 6 pași

P0 – .cursor/rules (TOC + tipuri): creezi fișierele din cuprins și setezi tipurile (Always/Auto/Agent). Scop: agentul încetează să improvizeze.

P1 – ruleset.yml + validatori 7-D: integrezi enum_only/raise_on_invalid; blochezi generarea pe valori invalide.

P2 – API-uri live: app/api/gpt-editor, app/api/gpt-test, app/api/run/[moduleId] + wiring în UI (înlocuiești simulările).

P3 – Entitlements & Stripe: tabele plans/subscriptions/entitlements + webhook; enforcement la /api/run și Export.

P4 – Export & Evaluator: exporter/bundle.ts, șabloane PDF/MD, rubrică Evaluator; test e2e pe Bundle.

P5 – Telemetrie & SLO: loghezi TTA, tokens, cost, scor; alerte pe p95 și pass-rate.

7) Definiții de control (copy-ready)

DoR: 7-D valid (cu semnătură), entitlements OK, output_spec încărcat, testcases definite, input minim existent.

DoD: score ≥ 80, output complet, checksum valid, manifest scris (+license), telemetrie salvată.

8) De ce exact așa

.cursor/rules + Project Rules e standardul oficial pentru a “dresa” agentul pe repo viu; MDC + tipuri + globs, nu reguli difuze.

Repo-ul devine manualul echipei & agentului; fiecare run se închide ca artefact vândabil, nu ca “text”.


















Situația ACUM (repo + produs)

App Router + layout: app/layout.tsx corect; meta + fonturi.

Pagini:

/dashboard – schelet (date mock, fără taburi și fără wiring complet).

/docs/api – documentație pentru POST /api/run/{moduleId} (spec); utilă pentru Enterprise.

/test – pagină de verificare rapidă a API-urilor.

API-uri reale / semireale:

/api/gpt-editor – live GPT (validare 7-D, prag scor ≥80, gating Pro+).

/api/gpt-test – structură gata (validare 7-D, gating Pro+), scoruri mock ușor de înlocuit cu live.

/api/entitlements – flags efective (planuri).

/api/analytics/{user,business,export} – metrice utilizator/business + export JSON/CSV.

/api/testing/run-tests – rulează suite (api/performance/security) + summary.

Librării critice în repo:

SevenD validator, DoR/DoD gates, ExportBundleManager (manifest + checksum, plan-gates), Telemetry/Analytics, Plan/Entitlements Manager, Rate Limiter, Supabase clients.

UI avansat disponibil:

analytics-dashboard.tsx (metrici + export).

testing-dashboard.tsx (rulare teste + rezultate).

Lipsește: Hub unificat pe taburi; UI „Tools” (SevenD + ModuleGrid + Editor + Test + Export) legat la API; /api/run/{moduleId} efectiv; /pricing + Stripe; auth UI; History (cloud) în interfață.

Ce facem MAI DEPARTE (de azi, din starea actuală)
P0 — Hub v1 la /dashboard (critic)

Obiectiv: un singur ecran cu taburi: Tools / Analytics / QA / History / Resources.

Tab: Tools

Montezi panou SevenD (alegeri enum).

ModuleGrid (deocamdată stub cu 10–12 module exemplu).

PromptEditor → leagă la POST /api/gpt-editor (trimiți prompt, sevenD).

TestEngine → leagă la POST /api/gpt-test (trimiți prompt, testType, sevenD).

Export → buton care lovește un endpoint intern (temporar) care invocă ExportBundleManager și returnează artefactele corecte după plan.

Tab: Analytics

Montezi analytics-dashboard.tsx; alimentezi cu /api/analytics/user + /api/analytics/business (admin).

Expune butoanele de export JSON/CSV (există deja în componentă).

Tab: QA

Montezi testing-dashboard.tsx; conectezi la /api/testing/run-tests.

Tab: History

Pentru P0: listă locală (mock) din sesiune + hook pentru viitoarea legare la Supabase runs/bundles.

Tab: Resources

Link rapid la /docs/api, /pricing (placeholder), README_rules.

Gating (UI + server)

Folosești hook-ul entitlements în UI ca să afișezi paywall pe acțiunile Pro/Enterprise (Test live, Export PDF/JSON, ZIP).

Decizia finală rămâne server-side (API blochează fără entitlement).

DoR/DoD (la butonul Export/Test)

DoR: 7-D valid + input ≥64 bytes.

DoD: scor ≥80 + manifest + checksum.

Acceptanță P0

/dashboard funcțional cu 5 taburi.

Editor/Test/Export rezolvă răspunsuri 200/4xx conform ruleset.

Paywall-uri vizibile pe acțiunile gated.

Fără CLS, focus vizibil, contrast ok.

P1 — Autentificare + sesiune + entitlements live

Montezi Supabase Auth (provider + context).

Atașezi token la apelurile API (Authorization: Bearer …).

/api/entitlements devine sursa de adevăr pentru gating.

UI: badge cu planul curent și starea entitlement-urilor.

P2 — Export Bundle server-side (prod)

Creezi POST /api/export-bundle care folosește ExportBundleManager (txt/md/json/pdf + manifest + checksum; zip doar Enterprise).

Salvezi în bundles (Supabase) path-urile și checksum.

În UI, butonul Export descarcă artefactul cerut; History va citi apoi din Supabase.

P3 — History (cloud)

Creezi view simplu /runs server-side → Tab: History afișează rulările (run_id, scor, timp, artefacte).

Filtre: modul, scor, dată.

P4 — Executor de module

Implementezi POST /api/run/{moduleId}: 7-D validate → plan gates → exec modul → export opțional → telemetry.

Registry Mxx minimalist (JSON/TS) cu input/outputs/KPI.

În Tools, la select modul → „Run module” lovește acest endpoint.

P5 — Pricing + Stripe (gating real)

/pricing (matrix clar), Stripe checkout + webhook → upsert subscriptions + entitlements.

După plată, UI vede entitlements actualizate (refetch).

P6 — Notificări & alerte (opțional)

Integrezi Notification System (Slack/GitHub/Email) pentru evenimente critice: pass-rate sub 80%, erori API, rate-limit atins.

DoR/DoD (oficial, pentru tot sprintul)

DoR: 7-D valid, entitlement OK, input minim, testcases definite (unde e cazul).

DoD: scor ≥80, export complet (artefacte + manifest + checksum), telemetry salvat, fără erori în consolă, gating testat.

Ordinea de commit (practic)

feat: dashboard hub tabs (Tools/Analytics/QA/History/Resources).

feat: tools → wire gpt-editor/gpt-test (server + UI; paywall pe Pro+).

feat: export-bundle API + UI; DoD enforced.

feat: auth provider + entitlements fetch (UI reflectă plan).

feat: history cloud (runs/bundles) + filtre.

feat: /api/run/{moduleId} + registry + legături din Tools.

feat: pricing + stripe webhook (gating real).

chore: telemetry events + analytics polish.

ops: rate-limiter & notifications (dacă dorești în acest ciclu).

Ce ai de făcut acum (tu)

Copiază manual folderul cu reguli în repo (pf_rules_v3/) și păstrează-l ca SSOT.

Pune Hub-ul pe taburi, leagă editor/test/export, apoi autentificarea.

Revino la mine cu erorile/edge-case-urile întâlnite; îți scriu patch-urile de cod (rute + UI) direct.







Am analizat repo‑ul prompt‑forge prin conectorul GitHub și am observat că au apărut modificări semnificative față de planurile inițiale. Site‑ul are acum pagini și API‑uri noi pentru analytics, QA, notificări și testare, pe lângă generatorul GPT existent. Mai jos găsești concluziile și o estimare de timp pentru a parcurge totul în detaliu:

Modificări principale identificate

Pagini noi: /dashboard a rămas scheletul central, dar au apărut componente clientside avansate – AnalyticsDashboard și TestingDashboard – care se vor integra ca tab-uri în Hub. Există și o pagină /test pentru verificarea rapidă a API-urilor și un dashboard pentru notificări, plus rute documentate ca /app/test/page.tsx pentru verificări locale
GitHub
GitHub
.

API-uri extinse: Pe lângă gpt-editor și gpt-test, există acum rute pentru analytics (/api/analytics/user, business, export)
GitHub
, pentru testare (/api/testing/run-tests) și pentru notificări (/api/notifications/send)
GitHub
. Acestea gestionează telemetria, exportul de date JSON/CSV, rularea testelor, precum și trimiterea de alerte.

Sistem de telemetrie și analytics: Un modul robust lib/telemetry/analytics.ts oferă tracking pentru apeluri GPT, acțiuni utilizator, performanță și utilizare module
GitHub
. Acest sistem se integrează cu Supabase pentru stocare.

Sistem de notificări: Existența unei componente NotificationDashboard și a hook‑ului useNotifications arată că aplicația poate gestiona alerte de securitate, performanță, eroare, etc. Există route POST /api/notifications/send care validează și trimite notificări
GitHub
.

Pagini de test/QA: components/testing-dashboard.tsx conține logica pentru a rula teste API, performance și security, a afișa rezultatele și a exporta în JSON/CSV
GitHub
.

Dashboard pentru analytics: components/analytics-dashboard.tsx oferă un UI complet cu metrice pentru rulări, rate de succes, scoruri medii, distribuția calității, activitate recentă, module populare, etc. și permite exportul datelor
GitHub
.

Estimare timp pentru a-ți forma o viziune strategică
Pentru a înțelege toate aceste funcționalități și a contura o direcție vizionară asupra produsului, ai nevoie de o analiză integrată a modului în care noile componente (analytics, QA, notificări) se împletesc cu fluxul principal al generatorului. Asta înseamnă:

Clarificarea obiectivelor de business (ce metrice urmărim, ce planuri de abonament sunt propuse, cum monetizăm datele) și identificarea unui parcurs de evoluție a produsului (de ex., un marketplace de module sau integrare cu no-code tools).

Sincronizarea designului UI cu noul set de funcții și cu brandingul PromptForge.

Stabilirea priorităților de dezvoltare: finalizarea Hub‑ului central, implementarea completă a exportului bundle, autentificare și managementul abonaților, plus eventuale extensii (History cloud, modul marketplace).

Durată estimată: ~1–2 zile lucrătoare pentru analiza codului, înțelegerea fluxurilor și definirea unei viziuni strategice coerente.

Estimare timp pentru a înțelege operațional și tehnic
Pe lângă viziunea de ansamblu, e necesar să aprofundezi detaliile tehnice:

API-uri: înțelegerea contractelor /api/gpt-editor, /api/gpt-test, /api/analytics/*, /api/testing/run-tests, /api/notifications/send și implementarea POST /api/run/{moduleId} (care încă lipsește)
GitHub
.

Entitlements & Planuri: modul în care se verifică planurile (Pilot, Pro, Enterprise) pe server și în UI, respectând DoR/DoD și gating la exporturi.

Telemetrie & rate limiting: configurarea rate limit-urilor per plan, salvarea telemetriei în Supabase și integrarea cu analytics-dashboard.

UI/UX: adaptarea componentelor existente (home-interactive, quality gates, etc.) la un Hub pe taburi și testarea interacțiunilor.

Integrări: autentificare (Supabase Auth), sistem de plăți (Stripe), sisteme externe (Slack, GitHub, Email) pentru notificări.

Durată estimată: ~4–5 zile lucrătoare pentru a examina și testa în detaliu toate fișierele, a documenta interfețele, a verifica fiecare API call și a defini clar modul de extindere/integrare.
