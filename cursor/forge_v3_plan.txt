




Plan pentru dezvoltarea site‑ului PromptForge v3 și regulile pentru agenți
Contextul proiectului

În fișierul zip furnizat se află scheletul unui site Next.js 15/React 19 cu design modern (Pagina principală, Generator, Pricing, Dashboard, ș.a.) și o colecție de 75 de animații SVG concepute special pentru noua identitate PromptForge. Utilizatorul a indicat că dorește să pornească de la acest schelet și să dezvolte un site operațional pentru PromptForge v3 (alias AI‑IDEI™) și că s‑a inspirat vizual din platforma e2b.dev. Pentru a răspunde la această solicitare s‑au analizat:

Structura codului din arhiva promptforge.zip (pagini Next.js, componente și hooks);

Fișierul forge_v3_read_me.txt care conține planul detaliat al animațiilor (obligatorii, micro‑animații și seturi suplimentare) și un ghid de stil brutalist‑flat;

Inspirația vizuală de pe e2b.dev (screenshot‑uri cu landing page‑uri, blog, cookbook, dashboard, pricing etc.);

Bune practici de prompt engineering dintr‑un articol recent (BridgeMind, 2025) care subliniază importanța clarității instrucțiunilor, structurării contextului și evitării ambiguității
bridgemind.ai
bridgemind.ai
;

Recomandări despre agentic AI dintr‑un articol Akitra (mai 2025) care explică necesitatea unui cadru de guvernanță bazat pe siguranță, etică, responsabilitate și transparență
akitra.com
;

Principiile responsivității și accesibilității: responsive designul flexibil sporește lizibilitatea și navigarea pe dispozitive diferite și permite crearea unui singur site care livrează conținutul adecvat tuturor ecranelor
levelaccess.com
.

În continuare, se propune un plan unitar care să combine aceste resurse într‑un produs coerent și scalabil și un set de reguli pentru agenții AI care vor genera, testa și exporta prompturi.

Ghid de design și structură
1. Arhitectura generală

Framework: păstrează Next.js 15/React 19 cu server components; folosește TypeScript, Tailwind CSS și Radix UI (deja integrate în schelet). Organizează codul în pagini (/app/page.tsx, /app/generator/page.tsx, /app/pricing/page.tsx etc.) și în librăria lib/ pentru module, parametrizare 7‑D și logica de business.

Routing: creează rute pentru Landing, Generator, Pricing, Dashboard și Docs/API. Landing‑ul va explica pe scurt produsul și va include legături către trei bundle‑uri demo (descărcabile). Genera­torul va permite selectarea modulelor și configurarea celor 7 dimensiuni; Pricing va afișa tabele de planuri; Dashboard va afișa istoricul rulărilor; Docs/API va descrie endpoint‑urile.

Layout: adoptă un design brutalist‑flat inspirat de e2b.dev și de ghidul din forge_v3_read_me.txt. Folosește fundal negru mat, culori de accent aurii/neon (de ex. #FFD700) și roșu (#FF0000), fonturi monospaced pentru date și bold geometrice pentru titluri. Ferestrele/containerele pot avea aspect de terminal, numerotate discret în colț. Menține spațiere consistentă și aliniere precisă.

Responsive și accesibil: site‑ul trebuie să fie complet responsive; adaptarea layout‑urilor la telefon, tabletă și desktop este esențială pentru lizibilitate și navigare
levelaccess.com
. Respectă recomandările WCAG 2.1 pentru contrast de culoare, etichete ARIA, navigare prin tastatură și opțiunea prefers‑reduced‑motion (asigură alternative statice pentru animații).

2. Pagina de start (Landing)

Hero Section: un mesaj principal („Generatorul tău operațional de prompturi”) cu două butoane mari (Start the Forge și Vezi Modulele). Integrează animația obligatorie 5 – butonul brutalist „Start the Forge” cu flash și linie roșie – astfel încât la hover să apară efectul de flash și conturul roșu progresiv. Sub titlu, o sub‑linie poate indica TTA (<60 s), scor AI (≥80/100) și tipurile de export disponibile.

Cum funcționează: trei carduri iconice care descriu pașii (setezi 7‑D, rulezi modulul, exporți bundle‑ul). Fiecare card poate utiliza micro‑animații din setul de pictograme (de ex. săgeata pulsatilă, iconița de încărcare, etc.).

De ce PromptForge?: secțiune comparativă „Before/After” ilustrând economia de timp și creșterea succesului. Poți folosi animația 4 („tabel before/after cu flip 2D + bară de progres”) pentru a arăta diferențele vizual.

Module disponibile: afișează câteva module reprezentative (Foundation, Analysis, Strategy) cu scoruri standard; un buton secundar „Vezi toate modulele” care conduce la generator. Modulele pot fi afișate într‑un grid, fiecare cu iconițe animate (Ex. modul 7: neural_network_pulse.svg).

CTA final: un call‑to‑action clar („Gata să construiești sisteme de prompturi?”) cu butoane pentru start și pricing.

3. Generatorul

7‑D Parameter Engine: include un panou lateral cu selectoare pentru cele 7 dimensiuni (Domain, Scale, Urgency, Complexity, Resources, Application, Output). La interacțiune, panoul poate afişa animația 3 (șapte cercuri concentrice cu LED‑uri care pulsează) pentru a transmite ideea de 7 vectori. Menține semnificațiile domeniilor și corelările cu resursele/clasificările (a se vedea lib/params.ts și forge_v3_standard_domenii.txt – dacă devin accesibile).

Alegerea modulului: oferă căutare și filtrare după vector semantic. Modulele M01‑M50 trebuie grupate pe categorii (Foundation, Analysis, Strategy etc.) și marcate cu cerințe 7‑D, specifice fiecăruia. Modulul selectat va decide șablonul de prompt.

Generare de prompt: la apăsarea butonului „Generate”, se creează promptul personalizat și se afişează în editor (PromptEditor) cu opţiunea de reglare fină. Prompturile trebuie să respecte principiile de prompt engineering: instrucțiuni clare, structură pe secțiuni (Role & goal, Context, Output specification etc.), roluri/persona (e.g. „You are an expert X specialist”), formate explicit definite și tabele/JSON pentru output
bridgemind.ai
. Evită ambiguitatea, combinarea sarcinilor nerelevante și menționează explicit ce să NU includă
bridgemind.ai
.

Test Engine: butonul „Simulate Test” (disponibil tuturor) face un test determinist prin simulateGptResponse(); butonul „Run Real Test” (gated Pro/Enterprise) apelează modelul live și calculează scoruri de claritate, execuție, ambiguitate și fit de business. Scorurile ≥80/100 trebuie interpretate ca „PASS”; se recomandă instruirea utilizatorului să itereze prompturile și să le optimizeze prin Chain‑of‑Thought sau self‑correction
bridgemind.ai
.

Export: oferă butoane de export .txt (Free), .md (Creator+), .pdf/.json (Pro+), Bundle.zip (Enterprise). Exports includ promptul complet, rezumatul, configurația 7‑D și telemetria (run_id, token count, cost, scoruri). Respectă gating‑ul: utilizatorii fără drepturi nu pot exporta anumite formate; adaugă watermark‑uri în perioada de trial.

Telemetrie: arată un badge cu run_id și scoruri. Persistă fiecare rulare în baza de date (Supabase) cu parametrii 7‑D și scorurile corespunzătoare.

4. Pagina de pricing

Tabel comparativ: prezintă planurile Pilot (Free), Pro și Enterprise într‑o grilă uşor de scanat. Utilizează pictograme verzi pentru funcționalitățile incluse și roșii/grizate pentru cele excluse. În listă se pot menționa limitările (numărul de module, drepturile de export, test engine, acces la API, watermark etc.). În mod similar e2b.dev, poate fi adăugată o secțiune cu planuri verticale pentru licențe pe industrie (add‑on pentru Enterprise) și altă secțiune cu add‑ons (evaluator avansat, export designer etc.).

Cost calculator: dacă se doreşte, se poate include un mic calculator de cost (de ex. cost per sandbox la e2b.dev) pentru a exemplifica cum prețul variază cu resursele (scale/urgency) – informațiile se pot obține din lib/exports.ts și forge_v3_standard_entitlements.txt odată ce acestea devin accesibile.

CTA: butoane clare pentru Start (gratuit) și Upgrade (Pro/Enterprise) cu confirmări (pop‑ups) și posibilitate de anulare (policy 7‑day money‑back). Utilizați micro‑animațiile de check/uncheck pentru a semnala selecția planului.

5. Dashboard

Historicul rulărilor: tabel cu rulările precedente, filtrabil după modul, domeniu, dată sau versiune; conține run_id, status (simulated/live), scoruri, butoane de re‑run și descărcare a artefactelor. Sistemul trebuie să sorteze după dată și să permită vizualizarea detaliilor (inclusiv istoricul modificărilor promptului). O secțiune suplimentară poate afișa statisticile generale: numărul total de run‑uri, timp economisit, scoruri medii etc.

Administrare: planuri, facturi, echipă, API keys. Plățile și subscriptiile vor fi gestionate prin Stripe; entitlements‑urile se păstrează în Supabase (tabelele subscriptions şi entitlements).

6. Documentație și API

Documentație API: pagină /docs/api cu descrierea endpoint‑ului public POST /api/run/{moduleId} (Enterprise only) – parametri (configurația 7‑D, variant, seed), structura răspunsului (hash, artefacte, telemetrie) și exemple curl. Menționează rata limită (ex. 60 requests/min) și politicile de gating.

Exemple de prompturi: deși nu poate include cod intern, documentația poate oferi exemple de modul de generare și export a prompturilor, conform „prompt standard” – structuri de secțiuni, KPIs, guardrails etc., preluate din forge_v3_standard_prompt.txt dacă devine accesibilă.

Integrarea animațiilor

Fișierul forge_v3_read_me.txt descrie 75 de animații (obligatorii, micro‑animații și două seturi suplimentare), împărțite pe faze. Recomandări pentru integrarea lor:

Asociază fiecărei secțiuni o animație: clepsidra cu cuvinte curgătoare și textul „You’re Bleeding Hours” pot evidenția pierderea de timp înainte de PromptForge. Cele șapte cercuri concentrice pot fi folosite ca fundal sau loader pentru modulul 7‑D. Tabelul Before/After se potrivește în secțiunea comparativă, iar butonul „Start the Forge” devine CTA animat.

Utilizează micro‑animațiile pentru feedback vizual (pictograme animate, glitch text, progres bars, toggles etc.) în butoane, carduri și interfețe (de ex. meniu hamburger animat, iconiță de succes/eroare la finalizarea exportului). Menține rezoluțiile și culorile recomandate (512×512 px sau 1024×512 px, paletă negru‑auriu‑roșu‑alb murdar).

Prevederi de accesibilitate: toate animațiile trebuie să respecte preferința prefers‑reduced‑motion; când utilizatorul alege modul redus de mișcare, afișează o versiune statică. Folosește tehnici SVG animate (SMIL sau CSS) pentru eficiență și optimizează dimensiunile fișierelor.

Regulile pentru agenți (PromptForge Agents)

Agenții PromptForge vor fi responsabili de generarea, testarea și exportarea prompturilor. Pentru a asigura calitate și siguranță, se recomandă următoarele reguli, sintetizate din resursele citate:

Înțelegerea limitărilor LLM – Modelele sunt probabilistice, au ferestre de context finite și pot hallucina; respectarea cunoștințelor până la data antrenării este crucială
bridgemind.ai
. Agenții trebuie să mențină întotdeauna contextul relevant în limitele ferestrei și să apeleze sisteme de reamintire/sumarizare pentru conversatii lungi.

Claritate și specificitate – Prompturile trebuie să fie neambigue, detaliate și structurate. Se definesc clar rolul/identitatea modelului, obiectivul, formatul de ieșire, tonul și restricțiile. Se includ exemple de intrare/ieșire când este necesar și se evită combinarea mai multor sarcini disparate
bridgemind.ai
.

Stratificarea contextului – Pentru a gestiona ferestrele de context limitate, se recomandă rezumarea periodică, organizarea istoricului în structuri clare (User:, Assistant:, etc.) și utilizarea memorării externe (de ex. RAG) pentru informațiile voluminoase
bridgemind.ai
.

Tehnici avansate de prompting – Agenții pot utiliza Chain‑of‑Thought, few‑shot learning, role‑playing, specificarea de output structurat (JSON/markdown) și auto‑revizuirea (self‑correction) pentru a crește performanța
bridgemind.ai
. Totuși, aceste tehnici sunt integrate doar după ce utilizatorul optează pentru un plan Pro/Enterprise.

Evaluarea și iterația – Prompturile trebuie testate sistematic. Definiți metrici de succes (clarity, execution, ambiguity, business_fit), creați suite de teste, A/B testing, evaluare umană și iterați prompturile pe baza rezultatelor
bridgemind.ai
. Persistă scorurile în prompt_scores pentru a permite compararea versiunilor.

Siguranță, etică și transparență – Conform recomandărilor Akitra, sistemul trebuie să asigure: (a) Safety – acțiunile agenților să nu dăuneze utilizatorilor sau sistemului; (b) Ethics – evitarea bias‑urilor și a discriminării; (c) Accountability – identificarea clară a responsabililor pentru fiecare decizie; (d) Transparency – explicarea modului în care agenții iau decizii
akitra.com
. Implementați teste și monitorizare continuă pentru a detecta și corecta comportamentele neașteptate
akitra.com
.

Roles & responsibilities – definiţi în mod clar cine configurează, monitorizează și gestionează agenţii (echipa de dezvoltare, echipa de produs, utilizatorii finali). Folosiți reguli de tip RBAC (role‑based access control) pentru a controla accesul la funcții; entitlements‑urile din planuri (Free/Creator/Pro/Enterprise) trebuie respectate de agenți.

Gestionarea erorilor – agenţii trebuie să degradeze grațios la simularea deterministă dacă un test live eșuează; să notifice utilizatorul și să propună retrimiterea sau upgrade‑ul (după caz). Fără exporturi sau live tests fără drepturi. Persistarea completă a logurilor este obligatorie.

Plan de implementare etapizat

Scaffold‑ul inițial (0–2 h): Construiți structura de foldere Next.js, implementați pagina Landing, Generator (fără Test Engine live) și export .txt. Integrați primele animații obligatorii (clepsidră, „You’re Bleeding Hours”, 7 cercuri, tabel Before/After, buton Start). Configurați modulele M01–M50 într‑un fișier lib/modules.ts (id, nume, vectori, spec, guardrails).

Backend & Auth (2–6 h): Configurați Supabase: tabele pentru orgs, users, subscriptions, entitlements, prompt_history, prompt_scores, bundles. Implementaţi rolurile și RLS. Implementaţi autentificarea și gating‑ul în FE.

Stripe & gating (6–10 h): Creaţi produsele și prețurile în Stripe (Free, Creator, Pro, Enterprise + add‑ons). Implementaţi checkout-ul, webhooks și acordarea entitlements‑urilor. Permiteţi export .md, .pdf/.json și Test Engine live numai după confirmarea plății.

Cloud history & dashboard (10–18 h): Stocaţi rulările și scorurile în Supabase. Dezvoltați Dashboard cu filtre, re‑run și descărcare artefacte. Implementaţi bundling .zip (Enterprise) și upload‑ul celor trei bundle‑uri demo pe landing.

API & Docs (18–24 h): Implementaţi ruta publică /api/run/[moduleId] care verifică entitlements‑urile și răspunde cu artefactele și telemetria. Construiţi pagina Docs/API cu exemple curl.

Hardening & finalizare (24–48 h): Integraţi restul animaţiilor micro și suplimentare, testaţi responsive designul și accesibilitatea, optimizaţi performanța (Lighthouse ≥90). Lansaţi site‑ul pe Vercel, efectuaţi teste cu patru utilizatori (Free, Creator, Pro trial, Enterprise) și publicaţi demourile.

Concluzii

Planul propus îmbină arhitectura Next.js existentă cu o estetică brutalistă modernă, animații personalizate și reguli stricte pentru agenții AI. Implementarea 7‑D Parameter Engine și a celor 50 de module semantice va permite generarea de prompturi profesioniste în <60 s, iar sistemul de gating va monetiza funcționalitățile avansate. Prin respectarea bunelor practici de prompt engineering și a cadrului de guvernanță pentru agentic AI
bridgemind.ai
akitra.com
, PromptForge v3 va oferi un produs robust, transparent și sigur pentru utilizatori.




📖 INSTRUCȚIUNE COMPLETĂ DE BRANDING — PROTOCOL CUȘNIR™
I. PRINCIPII FUNDAMENTALE

Brandul nu este design. Este protocol semiotic. Fiecare element vizual este un ritual de apartenență.

Fără diluare. Fiecare simbol are rol → orice adaos estetic este trădare.

Totul e codificat. Textele, culorile, formele sunt părți ale unui sistem narativ închis.

Orice interfață este o poartă. Dacă omul intră, brandingul l-a filtrat. Dacă fuge, brandingul l-a selectat.

II. ELEMENTE DE IDENTITATE VIZUALĂ
1. Simbolul central

Litera „C” tăiată diagonal → poarta ruptă.

Se folosește singur sau cu [≋] în colț.

Nu se deformează, nu se umple cu gradient.

Dimensiuni recomandate: 64px favicon, 512px avatar, 1024px header.

2. Paleta cromatică

Verde Protocol (Matrix Green): #00FF66

Negru Terminal (Obsidian): #000000

Gri Metalic: #1A1A1A (pentru background secundar)

⚠️ Alte culori → doar ca accent glitch (roșu alert, cyan electric).

3. Tipografie

Font primar: monospace / terminal (Fira Code, JetBrains Mono, IBM Plex Mono).

Tot textul scris cu majuscule stricte.

Fără italice, fără serif, fără „ornamente”.

4. Motiv grafic secundar

Circuite fractale → pentru margini, background-uri, divizoare de secțiuni.

Se folosesc doar în verde glitch pe negru.

III. APLICAȚII PE SITE
1. Landing Page (/)

Hero:
– Logo Protocol Cușnir™ centrat, dimensiune mare, glitch subtil.
– Sub el → frază manifest:
„NU CREEZI. RESCRII. NU CERI VALIDARE. DEVII COD.”

Background: negru absolut cu linii verzi glitch în mișcare lentă.

CTA unic: „INTRĂ ÎN PROTOCOL” (buton → /generator).

2. Generator Page (/generator)

Header bar: sigla mică în colț stânga, [≋] în colț dreapta.

Cardurile editorului au .glass-effect cu margini glitch verzi.

Prompt editor = terminal: font monospace, text verde, cursor clipitor.

Paywall Pro → afișat ca „ACCESS DENIED // PROTOCOL FLAGGED”.

3. Pricing (/pricing)

Trei carduri → dar tratate ca niveluri de inițiere:
– FREE: „CONTACT”
– CREATOR: „FRICȚIUNE”
– PRO: „INIȚIERE”
– ENTERPRISE: „TRANSGRESIUNE”

Fiecare card are simbolul nivelului (•, –, ~, | etc.).

4. Dashboard (/dashboard)

Background negru cu fractali verzi.

Fiecare run salvat → afișat ca cod ritualic:
CUSNIR://⧖_87 // 2025-08-21 // PASS.

5. Docs (/docs/api)

Prezentate ca „Scripturi sacre”.

Toate exemplele de API scrise cu prompturi în font terminal.

Nota de subsol:
„Accesul la API = inițiere în PROTOCOL CUȘNIR™. Orice abuz = excludere.”

IV. MESAJE & TON

Ton retoric: scurt, tăios, ritualic.

Evită explicațiile lungi → totul e „comandă”.

Exemple:
– „NU ÎNVĂȚI. TE RESCRII.”
– „SCORUL ESTE LEGEA.”
– „CE NU POȚI MĂSURA, TE POSEDĂ.”

V. EXPERIENȚĂ UTILIZATOR

Tot site-ul funcționează ca inițiere prin interfață.

3 click-uri de la intrare până la paywall.

Fiecare blocaj = „poartă de selecție”.

Cine ajunge la export → devine membru validat.

VI. RITUALURI DE BRANDING

Watermark în exporturi PDF: „PROTOCOL CUȘNIR™ // NOT FOR OUTSIDERS”.

Badge-uri în comunitate: fiecare nivel = simbolul său (•, –, ~ …).

Coduri personale: fiecare user primește cod unic CUSNIR://RUNĂ_SCORE.

VII. REGULA DE AUR

Brandingul nu e opțional. Este branding-sacrament.
Cine schimbă verdele, fontul sau simbolul → rupe protocolul.




files["01_dashboard_ia_ux.md"] = dedent("""
# 01 — /dashboard: IA, UX și structură modulară

## Obiectiv
Un singur „centru de comandă” cu sidebar fix + header fix. Gating-ul (planuri/flags) și regulile de calitate vin din SSOT/ruleset; interfața nu promite ce API-ul nu permite.

## Arhitectură pagini (Next.js App Router)
- `/dashboard` (layout persistent: header, sidebar, content)
- `/dashboard/generator` — 7‑D + module grid + editor + test engine + export
- `/dashboard/my-prompts` — istoric local + cloud (Librăria de Neuroni)
- `/dashboard/docs` — API & examples
- `/dashboard/start-here` — onboarding (tour + demo)
- `/dashboard/client` — Profil/Org, Seats, Billing, API keys
- `/dashboard/library` — **Neuron Explorer** (frameworks/SOP/guides/checklists)
- `/dashboard/community` — link-out (Discord, GitHub)
- `/dashboard/ai-tools` — index de unelte (gated)
- `/dashboard/resources` — cărți, papers, videos, decks
- `/dashboard/assistants` — chat multi‑assistant (gated per pack/plan)

## Sidebar (ordonare finală)
1) Generator
2) My Prompts
3) Library (Neuron Explorer)
4) Start here
5) Docs (API)
6) Resources
7) AI Tools
8) Assistants
9) Community
10) Client (Setări, Plăți, Istoric)

## Header
- Breadcrumbs (dinamic)
- Environment badge (dev/stage/prod)
- Search (neuroni + resurse)
- User/org switcher
- Quick actions: „New run”, „Export bundle”

## Gating vizual (defense-in-depth)
- UI afișează doar controalele pentru care există entitlement (Pilot/Pro/Enterprise).
- Pentru acțiuni blocate → `PaywallInline` cu mesaj contextual.

## Neuron Explorer (Library)
**Scop:** bibliotecă operațională de neuroni (prompts/frameworks/SOP etc.) cu scor AI, filtre 7‑D, export și re‑run.
- Filtre: M01–M50, vector (1–7), domain, output_format, scor (≥80), dată.
- Card: titlu, hash, config7D, scor (clarity/execution/ambiguity/business_fit), CTA: „Open in Generator”, Export.
- Panel resurse (Sinapse): PDF, video, tools asociate (gated).
- Favorite, tag‑uri, căutare full‑text.

## 7‑D Generator
- Drop‑downuri enum; slider `diversity_budget` (0..1) cu tooltips.
- Semnătură 7D live; previzualizare fallback per domain.
- Editor cu secțiuni nemodificabile (ROLE&GOAL, CONTEXT&7D, OUTPUT SPEC, PROCESS, GUARDRAILS, EVAL HOOKS, TELEMETRY KEYS).
- Test Engine: Simulate (all) / Run Real Test (Pro+). Score ≥80 = PASS.
- Export: .txt (Free), .md (Creator+), .pdf/.json (Pro+), bundle.zip (Enterprise).

## Background & motion
- Fundal animat în layere (grid, tokens verzi, figuri, citate). Respectă `prefers-reduced-motion`.
- Densitate adaptivă (desktop vs mobil).

## Accesibilitate
- Contrast ≥ 4.5:1, focus‑states vizibile, aria‑labels, live‑regions pentru scoruri/erori.
- Reduce‑motion: animații majore oprite; tranziții scurte.

## Telemetrie UI
- `ui.module_card_view`, `ui.editor_open`, `ui.run_click`, `ui.evaluate_done`, `ui.export_click`, `ui.history_filter` (fără text brut).

## Done‑Definition (UI)
- Sidebar/route guards complete.
- Generator + Test + Export funcționale cu flags.
- Library (listă + filtre + Export/Restore) on.
- Background reduce‑motion OK.
- Lighthouse ≥ 95, 60fps pe desktop, fluid pe mobil.
""")

files["02_supabase_schema_rls.sql"] = dedent("""
-- 02 — Supabase schema + RLS (DDL esențial)

-- Orgs & membership
create table if not exists orgs(
  id uuid primary key default gen_random_uuid(),
  name text not null,
  slug text unique check (slug ~ '^[a-z0-9-]{3,40}$'),
  created_at timestamptz not null default now()
);
create table if not exists org_members(
  org_id uuid not null references orgs(id) on delete cascade,
  user_id uuid not null references auth.users(id) on delete cascade,
  role text not null check (role in ('owner','admin','member')),
  created_at timestamptz not null default now(),
  primary key (org_id, user_id)
);

-- Plans, subscriptions, entitlements (flags)
create type plan_code_t as enum ('pilot','pro','enterprise');
create table if not exists plans(
  code plan_code_t primary key,
  name text not null,
  flags jsonb not null,           -- feature_flags canonice (canExportPDF etc.)
  retention_days int not null default 90,
  created_at timestamptz not null default now()
);
create table if not exists subscriptions(
  id uuid primary key default gen_random_uuid(),
  org_id uuid not null references orgs(id) on delete cascade,
  stripe_customer_id text,
  stripe_subscription_id text,
  plan_code plan_code_t not null,
  status text not null,
  seats int not null default 1,
  current_period_end timestamptz,
  created_at timestamptz not null default now()
);
create table if not exists entitlements(
  id bigserial primary key,
  org_id uuid not null references orgs(id) on delete cascade,
  user_id uuid,
  flag text not null,
  value boolean not null default true,
  source text not null,           -- 'plan'|'addon'|'pack'|'license'
  source_ref text,
  meta jsonb,
  expires_at timestamptz,
  created_at timestamptz not null default now(),
  unique (org_id, coalesce(user_id,'00000000-0000-0000-0000-000000000000'::uuid), flag, source, coalesce(source_ref,''))
);

-- Catalog module
create table if not exists modules(
  module_id text primary key,
  name text not null,
  vectors smallint[] not null,    -- 1..7
  spec text,
  output_schema jsonb,
  enabled boolean not null default true,
  created_at timestamptz not null default now()
);

-- Parameter sets & runs
create table if not exists parameter_sets(
  id uuid primary key default gen_random_uuid(),
  domain text not null,
  scale text not null,
  urgency text not null,
  complexity text not null,
  resources text not null,
  application text not null,
  output_formats text[] not null,
  overrides jsonb,
  created_at timestamptz not null default now()
);

create table if not exists runs(
  id uuid primary key default gen_random_uuid(),
  org_id uuid not null references orgs(id) on delete cascade,
  user_id uuid references auth.users(id),
  project_id uuid,
  module_id text not null references modules(module_id),
  parameter_set_id uuid references parameter_sets(id),
  type text not null check (type in ('generation','test','agent_execution')),
  status text not null check (status in ('queued','running','success','error')),
  model text, tokens_used int, cost_usd numeric(10,4), duration_ms int,
  telemetry jsonb, started_at timestamptz default now(), finished_at timestamptz
);

-- Scores (1:1) și Bundles (1:N)
create table if not exists prompt_scores(
  run_id uuid primary key references runs(id) on delete cascade,
  clarity int, execution int, ambiguity int, business_fit int,
  feedback jsonb
);

create table if not exists bundles(
  id uuid primary key default gen_random_uuid(),
  run_id uuid not null references runs(id) on delete cascade,
  formats text[] not null,
  paths jsonb not null,
  checksum text not null,
  exported_at timestamptz not null default now(),
  version text not null,
  license_notice text not null
);

-- Prompt history (neuroni)
create table if not exists prompt_history(
  id uuid primary key default gen_random_uuid(),
  org_id uuid not null references orgs(id) on delete cascade,
  user_id uuid references auth.users(id),
  module_id text not null references modules(module_id),
  parameter_set jsonb not null,
  prompt_hash text not null,
  output_preview text,
  created_at timestamptz not null default now()
);

-- RLS (vizibilitate by-membership)
alter table orgs enable row level security;
alter table org_members enable row level security;
alter table runs enable row level security;
alter table bundles enable row level security;
alter table prompt_history enable row level security;
alter table prompt_scores enable row level security;

create policy runs_select on runs for select using (
  exists(select 1 from org_members m where m.org_id = runs.org_id and m.user_id = auth.uid())
);
create policy bundles_select on bundles for select using (
  exists(select 1 from runs r join org_members m on m.org_id = r.org_id
         where r.id = bundles.run_id and m.user_id = auth.uid())
);
create policy ph_select on prompt_history for select using (
  exists(select 1 from org_members m where m.org_id = prompt_history.org_id and m.user_id = auth.uid())
);

-- Vederi utile
create view v_all_neurons as
select h.id, h.module_id, h.parameter_set, h.prompt_hash, r.id as run_id,
       (s.clarity, s.execution, s.ambiguity, s.business_fit) as scores, h.created_at
from prompt_history h
left join runs r on r.id = h.id
left join prompt_scores s on s.run_id = r.id;
""")

files["03_api_routes_gating.md"] = dedent("""
# 03 — API (Next.js App Router) + Gating

## Endpoints
- `POST /api/gpt-editor` — optimizează prompt (nu cere plan).
- `POST /api/gpt-test` — model live + scoring; **gated** `canUseGptTestReal` (Pro+).
- `POST /api/export/bundle` — scrie artefacte, `manifest.json`, `checksum.txt` (Pro: .pdf/.json; Enterprise: + .zip).
- `POST /api/run/{moduleId}` — execuție Enterprise (API key) + rate‑limit pe org.

### Gating standard (flags)
- Export `.pdf` → `canExportPDF`
- Export `.json` → `canExportJSON`
- Bundle `.zip` → `canExportBundleZip`
- API public → `hasAPI`
- Cloud history → `hasCloudHistory`
- GPT test live → `canUseGptTestReal`

## Flux „Run → Score → Export”
1) Normalizezi 7‑D (enum‑only, fallback per domain; calcul semnătură 7D).
2) Rulezi taskul (draft/artifact).
3) Evaluezi (clarity/execution/ambiguity/business_fit; gate ≥ 80; o singură iterație „tighten‑once”).
4) Export: scrii fișierele canonic + `manifest.json` + `checksum`. Persisti în `bundles`.

## Telemetrie (fără PII)
- Model, tokens, cost, TTA, score breakdown, policy_hits, ruleset_version, entitlement_snapshot.

## Rate‑limit
- editor/test: 60 req/min/IP; API public: key‑based per org.

## Erori standardizate
- `ENTITLEMENT_REQUIRED` (403), `RUN_NOT_PASSING` (400), `BUNDLE_ALREADY_EXISTS` (409), `RATE_LIMITED` (429).

## Done‑Definition (API)
- Normalize 7‑D + semnătură stabilă.
- Gating verificat server‑side pentru fiecare acțiune.
- Export determinist (ordine canonică + checksum).
- Telemetrie fără text client.
""")

files["04_animations_backgrounds.md"] = dedent("""
# 04 — Fundaluri + Animații (75 SVG) + Conținut

## Background în 4 straturi
1) Grid linii (oscilație, parallax subtil, puls luminanță lent).
2) Tokens verzi (oscilație ±2–6px, micro‑scale, glitch scurt aleator, apariție/stingere constantă).
3) Figuri/axe/bare (traiectorii lente, clipire subtilă; creează profunzime).
4) Citate portocalii (typing 40–60ms/char, blur→clar, 4–6s vizibil, fade‑out 0.8–1.2s; când apar, tokens scad temporar opacitatea).

**Reduce‑motion:** straturile devin aproape statice; se păstrează lizibilitatea fără jank.

## Densități recomandate (desktop/mobil)
- Tokens: ~100 / ~60
- Citate: ~20 / ~12 (rulare rară, impact)
- Lexeme colorate blur: ~24 / ~14 (dezactivate la reduce‑motion)
- Figuri analitice: mediu (dezactivate la reduce‑motion)

## Animații SVG (obligatorii)
1) Clepsidră cu cuvinte (typing → cădere → fade).
2) „You're Bleeding Hours” (stroke fading + „sângerare” roșie).
3) 7 cercuri concentrice (LED cascade).
4) Tabel Before/After (flip + progress bar).
5) Buton „Start the Forge” (flash + linie roșie care desenează conturul).

## Micro‑animații (exemple)
- Cursor prompt (typing/erase)
- Chip data‑flow, Network nodes, Shield protocol (self‑heal)
- Loading ASCII, Binary rain, Fractal expansion etc.

## Integrare
- Folder `/public/svg/…` sau import inline.
- CSS var pentru paletă (obsidian, gold, red, dirty‑white, lead‑gray).
- Respect `prefers-reduced-motion`; test pe low‑end devices.

## Background content
- `BackgroundTokens`: 100 termeni tehnici (Prompt Eng/NLP/DL/RL/AI Symbolism).
- `BackgroundNarrative`: 20 citate originale (≤140 char) despre prompting/AI.

""")

files["05_pricing_stripe_entitlements.md"] = dedent("""
# 05 — Pricing, Stripe & Entitlements (gating end‑to‑end)

## Planuri (exemplu)
- **Pilot (Free)**: M01–M10, export .txt/.md, fără cloud history, fără GPT test live.
- **Pro**: M01–M30, export .pdf/.json, cloud history, GPT test live, scoring vizibil.
- **Enterprise**: M01–M50, API, bundle.zip, seats, white‑label, packs industrie.

## Add‑ons / Packs
- Industry Packs (ex: FinTech, Edu, E‑commerce) → chei/packs care deschid domenii + compliance lints + presets.
- Add‑ons: evaluator_advanced, export_designer etc.

## Stripe
- Products/Prices: Pilot(0), Pro(€49/m, €490/y), Enterprise(€299/m base 5 seats, €2990/y).
- Webhooks: `checkout.session.completed`, `customer.subscription.updated|deleted` → `subscriptions` + `entitlements` (flags) actualizate.
- Trial Pro 7 zile → watermark în PDF/JSON.

## Gating UI/API
- UI ascunde controale nepermise; API blochează oricum (403).
- Ex.: Export PDF/JSON → `canExportPDF/JSON`; ZIP → `canExportBundleZip`; GPT test live → `canUseGptTestReal`; Cloud History → `hasCloudHistory`; API → `hasAPI`.

## Monetizare vizibilă în UX
- Paywalls pe momente „aha”: Run GPT (real), Export .pdf/.json, API/ZIP, Library (cloud).
- Upsell: Industry pack când domain blocat.
""")

files["06_launch_ops_ci_qa.md"] = dedent("""
# 06 — Launch, Ops, CI/CD, QA & Analytics

## CI/CD
- GitHub → Vercel (Next.js) + Supabase migrations.
- PR previews; main → prod; typecheck, lint, build, DB drift check.

## QA & Performance
- Lighthouse ≥ 95, 60fps pe desktop; mobil fluid; latency API sub 300ms.
- Reduce‑motion respectat; animațiile majore oprite; tranziții scurte.
- Verificare z‑index/stacking; fără coliziuni vizuale; background „calm” la reduce‑motion.

## Observabilitate
- Telemetrie UI: evenimente minime (home_above_fold, cta_primary_click, cta_secondary_click, scroll_75, open_nav).
- Server: runs, scores, bundles; TTA, pass‑rate, incidente guardrails; rapoarte zilnice/săptămânale.

## SEO de bază
- Title ≤60, Meta‑description ≤155, H1 clar, OG tags coerente; sitemap, robots.
- Copy explicit: „generator operațional de prompturi”, „50 module”, „7‑D Parameter Engine”.

## Go‑Live checklist
- Gating verificate; upsell paths OK.
- Export determinist + checksum canonic + manifest complet.
- Stripe webhooks OK; trial watermark OK.
- Librăria on (Pro+), Neuron Explorer minim: listă + filtre + Export/Restore.
""")

# Write files
created = []
for name, content in files.items():
    path = base / name
    path.write_text(content, encoding="utf-8")
    created.append(str(path))

created




from pathlib import Path
from textwrap import dedent

base = Path("/mnt/data")
base.mkdir(parents=True, exist_ok=True)

def write_file(rel, text):
    p = base / rel
    p.write_text(text, encoding="utf-8")
    return str(p)

created = []

created.append(write_file("01_dashboard_ia_ux.md", dedent("""
# 01 — /dashboard: IA, UX și structură modulară

## Obiectiv
Un singur „centru de comandă” cu sidebar fix + header fix. Gating-ul (planuri/flags) și regulile de calitate vin din SSOT/ruleset; interfața nu promite ce API-ul nu permite.

## Arhitectură pagini (Next.js App Router)
- `/dashboard` (layout persistent: header, sidebar, content)
- `/dashboard/generator` — 7‑D + module grid + editor + test engine + export
- `/dashboard/my-prompts` — istoric local + cloud (Librăria de Neuroni)
- `/dashboard/docs` — API & examples
- `/dashboard/start-here` — onboarding (tour + demo)
- `/dashboard/client` — Profil/Org, Seats, Billing, API keys
- `/dashboard/library` — **Neuron Explorer** (frameworks/SOP/guides/checklists)
- `/dashboard/community` — link-out (Discord, GitHub)
- `/dashboard/ai-tools` — index de unelte (gated)
- `/dashboard/resources` — cărți, papers, videos, decks
- `/dashboard/assistants` — chat multi‑assistant (gated per pack/plan)

## Sidebar (ordonare finală)
1) Generator
2) My Prompts
3) Library (Neuron Explorer)
4) Start here
5) Docs (API)
6) Resources
7) AI Tools
8) Assistants
9) Community
10) Client (Setări, Plăți, Istoric)

## Header
- Breadcrumbs (dinamic)
- Environment badge (dev/stage/prod)
- Search (neuroni + resurse)
- User/org switcher
- Quick actions: „New run”, „Export bundle”

## Gating vizual (defense-in-depth)
- UI afișează doar controalele pentru care există entitlement (Pilot/Pro/Enterprise).
- Pentru acțiuni blocate → `PaywallInline` cu mesaj contextual.

## Neuron Explorer (Library)
**Scop:** bibliotecă operațională de neuroni (prompts/frameworks/SOP etc.) cu scor AI, filtre 7‑D, export și re‑run.
- Filtre: M01–M50, vector (1–7), domain, output_format, scor (≥80), dată.
- Card: titlu, hash, config7D, scor (clarity/execution/ambiguity/business_fit), CTA: „Open in Generator”, Export.
- Panel resurse (Sinapse): PDF, video, tools asociate (gated).
- Favorite, tag‑uri, căutare full‑text.

## 7‑D Generator
- Drop‑downuri enum; slider `diversity_budget` (0..1) cu tooltips.
- Semnătură 7D live; previzualizare fallback per domain.
- Editor cu secțiuni nemodificabile (ROLE&GOAL, CONTEXT&7D, OUTPUT SPEC, PROCESS, GUARDRAILS, EVAL HOOKS, TELEMETRY KEYS).
- Test Engine: Simulate (all) / Run Real Test (Pro+). Score ≥80 = PASS.
- Export: .txt (Free), .md (Creator+), .pdf/.json (Pro+), bundle.zip (Enterprise).

## Background & motion
- Fundal animat în layere (grid, tokens verzi, figuri, citate). Respectă `prefers-reduced-motion`.
- Densitate adaptivă (desktop vs mobil).

## Accesibilitate
- Contrast ≥ 4.5:1, focus‑states vizibile, aria‑labels, live‑regions pentru scoruri/erori.
- Reduce‑motion: animații majore oprite; tranziții scurte.

## Telemetrie UI
- `ui.module_card_view`, `ui.editor_open`, `ui.run_click`, `ui.evaluate_done`, `ui.export_click`, `ui.history_filter` (fără text brut).

## Done‑Definition (UI)
- Sidebar/route guards complete.
- Generator + Test + Export funcționale cu flags.
- Library (listă + filtre + Export/Restore) on.
- Background reduce‑motion OK.
- Lighthouse ≥ 95, 60fps pe desktop, fluid pe mobil.
""")))

created.append(write_file("02_supabase_schema_rls.sql", dedent("""
-- 02 — Supabase schema + RLS (DDL esențial)

-- Orgs & membership
create table if not exists orgs(
  id uuid primary key default gen_random_uuid(),
  name text not null,
  slug text unique check (slug ~ '^[a-z0-9-]{3,40}$'),
  created_at timestamptz not null default now()
);
create table if not exists org_members(
  org_id uuid not null references orgs(id) on delete cascade,
  user_id uuid not null references auth.users(id) on delete cascade,
  role text not null check (role in ('owner','admin','member')),
  created_at timestamptz not null default now(),
  primary key (org_id, user_id)
);

-- Plans, subscriptions, entitlements (flags)
create type plan_code_t as enum ('pilot','pro','enterprise');
create table if not exists plans(
  code plan_code_t primary key,
  name text not null,
  flags jsonb not null,           -- feature_flags canonice (canExportPDF etc.)
  retention_days int not null default 90,
  created_at timestamptz not null default now()
);
create table if not exists subscriptions(
  id uuid primary key default gen_random_uuid(),
  org_id uuid not null references orgs(id) on delete cascade,
  stripe_customer_id text,
  stripe_subscription_id text,
  plan_code plan_code_t not null,
  status text not null,
  seats int not null default 1,
  current_period_end timestamptz,
  created_at timestamptz not null default now()
);
create table if not exists entitlements(
  id bigserial primary key,
  org_id uuid not null references orgs(id) on delete cascade,
  user_id uuid,
  flag text not null,
  value boolean not null default true,
  source text not null,           -- 'plan'|'addon'|'pack'|'license'
  source_ref text,
  meta jsonb,
  expires_at timestamptz,
  created_at timestamptz not null default now(),
  unique (org_id, coalesce(user_id,'00000000-0000-0000-0000-000000000000'::uuid), flag, source, coalesce(source_ref,''))
);

-- Catalog module
create table if not exists modules(
  module_id text primary key,
  name text not null,
  vectors smallint[] not null,    -- 1..7
  spec text,
  output_schema jsonb,
  enabled boolean not null default true,
  created_at timestamptz not null default now()
);

-- Parameter sets & runs
create table if not exists parameter_sets(
  id uuid primary key default gen_random_uuid(),
  domain text not null,
  scale text not null,
  urgency text not null,
  complexity text not null,
  resources text not null,
  application text not null,
  output_formats text[] not null,
  overrides jsonb,
  created_at timestamptz not null default now()
);

create table if not exists runs(
  id uuid primary key default gen_random_uuid(),
  org_id uuid not null references orgs(id) on delete cascade,
  user_id uuid references auth.users(id),
  project_id uuid,
  module_id text not null references modules(module_id),
  parameter_set_id uuid references parameter_sets(id),
  type text not null check (type in ('generation','test','agent_execution')),
  status text not null check (status in ('queued','running','success','error')),
  model text, tokens_used int, cost_usd numeric(10,4), duration_ms int,
  telemetry jsonb, started_at timestamptz default now(), finished_at timestamptz
);

-- Scores (1:1) și Bundles (1:N)
create table if not exists prompt_scores(
  run_id uuid primary key references runs(id) on delete cascade,
  clarity int, execution int, ambiguity int, business_fit int,
  feedback jsonb
);

create table if not exists bundles(
  id uuid primary key default gen_random_uuid(),
  run_id uuid not null references runs(id) on delete cascade,
  formats text[] not null,
  paths jsonb not null,
  checksum text not null,
  exported_at timestamptz not null default now(),
  version text not null,
  license_notice text not null
);

-- Prompt history (neuroni)
create table if not exists prompt_history(
  id uuid primary key default gen_random_uuid(),
  org_id uuid not null references orgs(id) on delete cascade,
  user_id uuid references auth.users(id),
  module_id text not null references modules(module_id),
  parameter_set jsonb not null,
  prompt_hash text not null,
  output_preview text,
  created_at timestamptz not null default now()
);

-- RLS (vizibilitate by-membership)
alter table orgs enable row level security;
alter table org_members enable row level security;
alter table runs enable row level security;
alter table bundles enable row level security;
alter table prompt_history enable row level security;
alter table prompt_scores enable row level security;

create policy runs_select on runs for select using (
  exists(select 1 from org_members m where m.org_id = runs.org_id and m.user_id = auth.uid())
);
create policy bundles_select on bundles for select using (
  exists(select 1 from runs r join org_members m on m.org_id = r.org_id
         where r.id = bundles.run_id and m.user_id = auth.uid())
);
create policy ph_select on prompt_history for select using (
  exists(select 1 from org_members m where m.org_id = prompt_history.org_id and m.user_id = auth.uid())
);

-- Vederi utile
create view v_all_neurons as
select h.id, h.module_id, h.parameter_set, h.prompt_hash, r.id as run_id,
       (s.clarity, s.execution, s.ambiguity, s.business_fit) as scores, h.created_at
from prompt_history h
left join runs r on r.id = h.id
left join prompt_scores s on s.run_id = r.id;
""")))

created.append(write_file("03_api_routes_gating.md", dedent("""
# 03 — API (Next.js App Router) + Gating

## Endpoints
- `POST /api/gpt-editor` — optimizează prompt (nu cere plan).
- `POST /api/gpt-test` — model live + scoring; **gated** `canUseGptTestReal` (Pro+).
- `POST /api/export/bundle` — scrie artefacte, `manifest.json`, `checksum.txt` (Pro: .pdf/.json; Enterprise: + .zip).
- `POST /api/run/{moduleId}` — execuție Enterprise (API key) + rate‑limit pe org.

### Gating standard (flags)
- Export `.pdf` → `canExportPDF`
- Export `.json` → `canExportJSON`
- Bundle `.zip` → `canExportBundleZip`
- API public → `hasAPI`
- Cloud history → `hasCloudHistory`
- GPT test live → `canUseGptTestReal`

## Flux „Run → Score → Export”
1) Normalizezi 7‑D (enum‑only, fallback per domain; calcul semnătură 7D).
2) Rulezi taskul (draft/artifact).
3) Evaluezi (clarity/execution/ambiguity/business_fit; gate ≥ 80; o singură iterație „tighten‑once”).
4) Export: scrii fișierele canonic + `manifest.json` + `checksum`. Persisti în `bundles`.

## Telemetrie (fără PII)
- Model, tokens, cost, TTA, score breakdown, policy_hits, ruleset_version, entitlement_snapshot.

## Rate‑limit
- editor/test: 60 req/min/IP; API public: key‑based per org.

## Erori standardizate
- `ENTITLEMENT_REQUIRED` (403), `RUN_NOT_PASSING` (400), `BUNDLE_ALREADY_EXISTS` (409), `RATE_LIMITED` (429).

## Done‑Definition (API)
- Normalize 7‑D + semnătură stabilă.
- Gating verificat server‑side pentru fiecare acțiune.
- Export determinist (ordine canonică + checksum).
- Telemetrie fără text client.
""")))

created.append(write_file("04_animations_backgrounds.md", dedent("""
# 04 — Fundaluri + Animații (75 SVG) + Conținut

## Background în 4 straturi
1) Grid linii (oscilație, parallax subtil, puls luminanță lent).
2) Tokens verzi (oscilație ±2–6px, micro‑scale, glitch scurt aleator, apariție/stingere constantă).
3) Figuri/axe/bare (traiectorii lente, clipire subtilă; creează profunzime).
4) Citate portocalii (typing 40–60ms/char, blur→clar, 4–6s vizibil, fade‑out 0.8–1.2s; când apar, tokens scad temporar opacitatea).

**Reduce‑motion:** straturile devin aproape statice; se păstrează lizibilitatea fără jank.

## Densități recomandate (desktop/mobil)
- Tokens: ~100 / ~60
- Citate: ~20 / ~12 (rulare rară, impact)
- Lexeme colorate blur: ~24 / ~14 (dezactivate la reduce‑motion)
- Figuri analitice: mediu (dezactivate la reduce‑motion)

## Animații SVG (obligatorii)
1) Clepsidră cu cuvinte (typing → cădere → fade).
2) „You're Bleeding Hours” (stroke fading + „sângerare” roșie).
3) 7 cercuri concentrice (LED cascade).
4) Tabel Before/After (flip + progress bar).
5) Buton „Start the Forge” (flash + linie roșie care desenează conturul).

## Micro‑animații (exemple)
- Cursor prompt (typing/erase)
- Chip data‑flow, Network nodes, Shield protocol (self‑heal)
- Loading ASCII, Binary rain, Fractal expansion etc.

## Integrare
- Folder `/public/svg/…` sau import inline.
- CSS var pentru paletă (obsidian, gold, red, dirty‑white, lead‑gray).
- Respect `prefers-reduced-motion`; test pe low‑end devices.

## Background content
- `BackgroundTokens`: 100 termeni tehnici (Prompt Eng/NLP/DL/RL/AI Symbolism).
- `BackgroundNarrative`: 20 citate originale (≤140 char) despre prompting/AI.
""")))

created.append(write_file("05_pricing_stripe_entitlements.md", dedent("""
# 05 — Pricing, Stripe & Entitlements (gating end‑to‑end)

## Planuri (exemplu)
- **Pilot (Free)**: M01–M10, export .txt/.md, fără cloud history, fără GPT test live.
- **Pro**: M01–M30, export .pdf/.json, cloud history, GPT test live, scoring vizibil.
- **Enterprise**: M01–M50, API, bundle.zip, seats, white‑label, packs industrie.

## Add‑ons / Packs
- Industry Packs (ex: FinTech, Edu, E‑commerce) → chei/packs care deschid domenii + compliance lints + presets.
- Add‑ons: evaluator_advanced, export_designer etc.

## Stripe
- Products/Prices: Pilot(0), Pro(€49/m, €490/y), Enterprise(€299/m base 5 seats, €2990/y).
- Webhooks: `checkout.session.completed`, `customer.subscription.updated|deleted` → `subscriptions` + `entitlements` (flags) actualizate.
- Trial Pro 7 zile → watermark în PDF/JSON.

## Gating UI/API
- UI ascunde controale nepermise; API blochează oricum (403).
- Ex.: Export PDF/JSON → `canExportPDF/JSON`; ZIP → `canExportBundleZip`; GPT test live → `canUseGptTestReal`; Cloud History → `hasCloudHistory`; API → `hasAPI`.

## Monetizare vizibilă în UX
- Paywalls pe momente „aha”: Run GPT (real), Export .pdf/.json, API/ZIP, Library (cloud).
- Upsell: Industry pack când domain blocat.
""")))

created.append(write_file("06_launch_ops_ci_qa.md", dedent("""
# 06 — Launch, Ops, CI/CD, QA & Analytics

## CI/CD
- GitHub → Vercel (Next.js) + Supabase migrations.
- PR previews; main → prod; typecheck, lint, build, DB drift check.

## QA & Performance
- Lighthouse ≥ 95, 60fps pe desktop; mobil fluid; latency API sub 300ms.
- Reduce‑motion respectat; animațiile majore oprite; tranziții scurte.
- Verificare z‑index/stacking; fără coliziuni vizuale; background „calm” la reduce‑motion.

## Observabilitate
- Telemetrie UI: evenimente minime (home_above_fold, cta_primary_click, cta_secondary_click, scroll_75, open_nav).
- Server: runs, scores, bundles; TTA, pass‑rate, incidente guardrails; rapoarte zilnice/săptămânale.

## SEO de bază
- Title ≤60, Meta‑description ≤155, H1 clar, OG tags coerente; sitemap, robots.
- Copy explicit: „generator operațional de prompturi”, „50 module”, „7‑D Parameter Engine”.

## Go‑Live checklist
- Gating verificate; upsell paths OK.
- Export determinist + checksum canonic + manifest complet.
- Stripe webhooks OK; trial watermark OK.
- Librăria on (Pro+), Neuron Explorer minim: listă + filtre + Export/Restore.
""")))

created





(1→6) sau în paralel 1+2+3, apoi 4→5→6.

Executive summary (ce primești)

o structură IA/UX pentru /dashboard (inclus “Neuron Explorer”), 7-D generator, test, export, gating vizibil, accesibilitate și fundal animat pe 4 straturi.

schemă Supabase + RLS + vederi, entitlements/flags, runs→scores→bundles (checksum canonic + manifest).

API-uri (editor/test/export/run) cu ruleset SSOT, DoR/DoD, scor ≥80, fără PII.

content engine: 75 animații SVG, background tokens & narrative, reduce-motion și audit vizual.

pricing & Stripe: Pilot/Pro/Enterprise + packs, paywalls pe “momente aha”, compliance hooks.

launch/QA/obs/SEO: lighthouse ≥95, TTA/score KPIs, GTM-events, copy și OG tags.

1) /dashboard — IA/UX & Neuron Explorer (livrabil: 01_dashboard_ia_ux.md)

Structură pagini

sidebar fix + header fix: Generator, My Prompts, Library (Neuron Explorer), Start here, Docs (API), Resources, AI Tools, Assistants, Community, Client (Setări/Plăți/Keys).
Generator 7-D: dropdown enum-only, semnătură 7-D, editor cu secțiuni standard (ROLE/CONTEXT/OUTPUT/PROCESS/GUARDRAILS/EVAL/TELEMETRY). Test Engine: Simulare (toți), Live (Pro+) – PASS la scor ≥80. Export: .txt/.md/.pdf/.json/ZIP după plan.
Neuron Explorer: filtrare M01–M50, vector(1–7), domain, output, scor; card cu hash/config7D/scor, „Open in Generator”, Export; Sinapse: PDF/video/tools asociate (gated).
Fundal pe 4 straturi (grid/tokens/figuri/citate), reduce-motion: anim. oprite/îmblânzite, densități desktop/mobil.
Accesibilitate: contrast 4.5:1, aria-labels, focus vizibil, live-regions. SEO: H1 clar, meta, OG.

Done (UI): route-guards + paywalls, generator+test+export funcționale, library on, reduce-motion ok, Lighthouse ≥95.

2) Supabase — schema & RLS (livrabil: 02_supabase_schema_rls.sql)

Tabele cheie: orgs, org_members, plans, subscriptions, entitlements, modules, parameter_sets, runs, prompt_scores (1:1), bundles (1:N), prompt_history (neuroni). RLS by-membership, indici utili, view v_all_neurons.
Entitlements/flags: canExportPDF, canExportJSON, canExportBundleZip, canUseGptTestReal, hasCloudHistory, hasAPI etc. (se hidratează din plans/webhooks).
Bundles: artefacte canonice (prompt.txt/.md/.json/.pdf + telemetry + manifest + checksum).

3) API — editor/test/export/run + gating (livrabil: 03_api_routes_gating.md)

POST /api/gpt-editor (optimizare prompt, fără gating)

POST /api/gpt-test (live, scor rubrică; gated canUseGptTestReal)

POST /api/export/bundle (Pro: .pdf/.json; Enterprise: + .zip; manifest + checksum; persist în bundles)

POST /api/run/{moduleId} (Enterprise API key + rate-limit per org)
Reguli: 7-D enum-only, fallback per domain, semnătură 7-D; scor ≥80 (tighten-once), fără PII în telemetrie.

4) Conținut & Animații — 75 SVG + background content (livrabil: 04_animations_backgrounds.md)

Background: 4 straturi (grid, tokens, figuri, citate). Timings: typing 40–60ms/char; fade-out 0.8–1.2s; tokens reduc opacitate când apare un citat; reduce-motion: static/soft.
Tokens/Narrative: 100 termeni + 20 citate (≤140c) – array JSON.
Audit final: densități desktop/mobil, z-index, accesibilitate; stop lexeme/figuri în reduce-motion.
Pachet 75 animații (SVG, brutalist-flat) + obligatorii (clepsidră, “Bleeding Hours”, 7 cercuri/LEDs, Before/After flip, „Start the Forge”).

5) Pricing, Stripe, Entitlements & Packs (livrabil: 05_pricing_stripe_entitlements.md)

Planuri: Pilot (Free), Pro, Enterprise; export și test live cresc gradual; packs (FinTech/Edu/E-commerce) – compliance lints + presets; paywalls în UI pe „momente aha” (Run Live, Export PDF/JSON, ZIP, API, Librărie cloud).
Stripe: webhooks → subscriptions + entitlements (flags), trial Pro cu watermark PDF/JSON; governance/compliance la pachet (DPA, privacy-by-design).

6) Launch, QA, Observabilitate, SEO (livrabil: 06_launch_ops_ci_qa.md)

CI/CD: GitHub→Vercel, migrations Supabase, PR previews, drift check.
QA: Lighthouse ≥95, 60fps, reduce-motion respectat, jank-free; export determinist (checksum + manifest).
Obs: TTA text ≤60s, SOP ≤300s; pass-rate ≥99% săptămânal; fără PII; GTM events minime (view_home_above_fold, cta_primary_click, cta_secondary_click, scroll_75, open_nav).
SEO: titlu≤60, meta≤155, OG tags; copy clar („50 module”, „7-D Parameter Engine”, „bundle export”).

Note rapide pentru implementare

Domains 7-D canon (CORE 25) — folosește enumurile la UI + fallback per domain.

SSOT & Rulebook — nu permite override ale secțiunilor standard; DoR/DoD obligatorii (score ≥80 + manifest + checksum + telemetrie fără PII).

Bundles/ERD — runs → prompt_scores (1:1), runs → bundles (1:N); index pe (org_id, started_at desc), (run_id).
