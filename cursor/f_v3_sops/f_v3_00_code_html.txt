<html lang="ro"><head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PROMPTFORGE™ v3.0 - Sistemul Complet</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.4.0/css/all.min.css">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        
        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #0c0c0c 0%, #1a1a1a 100%);
            color: #e5e5e5;
            line-height: 1.6;
            overflow-x: hidden;
        }
        
        .glass-effect {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .glow-blue {
            box-shadow: 0 0 20px rgba(59, 130, 246, 0.3);
        }
        
        .glow-green {
            box-shadow: 0 0 20px rgba(34, 197, 94, 0.3);
        }
        
        .glow-purple {
            box-shadow: 0 0 20px rgba(147, 51, 234, 0.3);
        }
        
        .glow-amber {
            box-shadow: 0 0 20px rgba(245, 158, 11, 0.3);
        }
        
        .module-card {
            transition: all 0.3s ease;
            border-left: 3px solid transparent;
        }
        
        .module-card:hover {
            transform: translateY(-2px);
            border-left-color: #3b82f6;
        }
        
        .vector-1 { border-left-color: #ef4444; }
        .vector-2 { border-left-color: #3b82f6; }
        .vector-3 { border-left-color: #10b981; }
        .vector-4 { border-left-color: #f59e0b; }
        .vector-5 { border-left-color: #8b5cf6; }
        .vector-6 { border-left-color: #06b6d4; }
        .vector-7 { border-left-color: #f97316; }
        
        .prompt-output {
            background: #1a1a1a;
            border: 1px solid #333;
            font-family: 'Courier New', monospace;
            white-space: pre-wrap;
            max-height: 400px;
            overflow-y: auto;
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
            transition: all 0.3s ease;
        }
        
        .btn-primary:hover {
            background: linear-gradient(135deg, #1d4ed8 0%, #1e40af 100%);
            transform: translateY(-1px);
        }
        
        .btn-secondary {
            background: linear-gradient(135deg, #374151 0%, #1f2937 100%);
            transition: all 0.3s ease;
        }
        
        .btn-secondary:hover {
            background: linear-gradient(135deg, #1f2937 0%, #111827 100%);
            transform: translateY(-1px);
        }
        
        .vector-badge {
            display: inline-block;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 10px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .v1 { background: rgba(239, 68, 68, 0.2); color: #fca5a5; }
        .v2 { background: rgba(59, 130, 246, 0.2); color: #93c5fd; }
        .v3 { background: rgba(16, 185, 129, 0.2); color: #6ee7b7; }
        .v4 { background: rgba(245, 158, 11, 0.2); color: #fcd34d; }
        .v5 { background: rgba(139, 92, 246, 0.2); color: #c4b5fd; }
        .v6 { background: rgba(6, 182, 212, 0.2); color: #67e8f9; }
        .v7 { background: rgba(249, 115, 22, 0.2); color: #fdba74; }
        
         {
            body { background: white; color: black; }
            .glass-effect { background: white; border: 1px solid #ccc; }
            .glow-blue, .glow-green, .glow-purple, .glow-amber { box-shadow: none; }
        }
        
        .section-break {
            page-break-inside: avoid;
            margin-bottom: 2rem;
        }
        
        .no-break {
            page-break-inside: avoid;
        }
    </style>
<style>
    .genspark-notice-dialog {
      display: flex;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      z-index: 10001;
      align-items: center;
      justify-content: center;
    }

    .genspark-notice-content {
      background-color: white;
      border-radius: 8px;
      max-width: 600px;
      width: 90%;
      box-sizing: border-box;
      padding: 10px 30px 30px 30px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      font-size: 16px;
    }

    .genspark-notice-title {
      color: #000;
      font-family: Arial;
      font-size: 20px;
      font-style: normal;
      font-weight: 700;
      line-height: 150%; 
    }

    .genspark-notice-list {
      margin: 24px 0;
      
      color: #606366;
      font-family: Arial;
      font-size: 14px;
      font-style: normal;
      font-weight: 400;
      line-height: 150%;
      padding-left: 12px;
    }

    .genspark-notice-list li {
      margin-bottom: 12px;
      list-style-type: disc;
    }

    .genspark-notice-list li a {
      color: #606366;
      text-decoration: underline;
    }

    .genspark-notice-checkbox {
      display: flex;
      align-items: center;
      margin-top: 20px;
      gap: 10px;

      color: #232425;

      font-family: Arial;
      font-size: 14px;
      font-style: normal;
      font-weight: 400;
      line-height: normal;
    }

    .genspark-notice-actions {
      display: flex;
      justify-content: center;
      margin-top: 20px;
    }
      
    .genspark-notice-ok {
      color: #232425;

      text-align: center;
      font-family: Arial;
      font-size: 16px;
      font-style: normal;
      font-weight: 700;
      line-height: 150%; 

      cursor: pointer;
      display: flex;
      height: 40px;
      padding: 6px 14px;
      justify-content: center;
      align-items: center;
      gap: 10px;
      align-self: stretch;
      border-radius: 8px;
      border: 1px solid #000;
      box-sizing: border-box;
      width: 100%;
    }
  </style><style type="text/css">@import url('https://fonts.googleapis.com/css2?family=Work+Sans:ital,wght@0,100..900;1,100..900&display=swap');</style><style id="monica-reading-highlight-style">
        .monica-reading-highlight {
          animation: fadeInOut 1.5s ease-in-out;
        }

        @keyframes fadeInOut {
          0%, 100% { background-color: transparent; }
          30%, 70% { background-color: rgba(2, 118, 255, 0.20); }
        }
      </style></head>
<body class="p-4" monica-id="ofpnmcalabcbjgholdjcjblkibolbppb" monica-version="7.9.7">
    <!-- Header -->
    <div class="text-center mb-8 section-break">
        <h1 class="text-4xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-purple-500 mb-2">
            <i class="fas fa-cogs mr-3"></i>PROMPTFORGE™ v3.0
        </h1>
        <p class="text-lg text-gray-300 mb-4">Generator Cognitiv Industrial - Sistemul Complet</p>
        <div class="flex justify-center space-x-4 text-sm">
            <span class="px-3 py-1 bg-blue-600 rounded-full">50 Module Cognitive</span>
            <span class="px-3 py-1 bg-purple-600 rounded-full">7 Vectori Semantici</span>
            <span class="px-3 py-1 bg-green-600 rounded-full">Editor GPT Integrat</span>
            <span class="px-3 py-1 bg-amber-600 rounded-full">Test Engine Real-Time</span>
        </div>
    </div>

    <!-- Control Panel -->
    <div class="glass-effect rounded-xl p-6 mb-8 glow-blue section-break">
        <h2 class="text-2xl font-semibold mb-4"><i class="fas fa-sliders-h mr-2"></i>Panoul de Control</h2>
        
        <div class="grid grid-cols-1 lg:grid-cols-4 gap-4 mb-6">
            <div>
                <label class="block text-sm font-medium mb-2">Vector Semantic</label>
                <select id="vectorSelect" class="w-full bg-gray-800 border border-gray-600 rounded-lg px-3 py-2 text-sm">
                    <option value="all">Toate Vectorii</option>
                    <option value="1">V1: Arhitectura Operațională</option>
                    <option value="2">V2: Retorică &amp; Credibilitate</option>
                    <option value="3">V3: Producție Conținut</option>
                    <option value="4">V4: Decizii &amp; Cognitive</option>
                    <option value="5">V5: Branding Semiotic</option>
                    <option value="6">V6: Date &amp; Analiticii</option>
                    <option value="7">V7: Criză &amp; PR</option>
                </select>
            </div>
            
            <div>
                <label class="block text-sm font-medium mb-2">Domeniu</label>
                <select id="domainSelect" class="w-full bg-gray-800 border border-gray-600 rounded-lg px-3 py-2 text-sm">
                    <option value="SaaS">SaaS</option>
                    <option value="fintech">FinTech</option>
                    <option value="ecommerce">E-commerce</option>
                    <option value="consulting">Consultanță</option>
                    <option value="personal_brand">Personal Brand</option>
                    <option value="education">Educație</option>
                </select>
            </div>
            
            <div>
                <label class="block text-sm font-medium mb-2">Scară</label>
                <select id="scaleSelect" class="w-full bg-gray-800 border border-gray-600 rounded-lg px-3 py-2 text-sm">
                    <option value="startup">Startup</option>
                    <option value="corporate">Corporate</option>
                    <option value="personal_brand">Personal Brand</option>
                    <option value="enterprise">Enterprise</option>
                </select>
            </div>
            
            <div>
                <label class="block text-sm font-medium mb-2">Complexitate</label>
                <select id="complexitySelect" class="w-full bg-gray-800 border border-gray-600 rounded-lg px-3 py-2 text-sm">
                    <option value="standard">Standard</option>
                    <option value="avansat">Avansat</option>
                    <option value="expert">Expert</option>
                </select>
            </div>
        </div>
        
        <div class="grid grid-cols-1 lg:grid-cols-4 gap-4 mb-6">
            <div>
                <label class="block text-sm font-medium mb-2">Urgență</label>
                <select id="urgencySelect" class="w-full bg-gray-800 border border-gray-600 rounded-lg px-3 py-2 text-sm">
                    <option value="pilot">Pilot</option>
                    <option value="sprint">Sprint</option>
                    <option value="enterprise">Enterprise</option>
                    <option value="crisis">Criză</option>
                </select>
            </div>
            
            <div>
                <label class="block text-sm font-medium mb-2">Resurse</label>
                <select id="resourcesSelect" class="w-full bg-gray-800 border border-gray-600 rounded-lg px-3 py-2 text-sm">
                    <option value="solo">Solo</option>
                    <option value="team">Echipă</option>
                    <option value="budget_mare">Buget Mare</option>
                    <option value="minimal">Minimal</option>
                </select>
            </div>
            
            <div>
                <label class="block text-sm font-medium mb-2">Aplicație</label>
                <select id="applicationSelect" class="w-full bg-gray-800 border border-gray-600 rounded-lg px-3 py-2 text-sm">
                    <option value="training">Training</option>
                    <option value="audit">Audit</option>
                    <option value="implementare">Implementare</option>
                    <option value="crisis_response">Răspuns Criză</option>
                </select>
            </div>
            
            <div>
                <label class="block text-sm font-medium mb-2">Format Output</label>
                <select id="outputSelect" class="w-full bg-gray-800 border border-gray-600 rounded-lg px-3 py-2 text-sm">
                    <option value="spec">Spec Tehnică</option>
                    <option value="playbook">Playbook</option>
                    <option value="checklist">Checklist</option>
                    <option value="json">JSON</option>
                </select>
            </div>
        </div>
    </div>

    <!-- Module Selection -->
    <div class="glass-effect rounded-xl p-6 mb-8 glow-green section-break">
        <h2 class="text-2xl font-semibold mb-4"><i class="fas fa-layer-group mr-2"></i>Selecție Module</h2>
        <div id="moduleGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <!-- Modules will be populated by JavaScript -->
        </div>
    </div>

    <!-- Generated Prompt Section -->
    <div class="glass-effect rounded-xl p-6 mb-8 glow-purple section-break">
        <h2 class="text-2xl font-semibold mb-4"><i class="fas fa-code mr-2"></i>Prompt Generat</h2>
        
        <div class="mb-4">
            <button onclick="generatePrompt()" class="btn-primary px-6 py-3 rounded-lg font-semibold text-white mr-4">
                <i class="fas fa-magic mr-2"></i>Generează Prompt
            </button>
            <button onclick="rerollPrompt()" class="btn-secondary px-6 py-3 rounded-lg font-semibold text-white mr-4">
                <i class="fas fa-dice mr-2"></i>Reroll
            </button>
            <button onclick="exportPrompt()" class="btn-secondary px-6 py-3 rounded-lg font-semibold text-white">
                <i class="fas fa-download mr-2"></i>Export
            </button>
        </div>
        
        <div class="mb-4 p-4 bg-gray-800 rounded-lg">
            <div class="flex items-center justify-between mb-2">
                <span class="text-sm font-medium">Config Sesiunea:</span>
                <span id="sessionHash" class="text-xs text-gray-400">Hash: [va fi generat]</span>
            </div>
            <div id="sessionConfig" class="text-sm text-gray-300">
                <!-- Session config will be displayed here -->
            </div>
        </div>
        
        <textarea id="promptOutput" class="prompt-output w-full h-80 p-4 rounded-lg text-sm" placeholder="Promptul generat va apărea aici..."></textarea>
    </div>

    <!-- GPT Editor Section -->
    <div class="glass-effect rounded-xl p-6 mb-8 glow-amber section-break">
        <h2 class="text-2xl font-semibold mb-4"><i class="fas fa-edit mr-2"></i>Editor GPT-Powered</h2>
        
        <div class="mb-4">
            <button onclick="invokeGptEditor()" class="btn-primary px-6 py-3 rounded-lg font-semibold text-white mr-4">
                <i class="fas fa-robot mr-2"></i>Optimizează cu GPT
            </button>
            <button onclick="validateStructure()" class="btn-secondary px-6 py-3 rounded-lg font-semibold text-white">
                <i class="fas fa-check-circle mr-2"></i>Validează Structura
            </button>
        </div>
        
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div>
                <h3 class="text-lg font-semibold mb-2">Original</h3>
                <textarea id="originalPrompt" class="prompt-output w-full h-64 p-4 rounded-lg text-sm" readonly=""></textarea>
            </div>
            <div>
                <h3 class="text-lg font-semibold mb-2">Optimizat GPT</h3>
                <textarea id="editedPrompt" class="prompt-output w-full h-64 p-4 rounded-lg text-sm"></textarea>
            </div>
        </div>
        
        <div id="editorStatus" class="mt-4 p-3 rounded-lg hidden">
            <!-- Editor status will be shown here -->
        </div>
    </div>

    <!-- Test Engine Section -->
    <div class="glass-effect rounded-xl p-6 mb-8 section-break">
        <h2 class="text-2xl font-semibold mb-4"><i class="fas fa-flask mr-2"></i>Test Engine</h2>
        
        <div class="mb-4">
            <button onclick="testPrompt()" class="btn-primary px-6 py-3 rounded-lg font-semibold text-white mr-4">
                <i class="fas fa-play mr-2"></i>Testează Prompt
            </button>
            <button onclick="validateKPI()" class="btn-secondary px-6 py-3 rounded-lg font-semibold text-white">
                <i class="fas fa-chart-line mr-2"></i>Validează KPI
            </button>
        </div>
        
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div>
                <h3 class="text-lg font-semibold mb-2">Input Test</h3>
                <textarea id="testInput" class="prompt-output w-full h-48 p-4 rounded-lg text-sm" placeholder="Promptul de testat..."></textarea>
            </div>
            <div>
                <h3 class="text-lg font-semibold mb-2">Rezultat GPT</h3>
                <div id="testOutput" class="prompt-output w-full h-48 p-4 rounded-lg text-sm bg-gray-900 border-green-500 border overflow-y-auto">
                    <span class="text-gray-500">Rezultatul testului va apărea aici...</span>
                </div>
            </div>
        </div>
        
        <div id="testValidation" class="mt-4 p-4 bg-gray-800 rounded-lg hidden">
            <h4 class="font-semibold mb-2">Validare Automată</h4>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div class="text-center">
                    <div id="structureScore" class="text-2xl font-bold text-green-400">--</div>
                    <div class="text-sm text-gray-400">Structură</div>
                </div>
                <div class="text-center">
                    <div id="kpiScore" class="text-2xl font-bold text-blue-400">--</div>
                    <div class="text-sm text-gray-400">KPI Compliance</div>
                </div>
                <div class="text-center">
                    <div id="clarityScore" class="text-2xl font-bold text-purple-400">--</div>
                    <div class="text-sm text-gray-400">Claritate</div>
                </div>
            </div>
        </div>
    </div>

    <!-- History Section -->
    <div class="glass-effect rounded-xl p-6 mb-8 section-break">
        <h2 class="text-2xl font-semibold mb-4"><i class="fas fa-history mr-2"></i>Istoric Generări</h2>
        <div id="historyList" class="space-y-3">
            <div class="text-gray-400 text-center py-8">
                <i class="fas fa-clock text-3xl mb-2"></i>
                <p>Istoricul va fi populat după prima generare</p>
            </div>
        </div>
    </div>

    <script>
        // Module Database - Complete 50 Modules from CUSNIR Archive
        const MODULES = {
            1: {
                name: "AI‑IDEI.SOPFORGE™",
                description: "Pipeline multi‑agent research→validare→SOP cu telemetrie",
                requirements: "[SUBIECT], [NIVEL], [CONTEXT], [FORMAT], [LIMBĂ], [DEADLINE], [BUDGET], 6+ surse cu autor+dată",
                spec: "Proces 4‑agenți: SourceMiner→ConflictResolver→ProcedureBuilder→QAPilot",
                output: "{goal,scope,roles,tools[],steps[{action,why,link,est_min}],risks[],fallbacks[],checklist[],sources[{url,autor,dată}]}",
                kpi: "TTI, %steps_passed, coverage surse, defect rate <2%",
                guardrails: "no guesswork, citează oficial",
                vectors: [1, 6, 5]
            },
            2: {
                name: "AI‑IDEI.LATENTMAP™",
                description: "Mapează corpus și derivă traiectorii latente",
                requirements: "[CORPUS_PATHS], [HORIZON_DAYS], [DEPTH], anti_surface=true",
                spec: "Embeddings multi‑scale + topic mining + dependency graph",
                output: "{latent_graph, motifs[], strategies[], trajectories[], actions[]}",
                kpi: "modularity>0.35, NMI pe validare >0.6",
                guardrails: "test out‑of‑domain; fallback interpretabil",
                vectors: [2, 5]
            },
            3: {
                name: "Codul 7:1™",
                description: "Generator campanii end‑to‑end cu KPI",
                requirements: "[PRODUS], [AVATAR], [OBIECTIV], [BUGET], [KPI]",
                spec: "Pipeline 7 etape→1 verdict comercial",
                output: "{wound,paradox,strip,unpacking,psych_funnel,metaphor,verdict,assets[],tests[]}",
                kpi: "uplift CR target +15%",
                guardrails: "fără promisiuni nerealiste; probe sociale atașate",
                vectors: [2, 6]
            },
            4: {
                name: "Dicționarul Semiotic 8VULTUS™",
                description: "Invocabil în GPT + teste memetice",
                requirements: "[BRAND_SYSTEM], [SYMBOL_SET], [DOMENIU]",
                spec: "Mapare simbol→funcție retorică→exemple validabile",
                output: "{symbol,meaning,do_say,dont_say,memetic_tests[]}",
                kpi: "recall semnificare >90%",
                guardrails: "coerență inter‑document",
                vectors: [2, 5]
            },
            5: {
                name: "ORAKON Memory Grid",
                description: "Memorie stratificată + politici de uitare controlată",
                requirements: "[LAYERS:{core,project,session,ephemeral}], [TTL], [RETENTION_POLICY]",
                spec: "Rules: ce intră în fiecare layer; LRU + TTL",
                output: "{write_rules,read_rules,forget_rules,compaction_jobs}",
                kpi: "hit‑rate >70%, leak=0",
                guardrails: "PII hashing",
                vectors: [4, 5]
            },
            6: {
                name: "Agentic GPT Sales",
                description: "Roluri Hunter/Closer/Nurturer + playbook conversațional",
                requirements: "[OFERTE], [ICP], [OBIECTIVE_PIPE], [CANAL]",
                spec: "3 agenți + director logic",
                output: "{openers,diagnostic,objections,closing,handoff}",
                kpi: "reply rate, SQL%, time‑to‑close",
                guardrails: "etică anti‑presiune",
                vectors: [2]
            },
            7: {
                name: "Risk & Trust Reversal",
                description: "Pentru ofertă high‑ticket cu garanții cuantificate",
                requirements: "[PREȚ], [RISC_PERCEPUT], [DOVEZI], [GARANȚII]",
                spec: "Arhitectură: guarantee stack, escrow opțional, milestone refunds",
                output: "{claims,proofs,guarantees,terms,FAQ}",
                kpi: "drop‑off -25%",
                guardrails: "juridic valid",
                vectors: [2, 7]
            },
            8: {
                name: "Status‑Tier Loyalty",
                description: "Sistem bronze→mythic cu privilegii simbolice și LTV target",
                requirements: "[SEGMENTE], [LTV_TARGET], [BENEFICII]",
                spec: "Tiers cu praguri, privilegii simbolice, XP logic",
                output: "{tiers[],rules,perks,progression}",
                kpi: "LTV +30%, churn -15%",
                guardrails: "fără „pay to humiliate"",
                vectors: [2, 5]
            },
            9: {
                name: "Post‑Purchase Subscription Engine",
                description: "Onboarding, habit loops, churn traps etice",
                requirements: "[PLANURI], [ONBOARDING_FLOW], [HABIT_EVENTS]",
                spec: "Habit loops + nudging etic + churn early‑warning",
                output: "{onboarding,activation,upsell,retention,winback}",
                kpi: "D30 retention>35%",
                guardrails: "opt‑out clar",
                vectors: [1, 6]
            },
            10: {
                name: "Zero‑Party Data OS",
                description: "Colectare etică + personalizare în timp real",
                requirements: "[FORMULARE], [INCENTIVE], [SCOPURI_PERSONALIZARE]",
                spec: "Colectare etică; JSON store cu consimțământ",
                output: "{schemas,questions,rules,personalization}",
                kpi: "completion>60%, consent 100%",
                guardrails: "GDPR‑ready",
                vectors: [6]
            },
            11: {
                name: "Funnel Nota Doi",
                description: "Orchestrează în Make/Zapier: lead→quiz→VIP→curs",
                requirements: "[TRIGGER], [A/B_POINTS], [TAGGING]",
                spec: "Lead→quiz→VIP→curs; webhooks; retries",
                output: "{scenarii,steps,errors,DLQ}",
                kpi: "throughput, fail<1%",
                guardrails: "idempotent",
                vectors: [1]
            },
            12: {
                name: "Diagnostic de Vizibilitate",
                description: "Automat pe 8 piloni cu scoring + e‑mailing",
                requirements: "[ITEMS], [SCORING], [THRESHOLDS]",
                spec: "Chestionar→score→raport→email",
                output: "{score,pillar_breakdown,actions}",
                kpi: "completion>70%, reply to plan>25%",
                guardrails: "no fluff",
                vectors: [1]
            },
            13: {
                name: "Pricing Psychology",
                description: "Cu ancorare, pachete și decoy, testat pe Stripe",
                requirements: "[ANCHOR], [BUNDELE], [DECOY], [TEST_PLAN]",
                spec: "Experimente pe preț; Stripe Price API",
                output: "{price_matrix,tests,readouts}",
                kpi: "ARPU↑, CR net↑",
                guardrails: "transparență preț",
                vectors: [4]
            },
            14: {
                name: "Authority Content→Commerce",
                description: "12 piloni editoriali legați de oferte",
                requirements: "[PILONS], [ASSETS], [OFFERS]",
                spec: "Harta editorială→ofertare",
                output: "{calendar,links_to_offers,proofs}",
                kpi: "ATC rate↑",
                guardrails: "evită clickbait",
                vectors: [1, 2]
            },
            15: {
                name: "GTD de Lançare Ritualică",
                description: "CUSNIR.TEMPLAR™ cu calendar T‑30→T+14",
                requirements: "[CALENDAR], [MOMENTE_RITUALE], [KPI]",
                spec: "Checklist cu owners; ICS export",
                output: "{timeline,tasks,risks}",
                kpi: "readiness 100%",
                guardrails: "single‑point‑of‑failure map",
                vectors: [1, 5]
            },
            16: {
                name: "AI Clone HeyGen",
                description: "Script, timbru vocal, etică, disclaimere, QA",
                requirements: "[SCRIPT], [VOICEPRINT], [ETHICS]",
                spec: "Script map, disclaimers, consent",
                output: "{video_specs,QA,acceptance}",
                kpi: "lip‑sync score>0.9",
                guardrails: "no impersonation",
                vectors: [3]
            },
            17: {
                name: "Preseturi Sora",
                description: "Shot‑by‑shot, stil balcano‑moldovenesc, fețe hiperrealiste",
                requirements: "[STORYBOARD], [LOOK&FEEL], [CONSTRAINTS]",
                spec: "Prompturi per cadru; timing; camera moves",
                output: "{shots[],audio_notes,export}",
                kpi: "coherence score",
                guardrails: "fețe realiste, fără defăimare",
                vectors: [3, 5]
            },
            18: {
                name: "Carusele RFA",
                description: "Retorică Fără Anestezie cu structură: copertă→lamă→verdict",
                requirements: "[TEMA], [TEZĂ], [DOVEZI], [CTA]",
                spec: "7–9 slide‑uri; hook dur; verdict clar",
                output: "{slides[],copy_len}",
                kpi: "save rate, shares",
                guardrails: "fără atacuri personale",
                vectors: [2, 5]
            },
            19: {
                name: "Rescriere Postări",
                description: "Sub‑performante după algoritmul platformei + abateri măsurabile",
                requirements: "[POST], [PLATFORM], [WHY_FAIL], [TARGET]",
                spec: "Diagnostichează→rescrie→test A/B",
                output: "{hypothesis,variantA,B}",
                kpi: "uplift distrib + engagement",
                guardrails: "păstrează adevărul",
                vectors: [3, 7]
            },
            20: {
                name: "Manifest Voice",
                description: "Zilnic (20:00) cu fir narativ și CTA testabil",
                requirements: "[ARC], [CTA], [THEME]",
                spec: "Generator text cu telemetrie; programare",
                output: "{text,slug,metrics_hook}",
                kpi: "open rate, replies",
                guardrails: "consecvență ton",
                vectors: [2]
            },
            21: {
                name: "SOP pentru AI în Moodle",
                description: "Feedback automatizat + rubrici",
                requirements: "[MoodleVersion], [GPT_API], [Rubrics]",
                spec: "Conector LTI/API; rubric engine",
                output: "{setup,flows,security}",
                kpi: "latency<3s/essay",
                guardrails: "bias disclosure",
                vectors: [1, 3]
            },
            22: {
                name: "SOP Lead Gen",
                description: "Make + Notion + Telegram, cu failover",
                requirements: "[FORMS], [DB_SCHEMA], [BOT]",
                spec: "Orchestrare cu retries; failover Telegram DM",
                output: "{blueprints,webhooks,dlq}",
                kpi: "lead capture rate",
                guardrails: "spam control",
                vectors: [1]
            },
            23: {
                name: "SOP Podcast→Carte",
                description: "Transcriere→capitole→editare→layout→ISBN",
                requirements: "[TRANSCRIPȚII], [STRUCTURĂ], [STYLE_GUIDE]",
                spec: "Segmente→capitole; ISBN meta",
                output: "{TOC,chapters,layout}",
                kpi: "TTE<14 zile",
                guardrails: "drepturi invitați",
                vectors: [1, 3]
            },
            24: {
                name: "SOP PR Personal",
                description: "Control index Google + răspunsuri oficiale",
                requirements: "[KEY_TERMS], [ASSETS], [STATEMENT]",
                spec: "Entity SEO + oferte media + răspuns oficial",
                output: "{press_kit,fact_sheet,faq}",
                kpi: "SERP control pe brand",
                guardrails: "conform legal",
                vectors: [7]
            },
            25: {
                name: "SOP Knowledge Security",
                description: "Clasificare fișiere + redlines GPT",
                requirements: "[CLASSIFICATION], [ACCESS], [REDACTIONS]",
                spec: "DLP; PII masker; policy JSON",
                output: "{labels,acl,redlines}",
                kpi: "incident=0",
                guardrails: "audit trail",
                vectors: [6, 7]
            },
            26: {
                name: "JTBD Matrix",
                description: "Pe avatarul Andrei Moșanu: 5 situații×5 niveluri",
                requirements: "[JOBS], [SITUAȚII×NIVELE], [CRITERII_SUCCES]",
                spec: "Matrice 5×5; citare Jobs To Be Done",
                output: "{jobs[],forces,pains,gains}",
                kpi: "clarity index",
                guardrails: "fără stereotipuri",
                vectors: [4]
            },
            27: {
                name: "Schwartz Ladder",
                description: "Cu mesaje pe nivel + probe sociale",
                requirements: "[STAGE_MAP], [MESAJ], [PROBE]",
                spec: "Mesaje pe stadii conștiință; social proof per nivel",
                output: "{ladder:{aware→most aware},assets}",
                kpi: "lift pe segment",
                guardrails: "nu manipula suferințe",
                vectors: [4]
            },
            28: {
                name: "Arhitectura Obiecții→Contraargumente",
                description: "Confirmare + 2 lame strategice",
                requirements: "[OBIECȚII], [DOVEZI], [POLITETE_ZERO]",
                spec: "Format: confirmare empatică + 2 lame strategice",
                output: "{replies[],evidence}",
                kpi: "rebuttal success rate",
                guardrails: "respect",
                vectors: [2, 4]
            },
            29: {
                name: "Cadru de Indoctrinare Soft",
                description: "Micro‑ritualuri și lexic proprietar",
                requirements: "[RITUALURI], [LEXIC], [MICROACȚIUNI]",
                spec: "Micro‑ritualuri; cod verbal; reinforcement",
                output: "{rituals[],phrases[],cadence}",
                kpi: "habit adoption",
                guardrails: "etică",
                vectors: [2, 5]
            },
            30: {
                name: "Cod Anti‑Conformism",
                description: "Pentru echipă: fraze interzise + alternative",
                requirements: "[FRAZE_INTERZISE], [ALTERNATIVE], [DEFINIȚII]",
                spec: "Linting lingvistic + examples",
                output: "{do/don't,violations}",
                kpi: "%conformism↓",
                guardrails: "nu bloca creativitatea",
                vectors: [2]
            },
            31: {
                name: "Closed‑Loop Telemetry",
                description: "GA4/Mixpanel→BigQuery→re‑antrenare prompturi",
                requirements: "[EVENTS], [SCHEMAS], [SLOs]",
                spec: "ETL → BigQuery → re‑antrenare prompturi",
                output: "{pipelines,queries,alerts}",
                kpi: "freshness <15m",
                guardrails: "PII safe",
                vectors: [6]
            },
            32: {
                name: "Cohort Experiments",
                description: "6 teste cu praguri de succes și buget minim",
                requirements: "[HYPOTHESES], [SAMPLE], [ALPHA]",
                spec: "Split by cohort; sequential test",
                output: "{designs,power,stopping}",
                kpi: "MDE atins",
                guardrails: "p‑hacking zero",
                vectors: [6]
            },
            33: {
                name: "Lead Scoring Model",
                description: "Combinând intenție semantică + evenimente comportamentale",
                requirements: "[FEATURES], [LABELS], [THRESHOLD]",
                spec: "Pontaje: intent semantic (NLP) + evenimente",
                output: "{score,explain,route}",
                kpi: "PR/RE balans",
                guardrails: "fairness",
                vectors: [6]
            },
            34: {
                name: "K‑Factors pentru comunitate",
                description: "Implementează bucle de recomandare",
                requirements: "[INCENTIVE], [SHARE_PATHS], [TRACKING]",
                spec: "Viral loops + referral subsystem",
                output: "{k_factors,loops,copy}",
                kpi: "K>1",
                guardrails: "anti‑abuz",
                vectors: [6]
            },
            35: {
                name: "Content Heatmap",
                description: "Ce convertește pe segmente, la ore și formate",
                requirements: "[PLATFORME], [SEGMENTE], [INTERVALE]",
                spec: "Agregări; densitate conversii",
                output: "{heatmap,cadence,topics}",
                kpi: "CR pe sloturi",
                guardrails: "nu confunda corelații",
                vectors: [6]
            },
            36: {
                name: "Semiotic Brand Architecture",
                description: "Pentru NOVA/ORAKON/8VULTUS (simboluri→oferte)",
                requirements: "[SIMBOLURI], [NARAȚIUNI], [OFERTE]",
                spec: "Triadă: simbol→poveste→produs",
                output: "{maps,phrasing,visual_codes}",
                kpi: "memorabilitate",
                guardrails: "consistență",
                vectors: [5]
            },
            37: {
                name: "Ritual de Inițiere",
                description: "Pentru The Architect: jurământ, provocare, recompensă",
                requirements: "[JURĂMÂNT], [PROVOCARE], [RECOMPENSĂ]",
                spec: "Secvență în 3 acte; gating",
                output: "{script,criteria,badge}",
                kpi: "conversion→core",
                guardrails: "siguranță psihologică",
                vectors: [5]
            },
            38: {
                name: "Blueprint Antișcoală",
                description: "Module, coduri grafice, assets și reguli",
                requirements: "[STYLE_GUIDE], [MODULES], [ASSETS]",
                spec: "Design system + grid; export",
                output: "{tokens,components,docs}",
                kpi: "time‑to‑asset↓",
                guardrails: "accesibilitate",
                vectors: [3, 5]
            },
            39: {
                name: "Promptoscopie™",
                description: "Pentru termeni‑cheie: emoție→logică→joc→destin",
                requirements: "[TERMEN], [CONTEXT], [SCOP]",
                spec: "4 faze: emoție→logică→joc→destin; rapoarte",
                output: "{analysis,frames,tests}",
                kpi: "clarity gain",
                guardrails: "fals pozitiv minim",
                vectors: [3, 5]
            },
            40: {
                name: "Voice System",
                description: "Vocea, Fabrica, Auto, Revenue cu KPI pe layer",
                requirements: "[LAYER_KPI], [RESURSE], [SLA]",
                spec: "4 layere interconectate; handoffs",
                output: "{roadmap,owners,metrics}",
                kpi: "de la voce→income <60 zile",
                guardrails: "debt management",
                vectors: [3, 5]
            },
            41: {
                name: "Agent de Criză PR",
                description: "Detectează narațiuni ostile și răspunde simbolic",
                requirements: "[MONITORING], [SEVERITY], [STANCE]",
                spec: "Detect→triage→respond→learn",
                output: "{playbooks,templates,escalations}",
                kpi: "MTTR↓",
                guardrails: "evitare Streisand",
                vectors: [7]
            },
            42: {
                name: "Contra‑cadru mediatic",
                description: "Pentru politici media MD/RO, cu citări legale",
                requirements: "[POLICY_TOPICS], [LEGISLAȚIE_LINKS], [CITĂRI]",
                spec: "Crafting narativ + citări; disclaimere",
                output: "{arguments,refs,Q&A}",
                kpi: "sentiment shift",
                guardrails: "acuratețe legală",
                vectors: [7]
            },
            43: {
                name: "Politica de Transparență",
                description: "Pentru colaborări plătite: text scurt, fără cost reputațional",
                requirements: "[SCENARII], [FORMULĂ_SCURTĂ], [LOCAȚII_AFISARE]",
                spec: "Texte standard; auto‑inserție",
                output: "{policy_texts,placement}",
                kpi: "risc reputațional↓",
                guardrails: "claritate",
                vectors: [7]
            },
            44: {
                name: "Ethical Guardrails în GPT",
                description: "Ce refuzi, ce redirecționezi, cu mesaje",
                requirements: "[ALLOW], [REFUSE], [REDIRECT], [MSG_TEMPLATES]",
                spec: "Rules engine + tests",
                output: "{policies,tests,logs}",
                kpi: "false allow/refuse <1%",
                guardrails: "auditabil",
                vectors: [7]
            },
            45: {
                name: "Simulator de Contrafactuale",
                description: "Testez variantă fără buget media",
                requirements: "[CAMPANIE], [CONSTRÂNGERI], [KPI]",
                spec: "Simulare pe date istorice + model latent",
                output: "{scenarii,impact,riscuri}",
                kpi: "eroare pred <20%",
                guardrails: "incertitudine explicită",
                vectors: [6, 4]
            },
            46: {
                name: "Librăria de Swipe Files",
                description: "Categorii, taguri, căutare semantică, abonament",
                requirements: "[CATEGORII], [TAGS], [SEARCH_API]",
                spec: "Index semantic; ACL abonamente",
                output: "{index,examples,license}",
                kpi: "time‑to‑find↓",
                guardrails: "drepturi autor",
                vectors: [3]
            },
            47: {
                name: "Curriculum INTELIGENȚIA™",
                description: "5 săpt.: lecții, exerciții, implementare",
                requirements: "[MODULI], [LECȚII], [EXERCIȚII], [ASSESS]",
                spec: "Structură cu outcomes + rubrici",
                output: "{syllabus,assets,assess}",
                kpi: "completion>70%",
                guardrails: "nivel adaptiv",
                vectors: [3]
            },
            48: {
                name: "Playbook de Internaționalizare",
                description: "EN/RO multicanal + standarde stilistice",
                requirements: "[PIEȚE], [CANAL], [LOCALIZARE]",
                spec: "Mesaj nucleu + adaptere; QA lingvistic",
                output: "{copy,glossary,process}",
                kpi: "lift pe piață nouă",
                guardrails: "cultură locală",
                vectors: [3]
            },
            49: {
                name: "Assistant Onboarding GPT",
                description: "Pentru Nota Doi, cu memorie și profilare",
                requirements: "[PROFILE], [MEMORIE], [FLOW]",
                spec: "Profilare progresivă + memorie curtabilă",
                output: "{slots,forms,answers}",
                kpi: "TTV user↓",
                guardrails: "PII safe",
                vectors: [1]
            },
            50: {
                name: "Sistemul CUSNIR.OS™",
                description: "Rețea de asistenți sincronizați ontologic și comercial",
                requirements: "[AGENTS], [PROTOCOL], [ONTOLOGIE], [BUS]",
                spec: "Orchestrare; ontologie comună; evaluare",
                output: "{registry,contracts,benchmarks}",
                kpi: "conflict rate<2%",
                guardrails: "versionare strictă",
                vectors: [1, 5]
            }
        };

        const VECTOR_NAMES = {
            1: "Strategic",
            2: "Retoric", 
            3: "Conținut",
            4: "Cognitiv",
            5: "Memetic",
            6: "Date",
            7: "Criză"
        };

        let selectedModule = null;
        let sessionHistory = [];
        let currentGeneration = null;

        // Initialize the interface
        function initializeInterface() {
            populateModuleGrid();
            updateSessionConfig();
        }

        // Populate module grid based on vector filter
        function populateModuleGrid() {
            const vectorFilter = document.getElementById('vectorSelect').value;
            const moduleGrid = document.getElementById('moduleGrid');
            
            moduleGrid.innerHTML = '';
            
            Object.entries(MODULES).forEach(([id, module]) => {
                if (vectorFilter === 'all' || module.vectors.includes(parseInt(vectorFilter))) {
                    const moduleCard = createModuleCard(id, module);
                    moduleGrid.appendChild(moduleCard);
                }
            });
        }

        // Create module card
        function createModuleCard(id, module) {
            const card = document.createElement('div');
            card.className = `module-card glass-effect p-4 rounded-lg cursor-pointer transition-all duration-300 hover:glow-blue vector-${module.vectors[0]} no-break`;
            card.onclick = () => selectModule(id);
            
            const vectorBadges = module.vectors.map(v => 
                `<span class="vector-badge v${v}">V${v}</span>`
            ).join(' ');
            
            card.innerHTML = `
                <div class="flex justify-between items-start mb-2">
                    <h3 class="font-semibold text-sm text-blue-300">M${id.padStart(2, '0')}</h3>
                    <div class="flex gap-1">${vectorBadges}</div>
                </div>
                <h4 class="font-bold text-white mb-2 text-sm">${module.name}</h4>
                <p class="text-gray-300 text-xs mb-3 line-clamp-2">${module.description}</p>
                <div class="text-xs text-gray-400">
                    <div class="mb-1"><strong>KPI:</strong> ${module.kpi}</div>
                </div>
            `;
            
            return card;
        }

        // Select module
        function selectModule(id) {
            selectedModule = id;
            
            // Update visual selection
            document.querySelectorAll('.module-card').forEach(card => {
                card.classList.remove('ring-2', 'ring-blue-500');
            });
            
            event.currentTarget.classList.add('ring-2', 'ring-blue-500');
            
            // Update session config
            updateSessionConfig();
        }

        // Update session configuration display
        function updateSessionConfig() {
            const config = {
                module: selectedModule ? `M${selectedModule.padStart(2, '0')} - ${MODULES[selectedModule].name}` : 'Niciun modul selectat',
                domain: document.getElementById('domainSelect').value,
                scale: document.getElementById('scaleSelect').value,
                urgency: document.getElementById('urgencySelect').value,
                resources: document.getElementById('resourcesSelect').value,
                complexity: document.getElementById('complexitySelect').value,
                application: document.getElementById('applicationSelect').value,
                output_format: document.getElementById('outputSelect').value
            };
            
            document.getElementById('sessionConfig').innerHTML = Object.entries(config)
                .map(([key, value]) => `<span class="inline-block mr-4"><strong>${key}:</strong> ${value}</span>`)
                .join('');
        }

        // Generate session hash
        function generateSessionHash() {
            const config = {
                module: selectedModule,
                domain: document.getElementById('domainSelect').value,
                scale: document.getElementById('scaleSelect').value,
                urgency: document.getElementById('urgencySelect').value,
                resources: document.getElementById('resourcesSelect').value,
                complexity: document.getElementById('complexitySelect').value,
                application: document.getElementById('applicationSelect').value,
                output_format: document.getElementById('outputSelect').value,
                timestamp: Date.now()
            };
            
            const hashString = JSON.stringify(config);
            let hash = 0;
            for (let i = 0; i < hashString.length; i++) {
                const char = hashString.charCodeAt(i);
                hash = ((hash << 5) - hash) + char;
                hash = hash & hash;
            }
            return Math.abs(hash).toString(16).substr(0, 8);
        }

        // Generate prompt
        function generatePrompt() {
            if (!selectedModule) {
                alert('Selectează un modul înainte de a genera promptul!');
                return;
            }
            
            const module = MODULES[selectedModule];
            const hash = generateSessionHash();
            const timestamp = new Date().toLocaleString('ro-RO');
            
            const config = {
                module_id: selectedModule,
                module_name: module.name,
                domain: document.getElementById('domainSelect').value,
                scale: document.getElementById('scaleSelect').value,
                urgency: document.getElementById('urgencySelect').value,
                resources: document.getElementById('resourcesSelect').value,
                complexity: document.getElementById('complexitySelect').value,
                application: document.getElementById('applicationSelect').value,
                output_format: document.getElementById('outputSelect').value,
                hash: hash,
                timestamp: timestamp
            };
            
            const prompt = generateDynamicPrompt(module, config);
            
            document.getElementById('promptOutput').value = prompt;
            document.getElementById('originalPrompt').value = prompt;
            document.getElementById('testInput').value = prompt;
            document.getElementById('sessionHash').textContent = `Hash: ${hash}`;
            
            // Save to history
            currentGeneration = { config, prompt, hash, timestamp };
            sessionHistory.unshift(currentGeneration);
            updateHistoryDisplay();
        }

        // Generate dynamic prompt based on module and config
        function generateDynamicPrompt(module, config) {
            const contextVariants = {
                SaaS: "o platformă SaaS în creștere care servește clienți enterprise",
                fintech: "o companie fintech inovatoare ce dezvoltă soluții de plăți",
                ecommerce: "un magazin online cu focus pe experiența clientului",
                consulting: "o firmă de consultanță strategică pentru companii tech",
                personal_brand: "un personal brand în construcție cu audiență tech",
                education: "o platformă educațională cu cursuri digitale"
            };
            
            const urgencyMap = {
                pilot: "un proiect pilot cu deadline în 2 săptămâni",
                sprint: "un sprint de dezvoltare cu livrare în 1 lună", 
                enterprise: "o implementare enterprise cu timeline de 3 luni",
                crisis: "o situație de criză care necesită răspuns imediat"
            };
            
            const applicationContext = {
                training: "pentru antrenarea echipei interne",
                audit: "pentru auditarea sistemelor existente",
                implementare: "pentru implementarea operațională directă",
                crisis_response: "pentru răspunsul la o criză în curs"
            };

            return `# ${module.name} - Prompt Industrial Generat

## CONTEXT SESIUNE
- **Hash Generare:** ${config.hash}
- **Timestamp:** ${config.timestamp}
- **Domeniu:** ${contextVariants[config.domain]}
- **Scară:** ${config.scale}
- **Urgență:** ${urgencyMap[config.urgency]}
- **Aplicație:** ${applicationContext[config.application]}

## OBIECTIV
${module.description}

Adaptează această implementare pentru contextul specific: ${contextVariants[config.domain]} la nivel ${config.scale}, cu urgența "${config.urgency}" și aplicația "${config.application}".

## CERINȚE DE INTRARE
${module.requirements}

**Adaptări contextuale pentru ${config.domain}:**
- Consideră specificul industriei ${config.domain}
- Adaptează la scara ${config.scale}
- Respectă constrangerile de urgență: ${config.urgency}
- Optimizează pentru aplicația: ${config.application}

## SPECIFICAȚII TEHNICE
${module.spec}

**Nivel de complexitate:** ${config.complexity}
**Resurse disponibile:** ${config.resources}

## FORMAT OUTPUT CERUT
${module.output}

**Format final:** ${config.output_format}

## KPI DE VALIDARE  
${module.kpi}

**Metrici suplimentare pentru ${config.domain}:**
- Time to implementation: <${config.urgency === 'crisis' ? '24h' : '7 zile'}
- Adoption rate: >${config.scale === 'enterprise' ? '85%' : '70%'}
- Resource efficiency: optimal pentru "${config.resources}"

## GUARDRAILS
${module.guardrails}

**Constrângeri suplimentare:**
- Respectă standardele de compliance pentru ${config.domain}
- Menține consistența cu identitatea de brand ${config.scale}
- Asigură scalabilitatea pentru creștere ulterioară

## TELEMETRIE
- **run_id:** "${config.hash}"
- **start_ts:** "${config.timestamp}"
- **module:** "M${config.module_id}"
- **context:** ${JSON.stringify({domain: config.domain, scale: config.scale, urgency: config.urgency})}
- **success_criteria:** {${module.kpi}}

## FAIL-SAFES
În cazul în care lipsesc date necesare:
1. **Alternativa A:** Implementare minimă cu cerințe de bază pentru ${config.domain}
2. **Alternativa B:** Prototip rapid adaptat pentru ${config.urgency}
3. **Estimare risc:** Medium pentru ${config.application}, scăzut pentru ${config.complexity}

## NEXT ACTIONS
1. **Owner:** Team lead ${config.scale}
2. **Task:** Implementare ${module.name} pentru ${config.domain}
3. **Deadline:** Conform urgență ${config.urgency}
4. **Dependencies:** Resources ${config.resources}, format ${config.output_format}

---
**PROMPTFORGE™ v3.0** | Generat: ${config.timestamp} | Hash: ${config.hash}`;
        }

        // Reroll prompt with same config but new timestamp
        function rerollPrompt() {
            if (!selectedModule) {
                alert('Selectează un modul înainte de a face reroll!');
                return;
            }
            generatePrompt();
        }

        // Export prompt
        function exportPrompt() {
            const prompt = document.getElementById('promptOutput').value;
            if (!prompt) {
                alert('Generează un prompt înainte de export!');
                return;
            }
            
            const blob = new Blob([prompt], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `prompt_${currentGeneration ? currentGeneration.hash : 'export'}.txt`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        // GPT Editor functions
        function invokeGptEditor() {
            const originalPrompt = document.getElementById('originalPrompt').value;
            if (!originalPrompt) {
                alert('Generează un prompt înainte de a-l edita!');
                return;
            }
            
            // Simulate GPT editing
            showEditorStatus('Se procesează cu GPT-4o...', 'info');
            
            setTimeout(() => {
                const editedPrompt = simulateGptEditing(originalPrompt);
                document.getElementById('editedPrompt').value = editedPrompt;
                showEditorStatus('Prompt optimizat cu succes!', 'success');
            }, 2000);
        }

        function simulateGptEditing(original) {
            // Simulate GPT improvements
            let edited = original;
            
            // Add more structure
            edited = edited.replace(/##/g, '###');
            edited = edited.replace(/# /g, '## ');
            edited = '# PROMPT OPTIMIZAT GPT-4o\n\n' + edited;
            
            // Add execution notes
            edited += '\n\n## OPTIMIZĂRI APLICATE\n';
            edited += '- ✅ Structură îmbunătățită pentru claritate\n';
            edited += '- ✅ Contextualizare mai precisă\n';
            edited += '- ✅ Instrucțiuni mai specifice\n';
            edited += '- ✅ Format output standardizat\n';
            edited += '- ✅ Validare automată KPI\n\n';
            edited += '**Optimizat de:** GPT-4o Editor Engine\n';
            edited += `**Timestamp:** ${new Date().toLocaleString('ro-RO')}\n`;
            
            return edited;
        }

        function validateStructure() {
            const prompt = document.getElementById('editedPrompt').value || document.getElementById('originalPrompt').value;
            if (!prompt) {
                alert('Nu există prompt de validat!');
                return;
            }
            
            // Simple structure validation
            const hasTitle = prompt.includes('#');
            const hasContext = prompt.toLowerCase().includes('context');
            const hasKPI = prompt.toLowerCase().includes('kpi');
            const hasOutput = prompt.toLowerCase().includes('output');
            
            const score = [hasTitle, hasContext, hasKPI, hasOutput].filter(Boolean).length;
            const status = score >= 3 ? 'success' : score >= 2 ? 'warning' : 'error';
            const message = `Structură validată: ${score}/4 componente prezente`;
            
            showEditorStatus(message, status);
        }

        function showEditorStatus(message, type) {
            const statusDiv = document.getElementById('editorStatus');
            statusDiv.className = `mt-4 p-3 rounded-lg ${type === 'success' ? 'bg-green-800 text-green-200' : 
                                                         type === 'warning' ? 'bg-yellow-800 text-yellow-200' : 
                                                         type === 'error' ? 'bg-red-800 text-red-200' : 
                                                         'bg-blue-800 text-blue-200'}`;
            statusDiv.textContent = message;
            statusDiv.classList.remove('hidden');
            
            if (type !== 'info') {
                setTimeout(() => statusDiv.classList.add('hidden'), 3000);
            }
        }

        // Test Engine functions
        function testPrompt() {
            const testInput = document.getElementById('testInput').value;
            if (!testInput) {
                alert('Nu există prompt de testat!');
                return;
            }
            
            const outputDiv = document.getElementById('testOutput');
            outputDiv.innerHTML = '<div class="text-blue-400"><i class="fas fa-spinner fa-spin mr-2"></i>Se execută pe GPT-4o...</div>';
            
            setTimeout(() => {
                const simulatedResponse = simulateGptResponse(testInput);
                outputDiv.innerHTML = simulatedResponse;
                
                // Show validation
                document.getElementById('testValidation').classList.remove('hidden');
                performValidation(simulatedResponse);
            }, 2500);
        }

        function simulateGptResponse(prompt) {
            // Extract module info for realistic response
            const moduleMatch = prompt.match(/# ([^-]+)/);
            const moduleName = moduleMatch ? moduleMatch[1].trim() : 'Unknown Module';
            
            return `<div class="text-green-400 mb-3">
                <i class="fas fa-check-circle mr-2"></i>Răspuns GPT-4o generat cu succes
            </div>
            
            <div class="bg-gray-800 p-4 rounded border-l-4 border-green-500">
                <h4 class="font-bold text-white mb-2">Execuție: ${moduleName}</h4>
                
                <p class="text-gray-300 mb-3">
                    Am analizat cerințele și contextul specificat. Implementez soluția conform specificațiilor tehnice cu următoarele componente:
                </p>
                
                <div class="bg-gray-900 p-3 rounded mb-3">
                    <div class="text-sm font-mono text-green-400">
                        ✓ Configurare inițială completă<br>
                        ✓ Validare intrări conform cerințelor<br>
                        ✓ Procesare cu algoritmi specifici<br>
                        ✓ Generare output în formatul cerut<br>
                        ✓ Aplicare guardrails și validări<br>
                        ✓ Logging telemetrie activat
                    </div>
                </div>
                
                <div class="text-sm text-gray-400">
                    <strong>Rezultat:</strong> Implementare reușită cu toate KPI-urile îndeplinite<br>
                    <strong>Timp execuție:</strong> 2.3s<br>
                    <strong>Resurse utilizate:</strong> Optimale pentru contextul specificat<br>
                    <strong>Next actions:</strong> Gata pentru implementare în producție
                </div>
            </div>`;
        }

        function performValidation(response) {
            // Simulate validation scoring
            const structureScore = Math.floor(Math.random() * 20) + 80; // 80-100
            const kpiScore = Math.floor(Math.random() * 15) + 85; // 85-100
            const clarityScore = Math.floor(Math.random() * 10) + 90; // 90-100
            
            document.getElementById('structureScore').textContent = structureScore + '%';
            document.getElementById('kpiScore').textContent = kpiScore + '%';
            document.getElementById('clarityScore').textContent = clarityScore + '%';
            
            // Color code scores
            document.getElementById('structureScore').className = `text-2xl font-bold ${structureScore >= 90 ? 'text-green-400' : structureScore >= 75 ? 'text-yellow-400' : 'text-red-400'}`;
            document.getElementById('kpiScore').className = `text-2xl font-bold ${kpiScore >= 90 ? 'text-blue-400' : kpiScore >= 75 ? 'text-yellow-400' : 'text-red-400'}`;
            document.getElementById('clarityScore').className = `text-2xl font-bold ${clarityScore >= 90 ? 'text-purple-400' : clarityScore >= 75 ? 'text-yellow-400' : 'text-red-400'}`;
        }

        function validateKPI() {
            const response = document.getElementById('testOutput').textContent;
            if (!response || response.includes('Se execută')) {
                alert('Rulează testul înainte de a valida KPI!');
                return;
            }
            
            document.getElementById('testValidation').classList.remove('hidden');
            performValidation(response);
        }

        // History functions
        function updateHistoryDisplay() {
            const historyList = document.getElementById('historyList');
            
            if (sessionHistory.length === 0) {
                historyList.innerHTML = `
                    <div class="text-gray-400 text-center py-8">
                        <i class="fas fa-clock text-3xl mb-2"></i>
                        <p>Istoricul va fi populat după prima generare</p>
                    </div>
                `;
                return;
            }
            
            historyList.innerHTML = sessionHistory.slice(0, 10).map((entry, index) => `
                <div class="bg-gray-800 rounded-lg p-4 border-l-4 border-blue-500 no-break">
                    <div class="flex justify-between items-start mb-2">
                        <div class="flex items-center space-x-2">
                            <span class="text-blue-400 font-semibold">#{${index + 1}}</span>
                            <span class="text-sm text-gray-400">${entry.timestamp}</span>
                        </div>
                        <span class="text-xs font-mono text-gray-500">${entry.hash}</span>
                    </div>
                    
                    <div class="mb-2">
                        <span class="text-white font-medium">M${entry.config.module_id.padStart(2, '0')} - ${entry.config.module_name}</span>
                    </div>
                    
                    <div class="text-sm text-gray-300 mb-2">
                        <span class="mr-4"><strong>Domeniu:</strong> ${entry.config.domain}</span>
                        <span class="mr-4"><strong>Scară:</strong> ${entry.config.scale}</span>
                        <span><strong>Urgență:</strong> ${entry.config.urgency}</span>
                    </div>
                    
                    <button onclick="reloadFromHistory(${index})" class="text-xs bg-blue-600 hover:bg-blue-700 px-3 py-1 rounded text-white transition-colors">
                        <i class="fas fa-redo mr-1"></i>Reîncarcă
                    </button>
                </div>
            `).join('');
        }

        function reloadFromHistory(index) {
            const entry = sessionHistory[index];
            
            // Set form values
            document.getElementById('domainSelect').value = entry.config.domain;
            document.getElementById('scaleSelect').value = entry.config.scale;
            document.getElementById('urgencySelect').value = entry.config.urgency;
            document.getElementById('resourcesSelect').value = entry.config.resources;
            document.getElementById('complexitySelect').value = entry.config.complexity;
            document.getElementById('applicationSelect').value = entry.config.application;
            document.getElementById('outputSelect').value = entry.config.output_format;
            
            // Select module
            selectModule(entry.config.module_id);
            
            // Load prompt
            document.getElementById('promptOutput').value = entry.prompt;
            document.getElementById('originalPrompt').value = entry.prompt;
            document.getElementById('testInput').value = entry.prompt;
            document.getElementById('sessionHash').textContent = `Hash: ${entry.hash}`;
            
            currentGeneration = entry;
            updateSessionConfig();
        }

        // Event listeners
        document.getElementById('vectorSelect').addEventListener('change', populateModuleGrid);
        document.getElementById('domainSelect').addEventListener('change', updateSessionConfig);
        document.getElementById('scaleSelect').addEventListener('change', updateSessionConfig);
        document.getElementById('urgencySelect').addEventListener('change', updateSessionConfig);
        document.getElementById('resourcesSelect').addEventListener('change', updateSessionConfig);
        document.getElementById('complexitySelect').addEventListener('change', updateSessionConfig);
        document.getElementById('applicationSelect').addEventListener('change', updateSessionConfig);
        document.getElementById('outputSelect').addEventListener('change', updateSessionConfig);

        // Initialize
        initializeInterface();
    </script>
<script defer="" src="https://static.cloudflareinsights.com/beacon.min.js/vcd15cbe7772f49c399c6a5babf22c1241717689176015" integrity="sha512-ZpsOmlRQV6y907TI0dKBHq9Md29nnaEIPlkf84rnaERnq6zvWvPUqr2ft8M1aS28oN72PdrCzSjY4U6VaAw1EQ==" data-cf-beacon="{&quot;rayId&quot;:&quot;97045202b84f72c3&quot;,&quot;serverTiming&quot;:{&quot;name&quot;:{&quot;cfExtPri&quot;:true,&quot;cfEdge&quot;:true,&quot;cfOrigin&quot;:true,&quot;cfL4&quot;:true,&quot;cfSpeedBrain&quot;:true,&quot;cfCacheStatus&quot;:true}},&quot;version&quot;:&quot;2025.8.0&quot;,&quot;token&quot;:&quot;4edd5f8ec12a48cfa682ab8261b80a79&quot;}" crossorigin="anonymous"></script>


    <script id="html_badge_script1">
        window.__genspark_remove_badge_link = "https://www.genspark.ai/api/html_badge/" +
            "remove_badge?token=To%2FBnjzloZ3UfQdcSaYfDh2L1Iu9ttHEzXwjX3uoDME%2FiHuIrZpAW%2FBjBtM0kRT%2BtbMQgCZ2fqdzHwPxc8WuCoFnAIhihXAemqsOV92XPGi0jvxKyKOhNefW%2BLYxNpjMclUO0MuGghpFkaBCCckP3YrQ1fex%2FVfAv1%2BWTmxkws10X3IB9F%2F5tBsJw7Ez4jHdJtxWnJU9Y16%2FzRbgH5DeD%2BArPvbWS6XcxyM6AW8aj%2BQGoRHW0%2Byul7Hl0opPof2IkP5XKxYeTbLP3pkJHNaxcqf9zX8R22CJv%2F4jSHyfE7w%2FgMAkMKgbmkS%2Bs9Rw4h9efok5WH6Ytg%2BxUS8MrpWGiiNWJwlH7%2F1W%2B2PJzI5OFkxyoewkqITtq6VlNuSB3JLpHoX2vmKPUX723QGm%2F3CVsJXV276EToqjPmCIuNiejTGFxgLWDI%2BUplrmTephHO3GQyt6p0ZRdavL4y4Kq4Bk2UlmeqPMKEAojlhk9dLAnKgok2uVtOWgI4VYAc41%2FeH17IaxepoY9NRgMPXztopxQUU7vbUMFEaROQB333Lzh4g%3D";
        window.__genspark_locale = "en-US";
        window.__genspark_token = "To/BnjzloZ3UfQdcSaYfDh2L1Iu9ttHEzXwjX3uoDME/iHuIrZpAW/BjBtM0kRT+tbMQgCZ2fqdzHwPxc8WuCoFnAIhihXAemqsOV92XPGi0jvxKyKOhNefW+LYxNpjMclUO0MuGghpFkaBCCckP3YrQ1fex/VfAv1+WTmxkws10X3IB9F/5tBsJw7Ez4jHdJtxWnJU9Y16/zRbgH5DeD+ArPvbWS6XcxyM6AW8aj+QGoRHW0+yul7Hl0opPof2IkP5XKxYeTbLP3pkJHNaxcqf9zX8R22CJv/4jSHyfE7w/gMAkMKgbmkS+s9Rw4h9efok5WH6Ytg+xUS8MrpWGiiNWJwlH7/1W+2PJzI5OFkxyoewkqITtq6VlNuSB3JLpHoX2vmKPUX723QGm/3CVsJXV276EToqjPmCIuNiejTGFxgLWDI+UplrmTephHO3GQyt6p0ZRdavL4y4Kq4Bk2UlmeqPMKEAojlhk9dLAnKgok2uVtOWgI4VYAc41/eH17IaxepoY9NRgMPXztopxQUU7vbUMFEaROQB333Lzh4g=";
    </script>
    
    <script id="html_notice_dialog_script" src="https://www.genspark.ai/notice_dialog.js"></script>
    <div id="thunderbit-crx-side-bar" style="display:block;opacity:1;pointer-events:all;top:0;right:0;z-index:9007199254740991;position:fixed;pointer-events:none;user-select:none;"></div><button id="open-side-panel" style="width:0;height:0;opacity:0;user-select:none;pointer-events:all;position:absolute;bottom:0;right:0;padding:0;border:0;outline:none;"></button><tldx-lmi-shadow-root data-wxt-shadow-root=""></tldx-lmi-shadow-root><div id="tldx-toast-container"></div><div id="monica-content-root" class="monica-widget" style="pointer-events: auto;"></div></body></html>