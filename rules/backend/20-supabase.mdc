---
description: Supabase Auth/DB/RLS pentru istoric cloud + entitlements.
globs:
  - "lib/db/**"
  - "supabase/**"
alwaysApply: false
---

# 20-supabase.mdc — Supabase Backend

## Schema completă (18 tabele)

### Core Identity
- **orgs** — workspaces/organizații
- **org_members** — membri per workspace  
- **profiles** — profile utilizatori (extend auth.users)

### Plans & Entitlements  
- **plans** — catalog planuri (Free/Creator/Pro/Enterprise)
- **subscriptions** — mapare Stripe→org
- **entitlements** — drepturi efective per org (11 flags)
- **user_addons** — add-ons per user (Evaluator/Export Designer)

### Modules & Versioning
- **modules** — catalog M01–M50
- **module_versions** — versionare module cu semver + changelog
- **prompts** — prompturi per project + module
- **prompt_versions** — versiuni prompturi cu DAG tracking
- **version_edges** — relații parent/merge între versiuni

### Execution & Results
- **runs** — fiecare generare/test cu telemetrie
- **scores** — scoruri Test Engine (clarity/execution/ambiguity/business_fit)
- **bundles** — pachete export cu artefacte
- **artifacts** — fișiere individuale (txt/md/json/pdf)
- **manifests** — metadata bundle + semnături

### Industry & API
- **industry_packs** — pachete verticale (FinTech/E-Commerce/Education)
- **org_industry_packs** — atașare pack la org
- **api_keys** — chei API pentru Enterprise

## RLS policies

### Organizații (workspace isolation)
```sql
-- Membrii văd doar org-urile lor
create policy "org_read_members" on orgs
  for select using (
    exists (select 1 from org_members m 
            where m.org_id = orgs.id and m.user_id = auth.uid())
  );
```

### Propagare org_id pentru tabele dependente
```sql  
-- Prompturi vizibile doar membrilor org
create policy "prompts_by_org" on prompts
  for select using (
    exists (select 1 from orgs o join org_members m on m.org_id = o.id
            where o.id = prompts.org_id and m.user_id = auth.uid())
  );
```

### Entitlements (per org + per user)
```sql
create policy "entitlements_by_membership" on entitlements
  for select using (
    org_id in (select org_id from org_members where user_id = auth.uid())
  );
```

## Migrații idempotente

### Migration strategy
- Forward-only: fără downgrade
- Batch mic: 0001_base.sql, 0002_rls.sql, 0003_views.sql, etc.
- Environment gating: seed doar pe dev cu `current_setting('app.env')`
- Self-test: `raise notice` cu counts pentru verificare

### Key migrations
1. **0001_base.sql** — tabele core + extensii
2. **0002_rls.sql** — activare RLS + policies  
3. **0003_views.sql** — views utile (prompt_latest, entitlements_effective)
4. **0004_indexes.sql** — performance indexes
5. **0005_seed_modules.sql** — seed M01–M50 + plans
6. **0010_backfill_versions.sql** — migrare istoric existent

## Triggers & funcții

### Auto-checksum pentru versiuni
```sql
create or replace function pf_compute_checksum()
returns trigger as $$
declare
  payload text;
begin
  payload := coalesce(new.body_md,'') || coalesce(new.params_7d::text,'');
  new.checksum_sha256 := 'sha256:' || encode(digest(payload, 'sha256'),'hex');
  return new;
end; $$ language plpgsql;

create trigger trg_checksum before insert or update 
on prompt_versions for each row execute function pf_compute_checksum();
```

### Entitlements management
```sql
create or replace function pf_apply_plan_entitlements(p_org uuid, p_plan text)
returns void language sql as $$
  insert into entitlements(org_id, flag, value, source, source_ref)
  select p_org, key, (p.flags->>key)::boolean, 'plan', p_plan
  from plans p, jsonb_object_keys(p.flags) as key
  where p.plan_code = p_plan
  on conflict (org_id, flag, source, source_ref) do update
    set value = excluded.value;
$$;
```

## Views utile

### Entitlements efective
```sql
create view entitlements_effective as
select org_id, flag, bool_or(value) as enabled
from entitlements
group by org_id, flag;
```

### Ultima versiune prompt
```sql  
create view prompt_latest as
select distinct on (p.id) p.id as prompt_id, pv.id as prompt_version_id, pv.semver
from prompts p
join prompt_versions pv on pv.prompt_id = p.id
order by p.id, pv.created_at desc;
```

## Storage integration
- **Bucket**: `/bundles/{org_id}/{module_id}/{run_hash}/`
- **Artefacte binare**: PDF-uri mari în Storage
- **Metadata**: paths + checksums în tabele
- **Signed URLs**: pentru download sigur

## Retenție & cleanup
- **Free**: 7 zile runs + artifacts
- **Pro**: 90 zile  
- **Enterprise**: unlimited sau policy client
- **Soft delete**: `deleted_at` + exclude prin views
- **GDPR**: proceduri delete pentru user requests